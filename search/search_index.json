{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Unciv wiki!","text":"<p>Unciv is an open source, mod-friendly Android and Desktop remake of Civ V, made with LibGDX. Build your civilization, research technologies, expand your cities and defeat your foes!</p> <p>This wiki contains all the onboarding information required to start contributing to the project. You can join us in any of the open issues, or work on improving anything you want - once you're finished, issue a pull request and it'll go into the next version!</p>"},{"location":"#how-do-i-contribute","title":"How do I contribute?","text":"<p>The most valuable first step to getting involved is engaging with our community: join the Discord! It's a great place to meet your fellow contributors. In addition, you can keep track of requests, bugs, and our todo list for the application at the repository's Issue Tracker</p> <p>If you're a developer, you'll probably want to start at the Getting Started page!</p> <p>If you're a translator, head over to Translating!</p> <p>If you're a modder, start here.</p> <p>If not, you can still help by spreading the word - vote for Unciv where you can, mention it on Reddit or Twitter etc, and help us with new ideas of how to get the word out!</p>"},{"location":"Credits/","title":"Credits","text":""},{"location":"Credits/#icon-credits","title":"Icon Credits","text":"<p>Flag Icons made by Freepik from www.flaticon.com and licensed by Creative Commons 3.0, except for:</p> <ul> <li>[Catalan flag] by J0anJosep licensed under Public Domain</li> </ul> <p>New Unciv logo made by u-ndefined on Discord</p> <p>Base tile icons for the \"Fantasy Hex\" tileset belong to CuddlyClover @ https://cuddlyclover.itch.io/fantasy-hex-tiles with a few additions by various contributors</p> <p>Tile improvements and units, as well as the terrains and improvements for HexaRealm tileset, are made by The Bucketeer / @GeneralWadaling and are licenced under Creative Commons 3.0</p> <p>Units for the AbsoluteUnits unitset are made by letstalkaboutdune and are licensed under Creative Commons Attribution 4.0 International</p> <p>Promotional trailer for Steam and other storefronts made by letstalkaboutdune</p> <p>Unless otherwise specified, all the following are from the Noun Project licenced under either Creative Commons or Public Domain</p>"},{"location":"Credits/#stat-icons","title":"Stat icons","text":"<ul> <li>Gear by Alex Bickov for Production</li> <li>Apple by Pedro Gon\u00e7alves for Food</li> <li>gold by Eliricon for Gold</li> <li>Beaker by Delwar Hossain for Science</li> <li>Music by Naomi Atkinson for Culture</li> <li>Smiley by Alexander Skowalsky for Happiness</li> <li>Dove by Sandra for Faith</li> <li>User by St\u00e9phanie Rusch for Population</li> <li>Unhappy By Daryl Vandermont for Malcontent</li> </ul>"},{"location":"Credits/#units","title":"Units","text":""},{"location":"Credits/#ancient-era","title":"Ancient Era","text":"<ul> <li>Hammer By Hea Poh Lin for Worker</li> <li>Flag By Melvin Poppelaars for Settler</li> <li>Eagle By anggun for Scout</li> <li>Axe By ehab.abdullah for Warrior</li> <li>Haka By Josh for Maori Warrior</li> <li>Spiked Club by Hamish</li> <li>Bow And Arrow By Viktor Ostrovsky for Archer</li> <li>Bow By Arthur Shlain for Bowman</li> <li>Javelin By WEBTECHOPS LLP for Atlatlist</li> <li>arrows by Ayub Irawan for Skirmisher</li> <li>Fishing Vessel By Luis Prado for Work Boats</li> <li>Greek Trireme By Zachary McCune for Trireme</li> <li>Greek Trireme By Zachary McCune for Quinquereme. The original work has been modified.</li> <li>dragon by BGBOXXX Design for Dromon</li> <li>Viking Boat by Eucalyp for Galley</li> <li>Chariot By Andrew Doane for Chariot Archer</li> <li>Elephant By Luis Prado for War Elephant</li> <li>Centaur by Michael Wohlwend for Horse Archer</li> <li>Spear By Stephen Copinger for Spearman</li> <li>Greek shield for Hoplite</li> <li>ram by Becris for Battering Ram</li> <li>Spear by lastspark for Marauder</li> <li>Spiked club for Brute</li> <li>Hoplite by Eucalyp for Immortal</li> <li>Slingshot by James Keuning for Slinger</li> <li>warrior By DinosoftLab for Pictish Warrior (combined with Shamrock, see Promotions)</li> </ul>"},{"location":"Credits/#classical-era","title":"Classical Era","text":"<ul> <li>Catapult By Jakub Ukrop</li> <li>Unloaded Crossbow By Hamish as Ballista</li> <li>Bow and arrow By Lars Meiertoberens for Composite Bowman</li> <li>Sword By Guilherme Furtado for Swordsman</li> <li>Mohawk By Dairy Free Design for Mohawk Warrior</li> <li>Roman Helmet By parkjisun for Legion</li> <li>Horse By AFY Studio for Horseman</li> <li>Horse Head By Juan Pablo Bravo for Companion Cavalry</li> <li>Elephant By Angriawan Ditya Zulkarnain for African Forest Elephant. The original work has been modified.</li> <li>Horse By Ranah Pixel Studio for Cataphract</li> </ul>"},{"location":"Credits/#medieval-era","title":"Medieval Era","text":"<ul> <li>Ship By Vanisha for Galleass</li> <li>Crossbow By Creaticca Creative Agency for Crossbowman</li> <li>Longbow By Hamish for Longbowman</li> <li>Trebuchet By Ben Davis</li> <li>Sword By uzeir syarief for Longswordsman</li> <li>Samurai By Chanut is Industries</li> <li>Spear By Alvaro Cabrera for Pikeman</li> <li>Halberd parkjisun for Landsknecht</li> <li>Knight By Tyler Glaude</li> </ul>"},{"location":"Credits/#renaissance-era","title":"Renaissance Era","text":"<ul> <li>Portuguese Caravel by Zack McCune for Caravel</li> <li>Cannon By Orin Zuu</li> <li>Musket By Cezary Lopacinski for Musketman</li> <li>Tarbouche By Mohamed Amine for Janissary</li> <li>Black powder musket By Jarem Fyre for Minuteman</li> <li>Rapier By Hamish for Musketeer</li> <li>Ship By Orin Zuu for Frigate</li> <li>Pirate by Berkah Icon for Privateer</li> <li>Pirate by Smalllike for Sea Beggar*</li> <li>Ship By Mungang Kim for Ship of the Line</li> <li>Lance By parkjisun for Lancer</li> <li>Sword By Daniela Baptista for Sipahi</li> <li>Helmet by Robert Bjurshagen for Hakkapeliitta</li> </ul>"},{"location":"Credits/#industrial-era","title":"Industrial Era","text":"<ul> <li>Rifle By Chameleon Design for Rifleman</li> <li>Bayonet By food lover for Carolean</li> <li>soldier by ProSymbols for Mehal Sefari</li> <li>Horse By Bakunetso Kaito for Cavalry</li> <li>horse racing By Sergio Morozov for Cossack</li> <li>Marching Band by Darrin Loeliger, US for Hussar. The original work has been modified.</li> <li>Artillery By Creative Mania</li> <li>Ship By Aisyah for Ironclad</li> </ul>"},{"location":"Credits/#modern-era","title":"Modern Era","text":"<ul> <li>Submarine By Hea Poh Lin, MY</li> <li>Helmet By Daniel Turner for Great War Infantry</li> <li>Cap By Creative Mania for Foreign Legion</li> <li>xm8 By Xela Ub for Infantry</li> <li>Icon for Carrier made by JackRainy, based on Aircraft Carrier By IcoLabs, BR</li> <li>Battleship By Vitaliy Gorbachev, KZ for Battleship</li> <li>machine-gun By Joana Pereira for Machine Gun</li> <li>artillery by Izwar Muis for Anti-Aircraft Gun</li> <li>Tank By corpus delicti for Landship</li> <li>Warship By zidney for Destroyer</li> </ul>"},{"location":"Credits/#atomic-era","title":"Atomic Era","text":"<ul> <li>Water Gun by ProSymbols for Marine</li> <li>Parachute by Nociconist for Paratrooper</li> <li>Tank By jeff for Tank</li> <li>Tank Manuel Dixken, DE for Panzer</li> <li>Anti-Tank Gun By Tom Fricker</li> <li>atomic bomb by AmruID for Atomic Bomb</li> <li>Military vehicle By Luke Anthony Firth For Rocket Artillery</li> <li>Missile By Eucalyp for Mobile SAM</li> </ul>"},{"location":"Credits/#information-era","title":"Information Era","text":"<ul> <li>Submarine by Freepik adapted for Nuclear Submarine</li> <li>APC By Luke Anthony Firth for Mechanized Infantry</li> <li>Battleship by Edi Prastyo for Missile Cruiser</li> <li>Modern Armor By Public Domain Nouns for Modern Armor</li> <li>Nuclear Missile By Lluisa Iborra, ES</li> <li>Robot by Lluisa Iborra, ES for Giant Death Robot</li> <li>Missile By ProSymbols for SS Booster</li> <li>Rocket By BomSymbols for SS Cockpit</li> <li>Engine By Andre for SS Engine</li> <li>Chamber By IYIKON for SS Stasis Chamber</li> </ul>"},{"location":"Credits/#all-eras","title":"All Eras","text":"<ul> <li>Pallet By James Keuning for Great Artist</li> <li>Gear By Melvin Salas for Great Engineer</li> <li>Beaker By Delwar Hossain for Great Scientist</li> <li>Dove by sandra for Great Prophet</li> <li>General By anbileru adaleru for Great General</li> <li>Religion by Bruno G\u00e4tjens Gonz\u00e1lez adapted for Missionary</li> <li>invisibility cloak  by Locad for Inquisitor</li> </ul>"},{"location":"Credits/#resources","title":"Resources","text":"<ul> <li>Saffron By parkjisun for Dye</li> <li>Can By Nick Bluth for Aluminum</li> <li>Coal By Michael Wohlwend</li> <li>Anvil By Jason Dilworth for Iron</li> <li>Deer By Richard Nixon</li> <li>Banana By Adrian Coquet</li> <li>Oil By Tiago Maricate (also as Civilopedia category icon)</li> <li>Statue By Joris Hoogendoorn for Marble</li> <li>Ribbon By Anton for Silk</li> <li>Stone By AFY Studio</li> <li>Goblet By Pedro Santos for Silver</li> <li>Sugar By ahmad</li> <li>Spice By ahmad</li> <li>Radiation symbol By icon 54 for Uranium</li> <li>Wine By Adrien Coquet</li> <li>Wheat By Juraj Sedlak</li> <li>Sheep By Unrecognized</li> <li>Elephant By Kelsey Armstrong for Ivory</li> <li>Cattle By Daniela Baptista</li> <li>Leather By Alen Krummenacher for Furs</li> <li>Gem By Lluisa Iborra</li> <li>Joss Stick By Hea Poh Lin for Incense</li> <li>Pottery By Laymik, UA for Porcelain</li> <li>Jewelry By Shocho, IN</li> <li>Lemons By sachin modgekar, IN for Citrus</li> <li>Pipes By Nibras@design for Copper</li> <li>Crab By YuguDesign</li> <li>Truffle By parkjisun</li> <li>Salt By HAMEL KHALED, DZ</li> </ul>"},{"location":"Credits/#improvements","title":"Improvements","text":"<ul> <li>Woodcutting axe By Chanut is Industries for Lumber Mill</li> <li>Monument By Setyo Ari Wibowo for Landmark</li> <li>Farm By Bonnie Beach</li> <li>Bank By Scott Dunlap for Customs House</li> <li>Academy By CJS</li> <li>Factory By RULI for Manufactory</li> <li>Mine By Edward Boatman</li> <li>Corral By Luis Prado for Pasture</li> <li>Plants By hendra sudibyo for Plantation</li> <li>Pickaxe By Creative Stall for Quarry</li> <li>Food stall By I Putu Kharismayadi for Trading post</li> <li>Road By REVA</li> <li>Ruins By Creative Stall for Ancient runs</li> <li>Ruins By Paulo Volkova for City ruins</li> <li>Fishing Net By Made for Fishing Boats</li> <li>Moai By Template</li> <li>Fort By Adrien Coquet</li> <li>Citadel By Adrien Coquet</li> <li>Village by Andrey Vasiliev</li> <li>pumping station by Peter van Driel for Polder</li> <li>Oil Platform by Georgiana Ionescu for Offshore Platform</li> <li>Broom by Rakhmat Setiawan for Remove Fallout</li> <li>Axe by Those Icons for Remove Forest and Remove Jungle</li> <li>Machete by Robert A. Di Ieso for Remove Marsh</li> <li>Icon for Remove Railroad by vegeta1k95</li> <li>Icon for Remove Road by vegeta1k95</li> </ul>"},{"location":"Credits/#buildings","title":"Buildings","text":"<ul> <li>Building by Aurel for fallback image</li> </ul>"},{"location":"Credits/#ancient-era_1","title":"Ancient Era","text":"<ul> <li>Storehouse By Pedro Santos for Granary</li> <li>Shinto Gate by Alexander Skowalsky for Shrine</li> <li>Pyramid by Oscar Y\u00e1\u00f1ez for Mayan Pyramid</li> <li>Great Wall Of China By Arthur Shlain for Walls</li> <li>Markadan Tower by Vectors Market for Walls of Babylon</li> <li>Block By Monjin Friends for Stone Works</li> <li>korean palace By 1516 for Palace</li> <li>Obelisk By Eliricon for Monument</li> <li>obelisk By IconMark for Stele</li> <li>Cross swords By Creaticca Creative Agency for Barracks</li> <li>Fortress By Creative Stall for Krepost</li> <li>Paper By anam</li> <li>Circus By Ralph Schmitzer</li> <li>Stonehenge By icon 54</li> <li>Ho Chi Minh mausoleum By Ph\u1ea1m Thanh L\u1ed9c for Mausoleum of Halicarnassus</li> <li>Icon for Statue of Zeus made by JackRainy, based on King By Eucalyp</li> <li>temple By Fabio Meroni for Temple of Artemis</li> </ul>"},{"location":"Credits/#classical-era_1","title":"Classical Era","text":"<ul> <li>Lighthouse By Dolly Holmes</li> <li>Lighthouse By Hea Poh Lin for The Great Lighthouse</li> <li>Temple By 1516</li> <li>Anubis By Carpe Diem for Burial Tomb</li> <li>Parthenon By Christopher T. Howlett for The Oracle</li> <li>Stadium By sandra for Colosseum</li> <li>Terracotta Army By Ph\u1ea1m Thanh L\u1ed9c</li> <li>Stadium By Creaticca Creative Agency for Circus Maximus</li> <li>Market By sofi</li> <li>Bazaar By Tokka Elkholy</li> <li>Shekel Coin By Till Teenck for Mint</li> <li>Aqueduct By Arthur Shlain</li> <li>Great Wall By icon 54</li> <li>Rice Field by Graphic Engineer for Terrace farm</li> <li>Canoe By Viktor Fedyuk (Tim P) for Floating Gardens</li> <li>Arc de Triomphe By Andrejs Kirma, LV for National Epic</li> <li>Bank by By P Thanga Vignesh for National Treasury</li> <li>Judge By Kriszti\u00e1n M\u00e1ty\u00e1s for Courthouse</li> <li>Petra By Ranah Pixel Studio for Petra</li> </ul>"},{"location":"Credits/#medieval-era_1","title":"Medieval Era","text":"<ul> <li>College By Alexander Skowalsky for University</li> <li>Wat Arun Ratchawararam Ratchawaramahawihan By J\u00f3zsef Bal\u00e1zs-Heged\u00fcs for Wat</li> <li>College By Vectors Market for National College</li> <li>Chichen Itza By Hea Poh Lin</li> <li>Castle By Mint Shirt</li> <li>Red Fort, Gateway of India By Arunabh Jain, IN for Mughal Fort</li> <li>Angkor Wat By Ph\u1ea1m Thanh L\u1ed9c for Angkor Wat</li> <li>Alhambra By Ph\u1ea1m Thanh L\u1ed9c</li> <li>Books By Abir Alward for Oxford University</li> <li>Forge By Monjin Friends</li> <li>Anchor By Saeful Muslim for Harbor</li> <li>Hand saw By b farias for Workshop</li> <li>House By sofy for Longhouse</li> <li>Hagia Sophia By Felipe Alvarado</li> <li>Factory By Maxim Kulikov for Ironworks</li> <li>Notre Dame By Marco Livolsi</li> <li>Shield and Swords By Alina Oleynik for Armory</li> <li>Machu Picchu By Chanut is Industries</li> <li>Garden By Bharat</li> <li>Mosque by yanti for Great Mosque of Djenne</li> </ul>"},{"location":"Credits/#renaissance-era_1","title":"Renaissance Era","text":"<ul> <li>Museum by zidney</li> <li>Hermitage By Yuri Mamaev</li> <li>The Louvre By roundicons.com</li> <li>Forbidden City By 1516</li> <li>Theatre By b farias</li> <li>Tower of Pisa By Pedro Santos</li> <li>Himeji Castle By Chanut is Industries</li> <li>Windmill By corpus delicti</li> <li>Coffee by SURYANI, ID for Coffee House</li> <li>Taj Mahal By Felipe Alvarado</li> <li>Observatory By Nathan Driskell</li> <li>Opera House By Xinh Studio</li> <li>Chinese traditional tower By 1516 for Porcelain Tower</li> <li>Bank By projecthayat</li> <li>Harbor By Rflor for Seaport</li> <li>Mansion by Freepik for Satrap's Court</li> <li>Bullets By Aldric Rodriguez for Arsenal</li> <li>St. Petersburg By Carpe Diem for Kremlin</li> <li>Ceilidh By P Thanga Vignesh for Ceilidh Hall</li> </ul>"},{"location":"Credits/#industrial-era_1","title":"Industrial Era","text":"<ul> <li>Books By Minh Do for Public School</li> <li>Hospital By Adrien Coquet</li> <li>Stock exchange By Pundimon</li> <li>Military By myiconfinder for Military Academy</li> <li>Factory By icon 54</li> </ul>"},{"location":"Credits/#modern-era_1","title":"Modern Era","text":"<ul> <li>Stadium By Karuna Lalvani</li> <li>Signal Tower By Nociconist for Broadcast Tower</li> <li>Hangar By Rflor for Military Base</li> <li>Eiffel Tower By Felipe Alvarado</li> <li>Statue of Liberty By 1516</li> <li>Microscope By Arafat Uddin for Research Lab</li> <li>Christ the redeemer By Stefan Spieler for Cristo Redentor</li> <li>Neuschwanstein By Vectors Market</li> <li>Big Ben By Ben Davis, RO</li> </ul>"},{"location":"Credits/#atomic-era_1","title":"Atomic Era","text":"<ul> <li>Chemistry By Creative Stall for Medical Lab</li> <li>Pentagon By Maxim Kulikov</li> <li>Solar panel By Modik for Solar Plant</li> <li>Recycle By Umer Younas, PK for Recycling Center</li> <li>Opera House Sydney By Pham Duy Phuong Hung for Sydney Opera House</li> <li>Water dam By Symbolon for Hydro Plant</li> <li>Manhattan Project By corpus delicti, GR</li> <li>Nuclear Plant By Andrejs Kirma</li> <li>Spaceship By Dinosoft Labs for Apollo Program</li> </ul>"},{"location":"Credits/#information-era_1","title":"Information Era","text":"<ul> <li>CN Tower Toronto By mikicon for CN tower</li> <li>War Shelter by Frepik for Bomb Shelter</li> <li>Hubble Telescope By Scott Lewis for Hubble Space Telescope</li> <li>Build By Michael G Brown for Spaceship Factory</li> <li>United Nations by Imam for United Nations</li> </ul>"},{"location":"Credits/#all-eras_1","title":"All Era's","text":"<ul> <li>Illuminati by emilegraphics for the Utopia Project</li> <li>Christian Church by Andrejs Kirma for Monastery</li> <li>cathedral by Pixel Bazaar for Cathedral</li> <li>Mosque by yanti for Mosque</li> <li>Pagoda by Xinh Studio for Pagoda</li> </ul>"},{"location":"Credits/#social-policies","title":"Social Policies","text":""},{"location":"Credits/#tradition","title":"Tradition","text":"<ul> <li>coat of arms By Martina Krasnayova for Oligarchy</li> <li>Apple By EnQiu for Landed Elite</li> <li>Crown By Alexander Skowalsky for Monarchy</li> <li>Pyramid By Creative Stall for Aristocracy</li> <li>Gavel By Rflor for Legalism</li> </ul>"},{"location":"Credits/#liberty","title":"Liberty","text":"<ul> <li>People By Elizabeth Lopez for Citizenship</li> <li>Assembly By No\u00ebl Rasendrason for Republic</li> <li>People By Gregor Cresnar for Meritocracy</li> <li>People By Wilson Joseph for Representation</li> <li>Torch By Hea Poh Lin for Collective Rule</li> </ul>"},{"location":"Credits/#honor","title":"Honor","text":"<ul> <li>Sword By dsathiyaraj for Military Tradition</li> <li>Castle By Gabriele Malaspina for Military Caste</li> <li>Roman Armor By Parkjisun for Professional Army</li> <li>Shield By Kimmi Studio for Discipline</li> <li>Spartan Helmet By Joni Ramadhan for Warrior Code</li> </ul>"},{"location":"Credits/#piety","title":"Piety","text":"<ul> <li>Protestantism By Evgeni Moryakov for Reformation</li> <li>Temple By N.K.Narasimhan for Theocracy</li> <li>Religion By Ben Avery for Free Religion</li> <li>Flame By Ian Shoobridge for Mandate Of Heaven</li> </ul>"},{"location":"Credits/#patronage","title":"Patronage","text":"<ul> <li>Adapted from Gold by Aneeque Ahmed for Philantropy</li> <li>Ornament by Tommy Suhartomo for Aesthetics</li> <li>Book Gift by Wolf B\u00f6se for Scholasticism</li> <li>agreement by RomanP for Cultural Diplomacy</li> <li>professor by Andrew Doane for Educated Elite</li> </ul>"},{"location":"Credits/#commerce","title":"Commerce","text":"<ul> <li>Trade By Gregor Cresnar for Trade Unions</li> <li>Pie Chart By Adrien Coquet for Protectionism</li> <li>Coins By icon 54 for Mercantilism</li> <li>Sextant By lastspark for Naval Tradition</li> <li>captain by taamir468     and Wheel by Andrejs Kirma for Merchant Navy</li> </ul>"},{"location":"Credits/#rationalism","title":"Rationalism","text":"<ul> <li>Science By Three Six Five for Scientific Revolution</li> <li>Graph By Ben Davis for Secularism</li> <li>Logic By Jenya K for Sovereignty</li> <li>Dialogue By ProSymbols for Free Thought</li> <li>Logic By Arthur Shlain for Humanism</li> </ul>"},{"location":"Credits/#freedom","title":"Freedom","text":"<ul> <li>Social Network By Kirby Wu for Civil Society</li> <li>Gender Equality By corpus delicti for Universal Suffrage</li> <li>Feather By Eduardo Souza for Constitution</li> <li>Voting By Nikita Kozin for Democracy</li> <li>Mic By Aybige for Free Speech</li> </ul>"},{"location":"Credits/#autocracy","title":"Autocracy","text":"<ul> <li>War By Abdul Karim for Total War</li> <li>Military Grade By Ben Davis for Militarism</li> <li>Military Medal By iconsphere for Fascism</li> <li>Newspaper By Trishul for Populism</li> <li>Riot Police By Dan Hetteix for Police State</li> </ul>"},{"location":"Credits/#order","title":"Order","text":"<ul> <li>Adapted from Plan by Cattaleeya Thongsriphong for Planned Economy</li> <li>Flag by Muhammad Tajudin for Nationalism</li> <li>Communism By Valerio Poltrini for Socialism</li> <li>Hammer and Sickle by Dmitry Baranovskiy for Communism</li> <li>United by Izwar Muis for United Front</li> </ul>"},{"location":"Credits/#technologies","title":"Technologies","text":"<ul> <li>Lightbulb by Davo Sime for fallback image</li> </ul>"},{"location":"Credits/#ancient","title":"Ancient","text":"<ul> <li>Agriculture By OCHA Visual Information Unit</li> <li>Jug By Vladimir Belochkin for Pottery</li> <li>Archery By icon 54</li> <li>Mining By art shop</li> <li>Sailing By Daniela Baptista</li> <li>Sundial By Bonegolem for Calendar</li> <li>Cuneiform By Michael Wohlwend for Writing</li> <li>Trap By Sergey Demushkin for Trapping</li> <li>innovative By Matt Brooks for The Wheel</li> <li>Bricks By Vaibhav Radhakrishnan for Construction</li> <li>Mallet By Ben Avery for Bronze Working</li> </ul>"},{"location":"Credits/#classical","title":"Classical","text":"<ul> <li>Telescope for Optics</li> <li>Horse Riding By Hea Poh Lin for Horseback Riding</li> <li>Abacus By Yo! Baba for Mathematics</li> <li>Arch By Andrejs Kirma for Construction</li> <li>Brain By Tony Gines for Philosophy</li> <li>Coins By Adrien Coquet for Currency</li> <li>Engineering Blueprint By Sachin Modgekar for Engineering</li> <li>Metalworking By Symbolon for Iron Working</li> </ul>"},{"location":"Credits/#medieval","title":"Medieval","text":"<ul> <li>Judaism By Ben Davis for Theology</li> <li>Institution By Luis Prado for Civil Service</li> <li>Compass By Bernar Novalyi</li> <li>Education By Tomas Knopp</li> <li>Casting By Jasmine Rae Friedrich</li> <li>Bar association By Miroslav Kurdov for Guilds</li> <li>Knight By Robert Bjurshagen for Chivalry</li> <li>Camel By Orin Zuu for Camel Archer</li> <li>Machinery By Greenhill</li> <li>Lever By Jakob Ukrop for Physics</li> <li>Sword By Jonathan P Lambert for Steel</li> </ul>"},{"location":"Credits/#renaissance","title":"Renaissance","text":"<ul> <li>Telescope By ProSymbols for Astronomy</li> <li>Sound waves By Makarenko Andrey for Acoustics</li> <li>Banking By Delwar Hossein</li> <li>Printing Press By Mike Wirth</li> <li>Flintlock By Madison Apple for Gunpowder</li> <li>Fossil By Raf Verbraeken for Archaeology</li> <li>Sextant By lastspark for Navigation</li> <li>Architecture By Andrew Doane</li> <li>Money Growth By DesignNex for Economics</li> <li>Metal Block By Creaticca Creative Agency for Metallurgy</li> <li>Chemistry By Creative Stall</li> </ul>"},{"location":"Credits/#industrial","title":"Industrial","text":"<ul> <li>Science By Dinosoft Labs for Scientific Theory</li> <li>Factory By Lil Squid for Industrialization</li> <li>Rifle By Alexander Skowalsky for Rifling</li> <li>Grenade By Dama Adhikara for Military Science</li> <li>Fertilizer By Jae Deasigner</li> <li>Bacteria By Maxim Kulikov for Biology</li> <li>Electricity By Ben Davis</li> <li>Turbines By Leonardo Schneider for Steam Power</li> <li>Dynamite By Simon Martin</li> </ul>"},{"location":"Credits/#modern","title":"Modern","text":"<ul> <li>Gears By Aiden Icons for Replaceable Parts</li> <li>Radio By Arthur Shlain</li> <li>Piston By Proletkult Graphik for Combustion</li> <li>Plastic By Yu luck</li> <li>Microphone By Viktor Vorobyev for Mass Media</li> <li>Flight By Genius Icons</li> <li>Train By Federico Panzano for Railroad</li> <li>Fridge By b farias for Refrigeration</li> <li>telegraph by Luke Anthony Firth for Telegraph*</li> </ul>"},{"location":"Credits/#atomic","title":"Atomic","text":"<ul> <li>Pill By Alex Arseneau for Pharmaceuticals</li> <li>Satellite Dish By Vectors Market for Radar</li> <li>Ecology By ProSymbols</li> <li>Nuclear Reactor By Jeremie Sommet for Nuclear Fission</li> <li>Rocket By kareemov for Rocketry</li> <li>Computer By Shastry for Computers</li> </ul>"},{"location":"Credits/#information","title":"Information","text":"<ul> <li>telecommunications by Wichai Wi for Telcommunications</li> <li>Tactics By Grafix Point for Mobile Tactics</li> <li>Rocket Kusdarti for Advanced Ballistics</li> <li>Satellite By Ben Davis for Satellites</li> <li>Robotic Arm By Karl Gilbert for Robotics</li> <li>Laser by Andrew Doane for Lasers</li> <li>global by Rank Sol for Globilization</li> <li>Atom By Kelsey Armstrong for Particle Physics</li> <li>Nanoparticles By Gyan Lakhwani for Nanotechnology</li> <li>Thermonuclear fusion by Olena Panasovska, UA for Nuclear Fusion</li> <li>Electronics By Cuby Design</li> <li>Radar By CINDYFLA, ID for Stealth</li> </ul>"},{"location":"Credits/#future","title":"Future","text":"<ul> <li>Information Technology By Vectors Markeet for Future Tech</li> </ul>"},{"location":"Credits/#terrain","title":"Terrain","text":"<ul> <li>Hills By Juraj Sedl\u00e1k</li> <li>Mountains By icon 54</li> <li>Forest by Milinda Courey for Jungle</li> <li>Forest By Lance B</li> <li>Palm Tree By Tatiana for Oasis</li> <li>Water By Kozan for Marsh</li> <li>Harvest By Made for Flood plains</li> <li>Puddle By Bakunetsu Kaito for Lakes</li> <li>Island By Chanut is Industries for Atoll</li> <li>Iceberg By Jaime Carrion for Ice</li> </ul>"},{"location":"Credits/#nations","title":"Nations","text":"<ul> <li>Eye of Horus By Lilit Kalachyan for Egypt</li> <li>Russia By Eugen Belyakoff</li> <li>Dragon Head By Ravignir for China</li> <li>Lion By parkjisun for Babylon</li> <li>Omega By icon 54 for Greece</li> <li>Shield By Nathan Driskell for America</li> <li>Fleaur de Lis By Jessika Gadoury for France</li> <li>Crown By Peter van Driel for England</li> <li>Wreath by VectorBakery or Roman</li> <li>Iron Cross By Souvik Maity for Germany</li> <li>Star and Crecent for Arabia</li> <li>Family Crest Komon by sahua d for Japan</li> <li>Ashika Chakra by sahua d for India</li> <li>Variation on crescent moon by Estu Suhartono for The Ottomans</li> <li>Korea by CJS for Korea</li> <li>Two Sword Scimitars by Those Icons for Persia</li> <li>Swirl by IronSV for Polynesia</li> <li>Dharmachakra by Parkjisun for Siam</li> <li>Inca by Ravignir for Inca</li> <li>Sun symbol black by Eddo for The Huns</li> <li>Lion by Nikki Rodriguez for The Netherlands</li> <li>Three Crowns by Daniel Falk for Sweden</li> <li>Flag of Austria by Olena Panasovska, UA for Austria. The original work has been modified.</li> <li>Elephant by Hea Poh Lin for Carthage. The original work has been modified.</li> <li>Orthodox Cross by Avana Vana for Byzantium</li> <li>Iroquois by Ravignir for Iroquois</li> <li>Songhai by Ravignir for Songhai</li> <li>Celtic Knot by Ervin Bolat for the Celts</li> <li>Ethiopian Icon created in Gimp by Unciv team from the following:<ul> <li>Lion by IronSV</li> <li>royal crown by Vectors Market</li> <li>Spear by Firza Alamsyah</li> <li>pennant by Sara Jeffries</li> </ul> </li> <li>Maya civilization by Olena Panasovska for The Maya</li> <li>Aztec icon by K\u0101ne, on Unciv Discord server</li> <li>Questionmark by YURR.studio for Random nation indicator</li> <li>View by Adrien Coquet for Spectator</li> </ul>"},{"location":"Credits/#promotions","title":"Promotions","text":"<ul> <li>Sight By Jejen Juliansyah Nur Agung for Scouting</li> <li>skill bow rain arrow by Maxicons for Barrage</li> <li>Bomb By Angelo Troiano for Bombardment</li> <li>Private E2 By Yeong Rong Kim for Shock</li> <li>Private First Class By Yeong Rong Kim for Drill</li> <li>Medic By Yohann Berger for Medic</li> <li>City By iconcheese for Siege</li> <li>Skull and Crossbones By Anton Outkine for Coastal Raider</li> <li>Spear By Deemak Daksina for Formation</li> <li>Wall By Graphic Tigers for Volley</li> <li>Lightning By Mooms for Blitz</li> <li>Move By Sandra for Mobility</li> <li>accuracy By vigtographics for Targeting</li> <li>location by Humantech for Accuracy</li> <li>Plane By Tran Minh Villageois for Interception / Domain Air</li> <li>Hammer by Thengakola for Air Repair</li> <li>Hook By Yeong Rong Kim for Boarding Party</li> <li>Leaf By Paul Verhulst for Indirect Fire</li> <li>Move By Muneer A.Safiah for Logistics</li> <li>Evasion By Anna Sophie for Evasion</li> <li>Interrupt by Stephen Plaster for Ambush</li> <li>Submarine by Lloyd Humphreys for Wolfpack</li> <li>Axe by Brian Oppenlander for Woodsman</li> <li>Competition by luca fruzza</li> <li>Icon for Flight Deck is made by JackRainy</li> <li>Icon for Armor Plating is made by JackRainy</li> <li>Slingshot by James Keuning for Slinger Withdraw</li> <li>Anchor by Gregor Cresnar for Amphibious / Domain Water</li> <li>survival knife by b faris for Survivalism</li> <li>Shamrock By P Thanga Vignesh for Pictish Courage</li> <li>home sweet home By Silviu Ojog for Home Sweet Home</li> <li>Star by Trent Kuhn for Dogfighting</li> </ul>"},{"location":"Credits/#religions","title":"Religions","text":"<ul> <li>Lightning Bolt by sian huxtable for Pantheon</li> <li>Christianity by Public Domain Nouns for Christianity</li> <li>Islam by Muhammed Riza for Islam</li> <li>taoism by parkjisun for Taosim</li> <li>Buddhism by Julio Yanes for Buddhism</li> <li>Hinduism by Mugda Damle for Hinduism</li> <li>Confucianism by Dabid J. Pascual for Confucianism</li> <li>Judaism by Dabid J. Pascual for Judaism</li> <li>Shinto by Dabid J. Pascual for Shinto</li> <li>Sikhism by Dabid J. Pascual for Sikhism</li> <li>Tengrism by Dabid J. Pascual for Tengriism</li> <li>Zoroastrianism by Dabid J. Pascual for Zoroastrianism</li> <li>praying by parkjisun for Religion (Civilopedia concept entry)</li> <li>praying by Gan Khoon Lay for Follower</li> <li>Hero by Andrew J. Young for Founder</li> <li>yell by Adrien Coquet for Enhancer</li> </ul>"},{"location":"Credits/#others","title":"Others","text":"<ul> <li>Circle By Aybige</li> <li>Arrow By Joe Mortell for movement</li> <li>Swap By iconomania for swapping units</li> <li>Connection By Travis Avery</li> <li>Skull By Vladimir Belochkin for disbanding units</li> <li>Crosshair By Bakunetsu Kaito for selecting enemies to attack</li> <li>City By Felix Westphal</li> <li>Fire By Lloyd Humphreys for \"city being razed\" icon</li> <li>Sleep By Saeful Muslim</li> <li>Clockwise By Universal Icons (Louis Dawson) for \"Wait\" icon. The original work has been slightly modified.</li> <li>Banner By Emir Palavan for embarked units</li> <li>Arrow By uzeir syarief for moving between idle units, expanders, etc.</li> <li>Replace By Mike Rowe for switching tiles between cities</li> <li>Resistance By HeadsOfBirds</li> <li>Viking Hat By my name is mud for pillaging improvements</li> <li>Aim By Kaviashri for ranged strength</li> <li>Capitol By Loren Klein for City-States</li> <li>Aircraft By Tom Fricker for aircraft icon in city button</li> <li>radar scan By icon 54 for Range</li> <li>short range radar by Vectors Point for Intercept range</li> <li>Puppet by vegeta1k95 based on Puppet by Ben Davis, for puppeted cities</li> <li>City By Muhajir ila Robbi in the Icon center</li> <li>Lock by Vadim Solomakhin for locked tiles</li> <li>Hourglass by I Create Stuff for the 'Turn' icon</li> <li>Shield by Gregor Cresnar for Religious Strength</li> <li>skill sword flame by Maxicons) for Remove Heresy</li> <li>Pencil by Muhamad Aldi Maulana for Enter Text Prompt Button / Pencil</li> <li>Parchment by hans draiman for Cultured City-States</li> <li>connection by Popular for Mercantile City-States</li> <li>crossed sword by ProSymbols for Militaristic City-States</li> <li>ship helm by Vectors Market for Maritime City-States</li> <li>Magnifying Glass by John Caserta for Mod filter</li> <li>tick by Adrien Coquet on Nation picker</li> <li>people by Wilson Joseph as base for Civilopedia category Nations</li> <li>Mountains  by Andrew J. Young as base for Civilopedia category Terrains / Domain Land</li> <li>Civilopedia category UnitTypes icon done by SomeTroglodyte from sources cited for Interception, Cavalry and Longbowman</li> <li>File:Maya.svg for Mayan numerals</li> <li>East side of stela C, Quirigua for Mayan calendar symbols</li> <li>Footprints by Abdul Wahhab for movement overlay toggle, slightly modified. Currently unused.</li> <li>Arrows.svg by Intralexical (@will-ca), CC0.</li> <li>favor by MICHAEL G BROWN for WLTK marker on City Overview</li> <li>WLTKD by vegeta1k95 based on favor by MICHAEL G BROWN for WLTKD status icon</li> <li>Party by Adrien Coquet for WLTK header on City Overview</li> <li>Party by Lars Meiertoberens as additional WLKT decoration</li> <li>spy by Vectorstall for Spy</li> <li>turn right by Alice Design for Resource Overview</li> <li>Tyrannosaurus Rex by Amethyst Studio for Civilopedia Eras header</li> <li>Realistic easter day eggs with curvy lines and dots by freepik</li> <li>Eggs Easter Scrapbook by Claudette Gallant</li> <li>Pumpkin vector by freepik</li> <li>Lollipop vector by macrovector</li> <li>Part of Christmas symbols vector by vikayatskina</li> <li>Part of Christmas tree 3d vector rawpixel.com</li> <li>Present card vector by katemangostar</li> <li>Ribbon box vector by nikapeshkov</li> <li>Funny christmas vector by katemangostar</li> <li>Santa beard vector by katemangostar</li> <li>Funny christmas vector by katemangostar</li> <li>AirSweep by Creative Stall for Air Sweep icon</li> <li>Timer created by Gregor Cresnar Premium - Flaticon</li> <li>Political Science created by Hilmy Abiyyu A. - Flaticon</li> <li>Question created by Aneeque Ahmed for Question Icon</li> <li>Trade created by Smashicons for Conduct Trade Mission</li> <li>Nothing created by Freepik for Nothing construction process</li> <li>Icon for Unique created by vegeta1k95</li> <li>[Transform] created by letstalkaboutdune</li> <li>Swords created by Muhajir ila Robbi for Blockaded tile marker</li> <li>Keyboard by Twenty Foo Studio for Options Keys</li> <li>charts by Srinivas Agra (gimped to appear bolder) for the Charts page</li> </ul>"},{"location":"Credits/#main-menu","title":"Main menu","text":"<ul> <li>Lightning by Rohith M S for Quickstart</li> <li>Loading by Universal Icons for Load Game</li> <li>New by Alice Design for New Game</li> <li>Go back by Salvia Santos for Resume</li> <li>Multiplayer by Roy Charles</li> <li>Options By Thengakola</li> <li>Package by shashank singh</li> </ul>"},{"location":"Credits/#sound-credits","title":"Sound credits","text":"<p>Sounds are from FreeSound.org unless otherwise noted and are either Creative Commons or Public Domain unless otherwise noted</p> <ul> <li>Soft two-fingered snap By EathanMarkson as 'click' for most clicks</li> <li>Pencil1 By stijn as 'paper' for opening and closing the tech picker</li> <li>SawInOut01 By kingof_thelab for construction picking?</li> <li>Chain Snare #1 By lovesbody as 'fortify'</li> <li>Level up By Marregheriti as 'upgrade' for upgrading units</li> <li>levelup By Seidhepriest as 'chimes' for special actions (free tech, build city, hurry wonder etc.)</li> <li>Coin By TheDJoe93 as 'coin' for purchasing tiles and constructions</li> <li>fast simple chop 1 By dave.dev as 'whoosh' for moving units around, also in edited form to produce the 'swap units' sound.</li> <li>Military kick By Dodgy C as 'promote' for unit promotions</li> <li>Tank reload By KieranKeegan as 'setup' for siege unit setup</li> <li>Scribble_short By waldram as 'policy' for adopting policies</li> <li>Hit Impact by Mrguff as 'throw' for catapult &amp; trebuchet attacks</li> <li>Arrow Impact by Twisted Euphoria on Pixabay as 'arrow' for arrow attacks (Pixabay License)</li> <li>Crossbow Firing by GameWithBepis on Pixabay as 'crossbow' for crossbow attacks (Pixabay License)</li> <li>Metal hit slide by orginaljun as 'nonmetalhit' for pre-metal melee sounds</li> <li>wpn 1 generic By SlavicMagic on Pixabay as 'metalhit' for metal melee sounds (Pixabay License)</li> <li>Horse's whinny By Kubuzz as 'horse' for cavalry attack sounds</li> <li>machine gun 001 - loop By pgi as 'machinegun' for machine gun attack sound</li> <li>uzzi_full_single By Deganoth as 'shot' for bullet attacks</li> <li>Grenade Launcher 2 By Daniel Simon as city bombard sound (CC Attribution 3.0 license)</li> <li>Woosh by Mark DiAngelo as 'slider' sound (CC Attribution 3.0 license)</li> <li>Tornado-Siren-II by Delilah as part of 'nuke' sound (CC Attribution 3.0 license)</li> <li>Explosion-Ultra-Bass by Mark DiAngelo as part of 'nuke' sound (CC Attribution 3.0 license)</li> <li>Short Choir by Breviceps as 'choir' for free great person pick</li> <li>Death Robot! Robotic scream by vultraz168 for Giant Death Robot Attack (CC0 1.0 Universal license)</li> <li>ceremonial cannon fire by DylanSmithSound for cannon</li> <li>artillery fire by Tomashevsky for artillery</li> <li>20mm cannons by Piotr123 for ship guns</li> <li>\"bombing\" is made by the Unciv team using Audacity from<ul> <li>lancaster bomber by confusion_music - aircraft</li> <li>Artillery Explosion (Close) (Mixed) by EFlexMusic - impact</li> <li>SFX Hit drop/bomb effect 5 by old_waveplay - bass</li> </ul> </li> <li>\"jetgun\" for Jet Fighter attack is made by the Unciv team using Audacity from<ul> <li>Fighter Jet Aircraft Fly by (synthesised) by Headphaze</li> <li>Machine Gun 001 - triple shot by pgi</li> </ul> </li> <li>Excerpt from Tanks Shooting by qubodup for tankshot</li> <li>\"torpedo\" is made by the Unciv team using Audacity from<ul> <li>Torpedo launch underwater by jobro</li> <li>Artillery Explosion (Close) (Mixed) by EFlexMusic</li> </ul> </li> <li>elephant 44 by y89312 for Naruesan's Elephant sound</li> <li>Excerpt from Missile Strike by BaDoink for guided missile</li> <li>Excerpt from FireBurning_v2.wav by pcaeldries for 'remove heresy' action of inquisitor (License)</li> <li>Up Chime 2 by FoolBoyMedia for notifications</li> <li>dingaling by morrisjm (based on Calling_Bell_02.wav by RSilveira_88) for notifications</li> <li>City ambience sounds made by Unciv Team using Audacity from CC0 sounds and<ul> <li>Street Musician Playing Renaissance Melody on Glockenspiel by MC5 for Renaissance city sound</li> <li>Ambience, Machine Factory by InspectorJ for Industrial city sound</li> <li>Rock_Hammer_Chisel_01 by dheming for Ancient city sound</li> <li>Future City ambience by bolkmar for Future city sound</li> <li>Jingle_Achievement by LittleRobotSoundFactory for We Love The King sound</li> </ul> </li> </ul>"},{"location":"Credits/#music","title":"Music","text":"<p>The following music is from https://filmmusic.io \"Thatched Villagers\" by Kevin MacLeod (https://incompetech.com)</p>"},{"location":"Credits/#trailer-audio","title":"Trailer audio","text":"<p>The following audio is from https://pixabay.com/ Pixabay License -   Beyond New Horizons - Free Epic Viking Medieval Soundtrack by GioeleFazzeri for background music -   Beep 6 by Eponn for beep in Cross-Platform Play section -   Cinematic Boom by Rizzard for final boom -   Cymbal Swell 2 by rubberduckie for cymbal swells -   hit of orchestral cymbals and bass drum by Selector for intro crash</p>"},{"location":"Privacy-Policy/","title":"Privacy Policy","text":""},{"location":"Privacy-Policy/#we-dont-store-personal-information","title":"We don't store personal information","text":"<p>At all, in any way.</p>"},{"location":"Privacy-Policy/#we-do-store-your-multiplayer-games-on-dropbox","title":"We do store your Multiplayer games on Dropbox","text":"<p>IF you want to use an alternative server backend, you can set your server URL in the Options menu</p>"},{"location":"Developers/Building-Locally/","title":"Building Locally","text":"<p>This is a guide to editing, building, running and deploying Unciv from code</p> <p>So first things first - the initial \"No assumptions\" setup to have Unciv run from-code on your computer!</p>"},{"location":"Developers/Building-Locally/#with-android-studio","title":"With Android Studio","text":"<ul> <li>Install Android Studio - it's free and awesome! Be aware that it's a long download!</li> <li>Install Git, it's the way for us to work together on this project. UI is optional, Android Studio has good Git tools built in :)</li> <li>Getting the code<ul> <li>Create a Github account, if you don't already have one</li> <li>Fork the repo (click the \"Fork\" button on the top-right corner of https://github.com/yairm210/Unciv) - this will create a \"copy\" of the code on your account, at https://github.com/YourUsername/Unciv</li> <li>Clone your fork with git - the location will be https://github.com/YourUsername/Unciv.git, visible from the green \"Clone or download\" button at https://github.com/YourUsername/Unciv</li> </ul> </li> <li>Load the project in Android Studio, Gradle will attempt the initial sync. If this is your first time with Android Studio, this may require you to accept the Android Build-tools licenses, which works differently on every device, so search for your OS-specific solution.<ul> <li>A new install may not be able to do the initial sync - this comes in the form of <code>Unable to find method ''void org.apache.commons.compress.archivers.zip.ZipFile.&lt;init&gt;(java.nio.channels.SeekableByteChannel)''</code> errors when you try to sync. If you have this problem go into File &gt; Settings &gt; Appearance &amp; Behavior &gt; System Settings &gt; Android SDK<ul> <li>Click \"SDK Platforms\"</li> <li>Click \"Android 12L (Sv2)\" </li> <li>Click \"SDK Tools\"</li> <li>Select \"Show Package Details\" in the bottom right</li> <li>Choose version 32.0.0 under \"Android SDK Build-Tools\" </li> <li>Click \"Apply\"</li> <li>Restart Android Studio</li> </ul> </li> </ul> </li> <li>In Android Studio, Run &gt; Edit configurations (be sure the Gradle sync is finished successfully first).<ul> <li>Click \"+\" to add a new configuration</li> <li>Choose \"Application\"</li> <li>Give the configuration a name, we recommend \"Desktop\"</li> <li>Set the module classpath (the box to the right of the Java selection) to <code>Unciv.desktop.main</code> (<code>Unciv.desktop</code> for Bumblebee or below), main class to <code>com.unciv.app.desktop.DesktopLauncher</code> and <code>&lt;repo_folder&gt;\\android\\assets\\</code> as the Working directory, OK to close the window<ul> <li>It may be useful to set some VM options - activate the field in the run config editor with Alt-V or via the Modify Options menu, then add <code>-Xmx4096m -Xms256m -XX:MaxMetaspaceSize=256m</code> to allow a debugged game a little more memory. Or, use the <code>-DnoLog=</code> or <code>-DonlyLog=</code> options to control console logging. See the Log.kt comments for details.</li> <li>If you get a <code>../../docs/uniques.md (No such file or directory)</code> error that means you forgot to set the working directory! </li> </ul> </li> </ul> </li> <li>Select the Desktop configuration (or however you chose to name it) and click the green arrow button to run! Or you can use the next button -the green critter with six legs and two feelers - to start debugging.</li> <li>A few Android Studio settings that are recommended:<ul> <li>Going to Settings &gt; Version Control &gt; Commit and turning off 'Before Commit - Analyze code'</li> <li>Settings &gt; Editor &gt; Code Style &gt; Kotlin &gt; Tabs and Indents &gt; Continuation Indent: 4 </li> <li>Settings &gt; Editor &gt; General &gt; On Save &gt; Uncheck Remove trailing spaces on: [...] to prevent it from removing necessary trailing whitespace in template.properties for translation files </li> <li>Right-click the <code>android/assets/SaveFiles</code> folder, \"Mark directory as\" &gt; Excluded</li> <li>If you download mods do the same for the <code>android/assets/mods</code> folder and any other files you may create while testing that do not belong in the public project.</li> <li>This disables indexing for performance.</li> </ul> </li> </ul> <p>Unciv uses Gradle to specify dependencies and how to run. In the background, the Gradle gnomes will be off fetching the packages (a one-time effort) and, once that's done, will build the project!</p> <p>Unciv uses Gradle 7.5 and the Android Gradle Plugin 7.3.1. Can check in File &gt; Project Structure &gt; Project</p> <p>Note advanced build commands as described in the next paragraph, specifically the <code>gradlew desktop:dist</code> one to build a jar, run just fine in Android Studio's terminal (Alt+F12), with most dependencies already taken care of.</p>"},{"location":"Developers/Building-Locally/#without-android-studio","title":"Without Android Studio","text":"<p>If you also have JDK 11 installed, you can compile Unciv on your own by cloning (or downloading and unzipping) the project, opening a terminal in the Unciv folder and run the following commands:</p>"},{"location":"Developers/Building-Locally/#windows","title":"Windows","text":"<ul> <li>Running: <code>gradlew desktop:run</code></li> <li>Building: <code>gradlew desktop:dist</code></li> </ul>"},{"location":"Developers/Building-Locally/#linuxmac-os","title":"Linux/Mac OS","text":"<ul> <li>Running: <code>./gradlew desktop:run</code></li> <li>Building: <code>./gradlew desktop:dist</code></li> </ul> <p>If the terminal returns <code>Permission denied</code> or <code>Command not found</code> on Mac/Linux, run <code>chmod +x ./gradlew</code> first. This is a one-time procedure.</p> <p>If you get an error that Android SDK folder wasn't found, firstly install it by doing in terminal:</p> <p><code>sudo apt update &amp;&amp; sudo apt install android-sdk</code> (Debian, Ubuntu, Mint etc.)</p> <p>After that you should put its folder to the file <code>local.properties</code> by adding this line:</p> <p><code>sdk.dir = /path/to/android/sdk</code> which can be <code>/usr/lib/android-sdk</code> or something other.</p> <p>If during the first launch it throws an error that the JDK version is wrong try to install JDK from here.</p> <p>Gradle may take up to several minutes to download files. Be patient. After building, the output .JAR file should be in /desktop/build/libs/Unciv.jar</p> <p>For actual development, you'll probably need to download Android Studio and build it yourself - see Contributing :)</p>"},{"location":"Developers/Building-Locally/#uncivserver","title":"UncivServer","text":"<p>The simple multiplayer host included in the sources can be set up to debug or run analogously to the main game: -   In Android Studio, Run &gt; Edit configurations.     -   Click \"+\" to add a new configuration     -   Choose \"Application\" and name the config, e.g. \"UncivServer\"     -   Set the module to <code>Unciv.server.main</code> (<code>Unciv.server</code> for Studio versions Bumblebee or below), main class to <code>com.unciv.app.server.UncivServer</code> and <code>&lt;repo_folder&gt;/android/assets/</code> as the Working directory, OK to close the window. -   Select the UncivServer configuration and click the green arrow button to run! Or start a debug session as above.</p> <p>To build a jar file, refer to Without Android Studio and replace 'desktop' with 'server'. That is, run <code>./gradlew server:dist</code> and when it's done look for /server/build/libs/UncivServer.jar</p>"},{"location":"Developers/Building-Locally/#unit-tests","title":"Unit Tests","text":"<p>You can (and in some cases should) run and even debug the unit tests locally. -   In Android Studio, Run &gt; Edit configurations.     -   Click \"+\" to add a new configuration     -   Choose \"Gradle\" and name the config, e.g. \"Unit Tests\"     -   Under \"Gradle Project\", choose \"Unciv\" from the dropdown (or type it), set \"Tasks\" to <code>:tests:test</code> and \"Arguments\" to <code>--tests \"com.unciv.*\"</code>, OK to close the window. -   Select the \"Unit Tests\" configuration and click the green arrow button to run! Or start a debug session as above.</p>"},{"location":"Developers/Building-Locally/#code-smells","title":"Code Smells","text":"<p>You can run <code>detekt</code> to check for code smells and other linting issues. To do so download detekt-cli (the zip file) and unzip it. Then to generate the reports go to the Unciv top directory and run one of the following commands to generate the report. NOTE: If you're using windows, replace <code>detekt-cli</code> with <code>detekt-cli.bat</code>. - For detecting warnings: <code>PATH/TO/DETEKT/detekt-cli --parallel --report html:detekt/reports.html --config detekt/config/detekt-warnings.yml</code> - For detecting errors: <code>PATH/TO/DETEKT/detekt-cli --parallel --report html:detekt/reports.html --config detekt/config/detekt-errors.yml</code></p> <p>Then you can find the report in detekt/reports.html</p>"},{"location":"Developers/Building-Locally/#next-steps","title":"Next steps","text":"<p>Congratulations! Unciv should now be running on your computer! Now we can start changing some code, and later we'll see how your changes make it into the main repository!</p> <p>Now would be a good time to get to know the project in general at the Project Structure overview!</p>"},{"location":"Developers/Coding-standards/","title":"Coding standards","text":"<p>As an open-source project, there will be a lot of eyes on our code.</p> <p>The main purpose of having a coding standard is for the code to be as immediately readable as possible to as many potential contributors, and hence most of it focuses on defaulting to coding structures that exist in other similar languages (Java, C#) when possible.</p>"},{"location":"Developers/Coding-standards/#dont-use-let-and","title":"Don't use <code>.let{}</code> and <code>?:</code>","text":"<p>Kotlin is made greater for being strict with nullability. Don't let this fact confuse people new to it. These can be simply replaced by <code>if(x!=null)</code> which is much more readable. They all probably compile to the same bytecode anyway, so when in doubt - readability.</p>"},{"location":"Developers/Coding-standards/#foritem-in-list-and-not-listforeach","title":"<code>for(item in list)</code> and not <code>list.forEach{}</code>","text":"<p>For loops go waaaay back, forEach doesn't. As an added bonus, I'm pretty sure that because forEach accepts a function parameter, then when debugging it won't automatically step into these lines, unlike for.</p>"},{"location":"Developers/Coding-standards/#avoid-premature-abstraction","title":"Avoid premature abstraction","text":"<p>There's no need to create an interface if there is only one implementation of that interface. Doing so obfuscates the actual code that's running and increases the Time To Relevant Code. If abstraction becomes necessary later, we can always do it later.</p>"},{"location":"Developers/From-code-to-deployment/","title":"From code to deployment","text":"<p>So, your code works! You've solved all the bugs and now you just need to get it out to everyone!</p> <p>So, how does THAT work?</p> <p>The process has two major parts, one is \"Getting your code in the main repository\" and the other is \"Deploying versions\" - as a developer, you'll be taking an active part in the first process, but the second process is on me =)</p>"},{"location":"Developers/From-code-to-deployment/#getting-your-code-in-the-main-repo","title":"Getting your code in the main repo","text":"<ul> <li>First off, push your changes with Git to your own branch at https://github.com/YourUsername/Unciv.git. I hope you've been doing this during development too, but that's none of my business *sips tea*</li> <li>Issue a pull request from https://github.com/YourUsername/Unciv - from the Pull Requests is the simplest</li> <li>The Travis build will check that your proposed change builds properly and passes all tests</li> <li>I'll go over your pull request and will ask questions and request changes - this is not only for code quality and standard, it's mostly so you can learn how the repo works for the next change you make =)</li> <li>When everything looks good, I'll merge your code in and it'll enter the next release!</li> </ul>"},{"location":"Developers/From-code-to-deployment/#deploying-versions","title":"Deploying versions","text":"<p>When I'm ready to release a new version I:</p> <ul> <li>Comment \"prepare version\" in one of the open PRs tagged as 'mergeable translation' to trigger the translation branch creation.</li> <li>This also bumps the versions in the buildConfig.kt file, and generates a starting version summary in changelog.md.</li> <li>Merge the PR and delete the branch (so next version branch starts fresh)</li> <li>From my workstation - pull the latest changes and run the translation generation</li> <li>Edits to the autogenerated version notes in changelog.md to make them less than 500 chars (needed for Google Play) and more user-readable</li> <li>Add a tag to the commit of the version. When the Github action sees that we've added a tag, it will run a build, and this time (because of the configuration we put in the yml file file), it will:<ul> <li>Pack a .jar file, which will work for every operating system with Java</li> <li>Use Linux and Windows JDKs to create standalone zips for 32 and 64 bit systems, because we can't rely on the fact that users will have a JRE</li> <li>Download Butler and use it to push the new versions to the itch.io page</li> <li>Read the changelog.md file to get the changes for the latest version</li> <li>Upload all of these files to a new release on Github, with the release notes, which will get added to the Releases page</li> <li>Send an announcement on the Discord server of the version release and release notes via webhook</li> <li>Pack, Sign, and Upload a new APK to the Google Play Console at 10% rollout</li> </ul> </li> <li>The F-Droid bot checks periodically if we added a new tag. When it recognizes that we did, it will update the yaml file here<ul> <li>When the bot next runs and sees that there's a version it doesn't have a release for, it will attempt to build the new release. The log of the build will be added here (search for Unciv, there's a log link like this: <code>https://monitor.f-droid.org/builds/log/com.unciv.app/&lt;appCodeNumber&gt;</code>), and the new release will eventually be available here</li> </ul> </li> </ul>"},{"location":"Developers/From-code-to-deployment/#about-google-play-publishing","title":"About Google Play publishing","text":"<p>We start at a 10% rollout, after a day with no major problems go to 30%, and after another day to 100%. If you were counting that means that most players will get the new version after 2+ days.</p> <p>If there were problems, we halt the current rollout, fix the problems, and release a patch version, which starts at 10% again.</p> <p>Dear future me - the automation was extremely annoying guesswork to set up, so the facts you need to know are:</p> <ul> <li>There is a user at the Google Cloud Platform Account Manager called Unciv_Upload_Account. There is an access key to this account, in json, stored as the Github secret GOOGLE_PLAY_SERVICE_ACCOUNT_JSON.</li> <li>This user was granted ADMIN permissions to the Google Play (after much trial and error since nothing else seemed to work) under User &gt; Users and Permissions. Under Manage &gt; Account permissions, you can see that it has Admin.</li> </ul>"},{"location":"Developers/From-code-to-deployment/#updating-the-wiki","title":"Updating the wiki","text":"<p>Pages for the Unciv Github Wiki are kept in the main repository under docs.</p> <p>The process to edit the wiki is as follows:</p> <ol> <li>Open a pull request in the main Unciv repository that changes files under docs.</li> <li>Once the pull request is merged, an account with commit privileges on the Unciv repository leaves a comment saying \"<code>update wiki</code>\".</li> <li>This comment triggers a bot to copy all the wiki files from the main repository into the Github wiki, with a link back to the PR in its commit message for credit.</li> </ol> <p>Doing things this way has several distinct advantages over using the Github Wiki web interface directly:</p> <ul> <li>Changes can be proposed via PR and proofread or fact-checked.</li> <li>A proper MarkDown editor or IDE can be used to write the wiki, bringing faster editing, clickable links while editing, better live HTML preview, and automatic detection of problems like broken links.</li> <li>The wiki files can also be browsed at https://github.com/yairm210/Unciv/tree/master/docs/wiki.</li> <li>Auto-generated documentation made by the build process can be placed directly in the wiki.</li> </ul> <p>However, it also imposes a couple of conventions about how links should best be formatted:</p> Link type Format Example Inter-wiki Should begin with \"./\", and include \".md\". <code>./Mods.md#other</code> Code or asset file Should begin with \"https://github.com/yairm210/Unciv/blob/master/\", and be relative to the project root. <code>https://github.com/yairm210/Unciv/blob/master/android/assets/game.png</code> <p>These formats will allow IDEs like Android studio to resolve these links and check for broken links, while also working on the Github code browser.</p> <p>The bot that updates the wiki from the main repository automatically translates them into formats that are compatible with Github Wikis, which have somewhat non-standard requirements.</p>"},{"location":"Developers/Game-Making-Tips/","title":"Game Making Tips","text":""},{"location":"Developers/Game-Making-Tips/#tips-and-tricks-for-making-a-libgdx-game","title":"Tips and tricks for making a LibGDX game","text":"<p>Here are a bunch of things I've learned from by brief excursion into the world of game making.</p> <p>Some of our will be obvious to you, some will not.</p>"},{"location":"Developers/Game-Making-Tips/#use-kotlin","title":"Use Kotlin","text":"<p>Unciv started its life as a Unity project in C#, was shifted to Java and LibGDX, and finally to Kotlin.</p> <p>I regret every minute that I spent writing events in Java, this is probably the most significant change that your application could see.</p>"},{"location":"Developers/Game-Making-Tips/#use-scene2d","title":"Use Scene2d","text":"<p>Unless you plan on creating images on the fly, you'll probably be using prerendered assets.</p> <p>Placing them manually is akin to manually positioning html tags, instead of using html hierarchy and css to guide positions.</p> <p>So too is Scene2d - as a placement framework. it's relatively simple to understand, especially when you...</p>"},{"location":"Developers/Game-Making-Tips/#ignore-horizontal-and-vertical-groups-use-table","title":"Ignore Horizontal and Vertical groups - use Table","text":"<p>I personally found that table has all the functionality of the above, and more.</p> <p>Each class has a different syntax too, so I found it much simpler to just stick with Table for everything.</p> <p>Table does just about EVERYTHING! It's insanely amazing!</p>"},{"location":"Developers/Game-Making-Tips/#if-your-game-is-getting-slow-use-the-android-profiler-in-android-studio","title":"If your game is getting slow, use the Android profiler in Android Studio","text":"<p>The top-down CPU chart is the best code profiler I've ever seen, use it to your advantage!</p>"},{"location":"Developers/Game-Making-Tips/#cache-everything","title":"Cache everything","text":"<p>Caching is a trade-off between purer, state-agnostic code and higher performance. Coming from a PC background, I automatically assume that anything less than O(n^2) is less than a millisecond and therefore, not a caching candidate. This is not so in mobile development.</p> <p>This becomes especially relevant when you need to save and load game data which has lots of connected parts - you have to avoid circular references, and you want to minimise the save size, but you need to reconstruct the missing links when loading.</p>"},{"location":"Developers/Game-Making-Tips/#minimize-string-operations","title":"Minimize String operations","text":"<p>All the tip and tricks you've heard to minimize String operations? Use them!</p> <p>String constants should be consts, use StringBuilders (or just ArrayLists of strings that you later .joinToString())</p>"},{"location":"Developers/Game-Making-Tips/#sequences-everywhere","title":"Sequences everywhere!","text":"<p>One thing I did not expect to be such an issue is intermediate lists when sorting and mapping.</p> <p>But apparently, the memory allocation for these tasks is Serious Business.</p> <p>So whenever possible, take your list and .asSequence() it before activating list operations - this results in huge savings of both time and memory!</p> <p>The only time you shouldn't be doing this, though, is when you want to cache the specific values for future use - sequences will go through the whole process every time you iterate on them, so just .toList() them when you've gotten the final results!</p>"},{"location":"Developers/Game-Making-Tips/#general-tips-for-making-an-open-source-game","title":"General tips for making an Open Source game","text":""},{"location":"Developers/Game-Making-Tips/#lower-the-entry-bar-for-both-programmers-and-players","title":"Lower the entry bar - for both programmers and players","text":"<p>I think that most Open Source games suffer from this problem - those that are in are way in, but those that are out and want to join have to learn the ecosystem.</p> <p>Documentation is a big issue here, but so are detailed instructions - and I mean \"Spoonfeeding\".</p> <p>Treat new developers as if they've never used Git before - it's possible they haven't!</p> <p>Explain how to download the sourecode, the tools, how to get the game running locally, how to make changes and how to submit them.</p> <p>Same think with new players - getting the game up and running should be AS SIMPLE AS HUMANLY POSSIBLE - you want people to play your game, don't you?</p> <p>This includes:</p> <ul> <li>Source-To-Executable automation - I use Travis</li> <li>Play stores and the like</li> <li>Internal game tutorials - your players will NEVER BE SATISFIED with this last point, but at least do what you candidate</li> </ul>"},{"location":"Developers/Game-Making-Tips/#community-community-community","title":"Community, Community, Community!","text":"<p>I, personally, underestimated this point for about a year after launch.</p> <p>I communicated with players through the Google Play Store and Github issues, and that seemed to be enough.</p> <p>It was only after repeated urgings from players that I opened a Discord server - and that gradually lead to a massive change!</p> <p>You see, it's not ABOUT programmer-to-player interaction. There will always be a small number of core devs relative to the large playerbase.</p> <p>The key to the community is the player-to-player interaction. Explaining things, questions, ideas, things that players bounce off each other, not only make the amorphous community a better place, but actually lead to a better game!</p> <p>Another think to remember is that there's a larger community around you - the Open Source community, the Linux community, etc.</p> <p>There are lots of people who will play your game only because it's open source, and it also means they don't have as many options.</p> <p>For example...</p> <ul> <li>Being the best 4X game means competing with the biggest names out there</li> <li>Being the best 4X game for Linux means many less competitors, but All The Cool Kids (tm) are multiplatforming nowadays so you're still outperformed.</li> <li>Being the best Open Source 4X game means about 5 competitors, and no money is involved either so the average entry is not as polished.</li> <li>Being the best Open Source 4X game for Android... means having so few competitors that it's totally doable.</li> </ul>"},{"location":"Developers/Game-Making-Tips/#everything-is-marketing","title":"Everything is marketing.","text":"<p>Your game's name, the icon, screenshots, everything a player sees about your game is marketing.</p> <p>Icons and bylines are especially important, since they're the first things your players will probably see.</p> <p>I saw an almost 50% (!) by changing the icon, after several experiments, which Google Play lets you conduct very easily.</p>"},{"location":"Developers/Game-Making-Tips/#translations-are-part-of-your-source-code","title":"Translations are part of your source code","text":"<p>This may be slightly controversial, so I'll explain.</p> <p>We went though a number of iterations regarding how to save translations until we arrived at the current format.</p> <p>The important parts are:</p> <ul> <li> <p>Game translation files should be AUTO GENERATED. This allows you to add new objects into the game with impunity,     knowing that corresponding lines will be auto-added to the translations.</p> </li> <li> <p>Translations for each language should be stored separately - this allows concurrent modification of several independent languages with no risk of conflict</p> </li> <li> <p>Translations should be PR'd in! This allows other speakers to question or change the proposed translations, and allows you to run tests on your translations.     If you require a specific format, this is invaluable as it means that bad translations will be rejected at the door.</p> </li> </ul>"},{"location":"Developers/Game-Making-Tips/#open-source-problems-require-open-source-solutions","title":"Open source problems require open (source?) solutions","text":"<p>TL;DR, consider using APIs that are free, even if they're not Open Source.</p> <p>Multiplayer requires syncing game files between clients, even when one of them is not currently online.</p> <p>The 'correct' way to solve this would probably be to have an online DB and a service which handles user requests.</p> <p>Since this is an Open Source game, I'm working on a 0$ budget, so we just store all the files in Dropbox and upload/download there.</p> <p>Is this secure? No, but does it need to be? You need to think of the cost vs the value.</p> <p>Same thing with Mods. Steam is big and secure so it handles its mods itself.</p> <p>We are small and open, so we just allow to download from Github, which lets us use all of Github's built in functions (user management, readmes, stars, versioning...) at no extra cost.</p> <p>And unlike the Dropbox usage, which is basically abuse, Github is built for this kind of thing! This is exactly the kind of use case they were thinking of to start with!</p>"},{"location":"Developers/Game-Making-Tips/#the-reckoning","title":"The Reckoning","text":"<p>There comes a time in every project where the cool stuff is done. All the cutting-edge awesomeness and algorithmic playdough is done, and now all (hah) it needs is polish.</p> <p>You know who loves polish? Players! Sure, there are some that say \"a good game is good even if it's basic\" but they have standards for what a basic game should have as well.</p> <p>And the numbers don't lie. Polished games sell themselves better, and so are played more.</p> <p>You know who doesn't love polish? DEVELOPERS.</p> <p>When your game is relatively simple, then the options for polish are more limited, but the more complex the game, the more polish-venues there are.</p> <p>And it can be an ABSOLUTE GRIND. Another weird use-case, another ingame option, \"better performance\" (I must have spent dozens of hours on different performance related actions)</p> <p>And the worst thing is, that everyone notices when it's missing, but no one notices when it's there. A hundred versions of polish - literally - and the average player may notice only a slight change.</p> <p>And then comes the moment when you ask yourself, why bother? What are we even doing here?</p> <p>For me, the answers are as follows:</p> <p>A. To build something truly great, you have to keep going way beyond when it stops being fun.</p> <p>B. There's a community of people that like what you're doing and want there to be more of it :)</p> <p>C. You know you want to keep coding, and what, you think you're going to start another project and it'll work out as well? You've tried that multiple times, and let's face it the chance of you making a second game that goes so well is really small unless you invest in it as much time as you have in this, and yeah, then you'll be back in this position again.</p> <p>And that's basically the loop I've been in for the last hundred versions or so! Solve bugs, fix edge cases, improve AI, accept PRs. Lots of mod-related changes, both to stop the game breaking when people do things in mods that they shouldn't and to allow them more freedom in making them.</p> <p>I don't think I'll ever really continue to finish G&amp;K, I'm DEFINITELY not planning on implementing BNW mechanics which frankly I think are...not great.</p> <p>That's where I am right now. Kind of done with the game, but considering that I thought that half a year ago and releases are still releasing roughly every week, also kind of not.</p>"},{"location":"Developers/Map-rendering/","title":"Map rendering","text":""},{"location":"Developers/Map-rendering/#introduction-how-does-libgdx-render-images","title":"Introduction - how does LibGDX render images?","text":"<p>Images in LibGDX are displayed on screen by a SpriteBatch, which uses GL to bind textures to load them in-memory, and can then very quickly display them on-screen. The actually rendering is then very fast, but the binding process is slow. Therefore ideally we'd want as little bindings as possible, so the textures should contain as many images as possible. This is why we compile images (ImagePacker.packImages()) into large PNGs. However, due to limitations in different chipsets etc, these images are limited to a maximum size of 2048*2048 pixels, and the game contains more images than would fit into a single square of that size. What we do, then, is separate them by category, and thus rendering proximity. The 'android' folder contains Images, but also various sub-categories - Images.Flags, Images.Tech, etc. Each of these sub-categories is compiled into a separate PNG file in the 'android/assets' folder.</p> <p>When rendering, the major time-sink is in rebinding textures. We therefore need to be careful to minimize the number of -rebinds, or 'swapping between different categories'.</p>"},{"location":"Developers/Map-rendering/#layering","title":"Layering","text":"<p>Each map tile is comprised of several layers, and each layer needs to be rendered for all tiles before the next layer is. For example, we don't want one tile's unit sprite to be overlayed by another's improvement. This layering is done in TileGroupMap, where we take the individual parts for all tiles, separate them into the layers, and add them all to one big group. This also has a performance advantage, since e.g. text and contruction images in the various city buttons are not rendered until the very end, and therefore swap per the number of of cities and not for every single tile. This also means that mods which add their own tilesets or unit sprites have better performance than 'render entire tile; would provide, since we first render all terrains, then all improvements, etc,  so if my tileset provides all terrains, it won't be swapped out until we're done.</p>"},{"location":"Developers/Map-rendering/#debugging","title":"Debugging","text":"<p>Android Studio's built-in profiler has a CPU profiler which is perfect for this. Boot up the game on your Android device, open a game, start recording CPU, move the screen around a bit, and stop recording. Select the \"GL Thread\" from the list of threads, and change visualization to a flame graph. You'll then see what's actually taking rendering time.</p> <p>You can find various games to test on here - This for example is a crowded one.</p>"},{"location":"Developers/Project-structure-and-major-classes/","title":"Project structure","text":"<p>Since LibGDX, and therefore Unciv, are built for multi-platform support, the project structure is built accordingly.</p> <p>99% of the code is in the core project, which contains all the platform-independant code.</p> <p>The desktop and android folders contain platform-specific things, and the Android folder also contains the game Images and the all-important Assets, which are required for running from Desktop as well, so we bundle them up into the .jar file when releasing.</p> <p>The tests folder contains tests that can be run manually via gradle with <code>./gradlew tests:test</code>, and are run automatically by Travis for every push.</p> <p>The server folder contains the sources for the UncivServer (a host enabling communication between multiplayer game instances), which is packaged into its own separate jar.</p>"},{"location":"Developers/Project-structure-and-major-classes/#translations","title":"Translations","text":"<p>Before we get to the Classes, a word on Languages. Unciv is playable in several handfuls of languages, and there's magic to support that. Whenever you include a new string in code you will need to give it a quick evaluation - will users see it, and if so, what do I need to do to support its translations. Sometimes you may not need to do anything, sometimes you will add a line to the translation templates, and sometimes you will adapt the string formatting to support the translations. For details, see the 'Translation generation - for developers' chapter.</p>"},{"location":"Developers/Project-structure-and-major-classes/#major-classes","title":"Major classes","text":"<p>Civ, and therefore Unciv, is a game with endless interconnectivity - everything affects everything else.</p> <p>In order to have some semblance of order, we'll go over the main classes in the order in which they are serialized.</p> <p>So yes, you can - for instance - get the center tile of a city, a TileInfo, directly from CityInfo. But delving into all the connections would only harm the point of this overview, that's what the actual code is for ;)</p> <p>The Game State:</p> <ul> <li>GameInfo<ul> <li>CivilizationInfo<ul> <li>CityInfo</li> </ul> </li> <li>TileMap<ul> <li>TileInfo<ul> <li>MapUnit</li> </ul> </li> </ul> </li> <li>RuleSet (unique in that it is not part of the game state)</li> </ul> </li> </ul> <p>The UI:</p> <ul> <li>MainMenuScreen</li> <li>NewGameScreen</li> <li>WorldScreen</li> <li>CityScreen</li> <li>MapEditorScreen</li> <li>Picker Screens - TechPickerScreen, PolicyPickerScreen, ImprovementPickerScreen, PromotionPickerScreen</li> </ul>"},{"location":"Developers/Project-structure-and-major-classes/#game-state","title":"Game State","text":""},{"location":"Developers/Project-structure-and-major-classes/#the-game-gameinfo","title":"The Game - <code>GameInfo</code>","text":"<p>First off, let's clarify: When we say \"The Game\", we mean the state of the game (what turn it is, who the players are, what each one has etc) and not the UI of the game.</p> <p>That is, The Game is the currently playe_ game, not Unciv.</p> <p>The game contains three major parts:</p> <ul> <li>The list of the players, or civilizations - <code>List&lt;CivilizationInfo&gt;</code></li> <li>The map upon which the game is played - <code>TileMap</code></li> <li>The ruleset by which the game is played - <code>RuleSet</code>. This includes what technologies, buildings, units etc. are available, and IS NOT serialized and deserialized, but comes straight from the game files - more on that later.</li> <li>Parameters unique to this game - difficulty, game speed, victory conditions, etc.</li> </ul> <p>When we save the game, or load the game, we're actually serializing and deserializing this class, which means that the this class is the root of the entire game state.</p> <p>Most objects in the \"state tree\" have a transient reference to their parent, meaning the tree can be traversed in-code in all directions, and frequently is.</p>"},{"location":"Developers/Project-structure-and-major-classes/#a-civilization-civilizationinfo","title":"A Civilization - <code>CivilizationInfo</code>","text":"<p>This represents one of the players of the game, and NOT a specific nation - meaning, not France, but rather \"Player X who is France in this game\". In another game, there will be another France.</p> <p>As one of the focal points of the game, it contains a lot of important information, the most important of which are:</p> <ul> <li>The list of cities the civilization has - <code>List&lt;CityInfo&gt;</code></li> <li>Which nation this is - references a certain Nation (part of the ruleset)</li> <li>Various Managers for the different aspects of the civilization - <code>PolicyManager</code>, <code>GoldenAgeManager</code>, <code>GreatPersonManager</code>, <code>TechManager</code>, <code>VictoryManager</code>, <code>DiplomacyManager</code></li> </ul>"},{"location":"Developers/Project-structure-and-major-classes/#a-city-cityinfo","title":"A City - <code>CityInfo</code>","text":"<p>This contains the information about a specific city.</p> <p>Beyond basic information like name, location on map etc, the most important classes it contains are:</p> <ul> <li>Calculating the yield of the city - <code>CityStats</code></li> <li>Managers for the various aspects - <code>PopulationManager</code>, <code>CityConstructions</code>, <code>CityExpansionManager</code></li> <li>The tiles controlled and worked by the city - only their locations are permanently saved in the CityInfo, the actual information is in the TileInfo in the TileMap</li> </ul>"},{"location":"Developers/Project-structure-and-major-classes/#the-map-tilemap","title":"The map - <code>TileMap</code>","text":"<p>This contains mostly helper functions and acts as a wrapper for the list of tiles it contains</p>"},{"location":"Developers/Project-structure-and-major-classes/#a-tile-tileinfo","title":"A tile - <code>TileInfo</code>","text":"<p>Each tile is comprised of several layers, and so has information for each.</p> <p>Tiles have, primarily:</p> <ul> <li>A base terrain - Grassland, Hills, Desert etc. References a certain <code>Terrain</code> (part of the ruleset)</li> <li>An optional terrain feature - Forest, Jungle, Oasis etc. References a certain <code>Terrain</code> (part of the ruleset)</li> <li>An optional resource - Iron, Dye, Wheat etc. References a certain <code>TileResource</code> (part of the ruleset)</li> <li>An improvement built on the tile, if any. References a certain <code>TileImprovement</code> (part of the ruleset)</li> <li>The units that are currently in the tile - <code>MapUnit</code></li> </ul>"},{"location":"Developers/Project-structure-and-major-classes/#a-unit-on-the-map-mapunit","title":"A unit on the map - <code>MapUnit</code>","text":"<p>Unlike buildings, Unit in Unciv has two meanings. One is a Type of unit (like Spearman), and one is a specific instance of a unit (say, a Babylonian Spearman, at a certain position, with X health).</p> <p><code>MapUnit</code> is a specific instance of a unit, whereas <code>BaseUnit</code> is the type of unit.</p> <p>Main information:</p> <ul> <li>A name - references a specific <code>BaseUnit</code></li> <li>Health and Movement</li> <li>Promotion status - <code>UnitPromotions</code></li> </ul>"},{"location":"Developers/Project-structure-and-major-classes/#ruleset","title":"Ruleset","text":"<p>So far so good - but what of everything that makes Civ, Civ? The units, the buildings, the nations, the improvements etc?</p> <p>Since these things remain the same for every game, these are not saved on a per-game basis, but rather are saved in json files in Unciv's asset folder.</p> <p>Each class in the game state that saves one of these will reference it by name, and when the game is running it will check the Ruleset to find the relevant information for that object.</p> <p>The various objects are:</p> <ul> <li><code>Technology</code> - referenced mainly in <code>CivilizationInfo.TechManager</code></li> <li><code>Nations</code> - referenced mainly in <code>CivilizationInfo</code></li> <li><code>Policy</code> - referenced mainly in <code>CivilizationInfo.PolicyManager</code> (seeing a pattern here?)</li> <li><code>Building</code> - referenced mainly in <code>CityInfo.ConstructionManager</code></li> <li><code>BaseUnit</code> - referenced mainly in <code>MapUnit</code></li> <li><code>Promotion</code> - referenced mainly in <code>MapUnit</code></li> <li><code>Terrain</code> - referenced mainly in <code>TileInfo</code></li> <li><code>TileResource</code> - referenced mainly in <code>TileInfo</code></li> <li><code>TileImprovement</code> - referenced mainly in <code>TileInfo</code></li> </ul> <p>There are also Translations in the Ruleset, but they technically have nothing to do with the game state but rather with the UI display.</p> <p>The information for all of these is in json files in <code>android\\assets\\jsons</code></p>"},{"location":"Developers/Project-structure-and-major-classes/#ui","title":"UI","text":"<p><code>UncivGame</code> is the 'base' class for the UI, from which everything starts, but it itself doesn't do much.</p> <p>When we change a screen, we're changing a value in UncivGame, the interesting stuff happens in the screens themselves.</p>"},{"location":"Developers/Project-structure-and-major-classes/#the-main-menu-mainmenuscreen","title":"The main menu - <code>MainMenuScreen</code>","text":"<p>This is what the user sees when first entering the game. It acts as a hub to loading games, adding mods, options etc, without loading an actual game upfront - this allows us to differentiate between \"User can't enter game\" and \"User can't load game\" problems</p>"},{"location":"Developers/Project-structure-and-major-classes/#starting-a-new-game-newgamescreen","title":"Starting a new game - <code>NewGameScreen</code>","text":"<p>This is basically a giant setting screen for GameOptions and MapOptions classes, divided into:</p> <ul> <li>GameOptionsTable - game speed, mods, etc</li> <li>MapOptionsTable - either from preexisting map file or generated, in which case: size, map generation type, etc.</li> <li>PlayerPickerTable - What civs are in the game and who controls them</li> </ul>"},{"location":"Developers/Project-structure-and-major-classes/#the-world-screen-worldscreen","title":"The World Screen - <code>WorldScreen</code>","text":"<p>90% of the game is spent on this screen, so naturally it's the fullest, with the most things happening.</p> <p>This is the main hub of the game, with all other screens being opened from it, and closing back to reveal it.</p> <p>Most notable are:</p> <ul> <li>The map itself - a <code>TileMapHolder</code> - with each of the rendered tiles being a <code>TileGroup</code></li> <li>The information panels - <code>WorldScreenTopBar</code> for stats and resources, <code>UnitTable</code> for the currently selected unit, <code>TileInfoTable</code> or the currently selected tile, <code>BattleTable</code> for battle simulation, and <code>NotificationsScroll</code> for the notifications</li> <li>The minimap - <code>MinimapHolder</code></li> <li>Buttons linking to other screens - to the <code>TechPickerScreen</code>, <code>EmpireOverviewScreen</code>, and <code>PolicyPickerScreen</code></li> <li>The almighty Next Turn button</li> </ul>"},{"location":"Developers/Project-structure-and-major-classes/#the-city-screen-cityscreen","title":"The city screen - <code>CityScreen</code>","text":"<p>The second-most important screen.</p> <p>Notable parts:</p> <ul> <li>the City Stats table - should definitely be its own class come to think of it</li> <li>The construction list and current construction (bottom left) - <code>ConstructionsTable</code></li> <li>Existing buildings, specialists and stats drilldown - <code>CityInfoTable</code></li> </ul>"},{"location":"Developers/Project-structure-and-major-classes/#others","title":"Others","text":"<p>A few words need to be said about the NextTurn process, but there isn't really a good place for it so I'll put it here.</p> <p>We clone the GameInfo and use a \"new\" GameInfo for each turn because of 2 reasons.</p> <p>The first is multithreading and thread safety, and the second is multiplayer reproducibility.</p> <p>The first point is pretty basic. The NextTurn needs to happen in a separate thread so that the user can still have a responsive game when it's off doing stuff. Stuff in the GameInfo changes on NextTurn, so if you're rendering that same GameInfo, this could cause conflicts. Also, after NextTurn we generally autosave, and if stuff changes in the state while we're trying to serialize it to put it in the save file, that's Not Fun. A single clone solves both of these problems at once.</p> <p>The second point is less obvious. If we use our mutable state, changing stuff in place, then what happens when we're playing in Multiplayer? Multiplayer is based upon the fact that you can receive an entire game state and go from there, and in fact the move to multiplayer was what made the whole \"clone\" thing necessary (on the way it also solved the aforementioned threading problems)</p>"},{"location":"Developers/Translations%2C-mods%2C-and-modding-freedom-in-Open-Source/","title":"Translations, mods, and modding freedom in Open Source","text":"<p>Unciv is, at its core, a remake of Civ V, meaning mechanics-wise there's almost by definition not much place for innovation. In terms of UI, there's nothing here that hasn't been done dozens of times, with far greater polish. However, there is one area where Unciv is groundbreaking: in its accessibility of translations, the possibility space of its mods, and the relationship between them.</p>"},{"location":"Developers/Translations%2C-mods%2C-and-modding-freedom-in-Open-Source/#translations","title":"Translations","text":""},{"location":"Developers/Translations%2C-mods%2C-and-modding-freedom-in-Open-Source/#the-translation-process","title":"The translation process","text":"<p>So let's start with translation. Surely this is a solved problem, right? Source text + language = translated text, and this information needs to be in a file so the game can read it. What makes us different from, for example, Firaxis?</p> <p>There are a couple of things, but the most significant is that this is an open-source game, and thus the translations are open-source as well. This means translators are both amateurs and not obligated to translate, so if translating is difficult, they simply won't.</p> <p>Amateurs can make mistakes, which is why it's vital that mistakes are easy to spot. That means that formats like \"translation key\" - e.g. <code>DIPLOMACY_GREETING = Siamo lieti di fare la vostra conoscenza.</code> are much less effective than <code>A pleasure to meet you. = Siamo lieti di fare la vostra conoscenza.</code> This format lends itself both the easier translation (it's immediately obvious what needs to be translated) and actual collaboration.</p> <p>A common suggestion that we get (by people with little familiarity with the project) is to \"use a website for translation\". This is not bad advice for a small open source game, but there are multiple disadvantages that (for now) no translation website provides enough advantage to outweigh:</p> <ol> <li>Testing. Currently, translations undergo a number of tests for verification - more on that later! This allows some language changes to be accepted and others not, and it's all in the same platform with the same tests. External translation tools don't allow for this.</li> <li>History and revisions. This is what Git was made for, and nothing like it exists in the world. By itself this would not</li> <li>Release cycle. We release versions semiweekly, and if we needed to upload changes to the translation website for every in-game change, and download them for every release, that's extra work. For some websites this is automate-able - for most it is not.</li> <li>Discussions. Most crowdsourcing translation websites don't allow for discussions and corrections on translations. Github makes every translation collaborative work.</li> <li>Mass changes. If we're changing the source of the translation but want to keep the various destinations (say, we change \"Gold from trade routes +[amount]%\" to \"+[amount]% Gold from trade routes\"), if all the translation files are in Git we can do that in 1 minute. If it's external, this varies greatly.</li> </ol> <p>Here are some ways that we managed to go wrong in the past:</p> <ul> <li> <p>Putting all languages into the same file (\"one big translation dictionary\") - when multiple people edit this file for different languages, they can conflict with each other. Separate to different files for simpler management.</p> </li> <li> <p>Using json - json is great for machines, but less so for humans, who can easily make mistakes. Json format is surprisingly finnicky, miss a closing \" and the whole file is now unreadable.</p> </li> </ul> <p>The format we decided to go for is one file per language, delimited by \" = \" for visual separation, in a .properties file. Lines starting in # are considered comments, so we can add comments for translators.</p>"},{"location":"Developers/Translations%2C-mods%2C-and-modding-freedom-in-Open-Source/#building-the-translation-files","title":"Building the translation files","text":"<p>As stated, Unciv releases versions semiweekly, and very often these changes include new objects or new UI elements. How do we keep all translation files up to date?</p> <p>In Unciv, all object data is stored in json format. This allows us to iterate on all objects, regardless of type, and extract the various text fields (strings or lists of strings). We avoid duplication by saving all translation texts we've already added, and use the existing translations to populate the \"value\" for each translation \"key\" we found in the json files.</p> <p>Since we rebuild the entire translation file every time, there's currently no way for translators to retain their own comments for future translators. But on the other hand, since for each line that we add we already know if it's translated or not, this allows us to add a <code># Requires translation</code> line before every non-translated line, which helps translators for languages that are almost fully translated to easily locate the new or changed terms for translation with ctrl+f (and of course this marking will disappear the next time we rebuild the file).</p> <p>Since there are UI texts that are not part of any specific object (like \"Start new game\"), we have a separate template.properties file for texts to translate that are not in the json files. Unlike adding objects, where the developer doesn't need to address the translation files at all since it's all linked, when adding UI elements with new texts devs need to remember to add the texts to template.properties file.</p>"},{"location":"Developers/Translations%2C-mods%2C-and-modding-freedom-in-Open-Source/#translation-placeholders","title":"Translation placeholders","text":"<p>This is all well and good for specific text-to-text translations, but what about translating \"A Temple has been built in Rome\"? The same template could potentially be any building name, or any city name!</p> <p>We do this with placeholders, which looks something like this: <code>[construction] has been built in [cityName] = [cityName] ha costruito [construction]</code>. As you can see, the placement of the parameters can change between languages, so we have to name all parameters.</p> <p>This also means that there can be explicitly wrong translations - if any parameter that appears in the source does not appear in the translated version, we won't be able to display this in-game! This is one of the translation tests that we mentioned earlier - when a translator opens a PR, the game undergoes build &amp; test via the Github Actions, and will notify on failures. Finding the text that warns of the failure within the action output is currently mostly done by devs, but I hope to be able to automate this too someday.</p> <p>To translate a text like \"[Temple] has been built in [Rome]\", therefore, we need to:</p> <ul> <li>Find the relevant translation (we do this by erasing all text between square brackets in input and finding the relevant translation text)</li> <li>Map placeholder names to input text (construction = Temple, cityName = Rome)</li> <li>Replace placeholders in translation with TRANSLATED input text (in <code>[cityName] ha costruito [construction]</code>, replace \"[cityName]\" with translation of \"Rome\", and \"[construction]\" with translation of \"Temple\")</li> </ul>"},{"location":"Developers/Translations%2C-mods%2C-and-modding-freedom-in-Open-Source/#translating-mod-data","title":"Translating mod data","text":"<p>The translation generation reads information from \"a ruleset\", i.e. the set of jsons defining the game's objects. Every mod is also a ruleset, either replacing or adding to the base ruleset defined in the game. This means that the same translation generation that we do for the base game can also be applied to mods, and so each modder can decide (from within the game) to generate translation files for his mod, and since mods are uploaded to Github to be widely available as part of the mod release methodology, translators will be able to translate those files the exact same way that they translate Unciv's base ruleset.</p>"},{"location":"Developers/Translations%2C-mods%2C-and-modding-freedom-in-Open-Source/#uniques","title":"Uniques","text":""},{"location":"Developers/Translations%2C-mods%2C-and-modding-freedom-in-Open-Source/#moddable-unique-effects","title":"Moddable unique effects","text":"<p>Every object in Unciv can include \"uniques\" - a list of strings, each granting a unique effect that is not applicable for every object of its type.</p> <p>For example, the Palace building has the unique \"Indicates the capital city\", and the settler has the unique \"Founds a new city\". This allows us to share effects between multiple units, and to avoid hardcoding and allow modders to add any effect to any object.</p> <p>Here too we encounter the problem of \"generic\" uniques - how can we have these effects grant a building, some stats, etc, using the same unique for all objects? Why, with placeholders of course! For example, one building has \"Requires a [Library] in all cities\", where \"Library\" can be replaced with any other building for similar effects. We can then extract the parameters from the unique at runtime, to know how to resolve the unique's effects.</p> <p>Since the translation template is the same as the unique template, these uniques are instantly translatable as well!</p> <p>We do have a slight problem, though - since translation texts come directly from the json files, and the json files have \"Requires a [Library] in all cities\", how do we tell the translators not to directly translate \"Library\" but the take the parameter name verbatim? Well, 95% of translation parameters fit nicely into a certain type - units, buildings, techs, terrains etc. So we can search for an object with than name, and since we find a Library building, we can put \"Requires a [buildingName] in all cities = \" as our translation line.</p>"},{"location":"Developers/Translations%2C-mods%2C-and-modding-freedom-in-Open-Source/#filters","title":"Filters","text":"<p>As time went on, we noticed that many of our \"uniques\" weren't so unique after all. Many were the same but with slightly different conditions. One affects all cities, one only coastal cities, and one only the city the building is built in. One affects Mounted units, one affects wounded units, one affects all water units, etc. We started compiling these conditions into \"filters\", which limited the number of uniques while expanding their range considerably.</p> <p>Take the following example unique for a building: \"[+1 Food] from [Deer] tiles [in this city]\".</p> <p>In its \"placeholder\" form, this is \"[stats] from [tileFilter] tiles [cityFilter]\". stats can accept any list of stats, e.g. '-2 Gold, +1 Science', '+3 Culture', etc. tileFilter can accept any number of tile parameters (base terrain e.g. 'Plains', terrain type eg. 'Land'/'Water', terrain features e.g. 'Forest', improvements e.g. 'Mine', resources e.g. 'Iron'. cityFilter can accept 'in this city', 'in all cities', 'in capital', 'in coastal cities', etc.</p> <p>There are also filters for units, all acceptable values are documented here.</p>"},{"location":"Developers/Translations%2C-mods%2C-and-modding-freedom-in-Open-Source/#unique-management-with-enums","title":"Unique management with Enums","text":"<p>The further along we go, the more generic the uniques become, and the more of them there are. Older uniques become new ones, by being merged or made more generic, and the older ones are deprecated. Deprecation notices are put on Discord, but a one-time message is easy to miss, and if you come back after a while you don't know what's changed. Modders discover during gameplay that the values they put for uniques were incorrect.</p> <p>All these problems are solved with a single solution - since all uniques are defined by their text, we can create an enum with ALL existing uniques, which lets us:</p> <ul> <li>Find all usages of a unique in the IDE instantly</li> <li>Mark deprecated uniques as such using <code>@Deprecated(\"as of &lt;versionNumber\"&gt;)</code> for devs (and modders!)</li> <li>Compare uniques using enum values, which is faster</li> </ul> <p>What's more, with a little bit of autodetection magic, we can determine the type of the parameter using its text. Using the above example, \"[stats] from [tileFilter] tiles [cityFilter]\", we can tell by the names of the parameters what each one is supposed to be,. We can then check at loading time for each unique, if its parameter values matches the parameter type it's supposed to have, which lets us catch incorrect parameters. The \"autodetection\" of parameter types for translations can also be fed from here, leading to much more accurate translation texts - instead of detecting from an example (e.g. \"Requires a [Library] in all cities\" from the json), we now use a dev-inputted value like \"Requires a [buildingName] in all cities\". This allows us to accept multiple types, like for e.g. \"Requires [buildingName/techName/policyName]\".</p> <p>Deprecated values can be detected due to the <code>@Deprecated</code> annotation, and can be displayed to the modders when loading the mod, together with the correct replacement.</p>"},{"location":"Developers/Translations%2C-mods%2C-and-modding-freedom-in-Open-Source/#conditionals","title":"Conditionals","text":"<p>Beyond the existing filters for units, buildings, tiles etc, there are some conditions that are global. For example, uniques that take effect when the empire is happy; when a tech has been researched; when the empire is at war; etc. Rather than being 'build in' to specific uniques, these conditions can be seen as extensions of existing uniques and thus globally relevant.</p> <p>For example, instead of \"[+1 Production] [in all cities] when empire is happy\", we can extract the conditional to \"[+1 Production] [in all cities] \". This does two things: A. Turns the 'extra' unique back into a regular \"[stats] [cityFilter]\" unique B. Turns the conditional into an extra piece that can be added onto any other unique <p>Conditionals have a lot of nuance, especially regarding translation and ordering, so work in that field is more gradual.</p>"},{"location":"Developers/Translations%2C-mods%2C-and-modding-freedom-in-Open-Source/#whats-next","title":"What's next?","text":"<p>We have yet to fully map all existing uniques and convert all textual references in the code to Enum usages, and have yet to extract all conditionals from their uniques.</p> <p>We already have a map of what uniques can be put on what objects - it won't take much to add that check as well and warn against uniques that are put on the wrong sorts of objects.</p> <p>Once we build the full inventory of the uniques, instead of the wiki page that needs to be updated manually we'll be able to generate a list of all acceptable uniques and their parameters directly from the source of truth. Put that in a webpage, add hover-links for each parameter type, generate and upload to github.io every version, and watch the magic happen.</p> <p>We'll also be able to notify modders if they use \"unknown\" uniques.</p>"},{"location":"Developers/UI-development/","title":"UI Development","text":"<p>Unciv is backed by GDX's scene2d for the UI, so check out their official documentation for more info about that.</p> <p>We mainly use the <code>Table</code> class of scene2d, because it offers nice flexibility in laying out all the user interface.</p>"},{"location":"Developers/UI-development/#the-fasteruidevelopment-class","title":"The <code>FasterUIDevelopment</code> class","text":"<p>This class is basically just a small helper GDX application to help develop UI components faster.</p> <p>It sets up the very basics of Unciv, so that you can then show one single UI component instantly. This gives you much faster response times for when you change something, so that you can immediately see the changes you made, without having to restart the game, load a bunch of stuff and navigate to where your UI component would actually be.</p> <p>To use it, you change the <code>DevElement</code> class within the <code>FasterUIDevelopment.kt</code> file so that the <code>actor</code> field is set to the UI element you want to develop. A very basic usage is there by default, just showing a label, but you can put any UI element there instead.</p> <pre><code>class DevElement(\nval screen: UIDevScreen\n) {\nlateinit var actor: Actor\nfun createDevElement() {\nactor = \"This could be your UI element in development!\".toLabel()\n}\n\nfun afterAdd() {\n}\n}\n</code></pre> <p>You can then simply run the <code>main</code> method of <code>FasterUIDevelopment</code> to show your UI element.</p>"},{"location":"Modders/Creating-a-UI-skin/","title":"How to create a UI skin for Unciv","text":"<p>You should read the Mods page first before proceeding</p> <p>In order to add a UI skin mod (yes, UI skins are just another type of mod), all you need to do is add your images under <code>Images/Skins/MyCoolSkinExample</code> and enable the mod as a permanent visual mod - the game will recognize the skin, and allow you to pick it in the options menu.</p> <p>Just like tilesets, UI skins can be used to alter the appearance of Unciv. Please note that UI skins do not support custom icons and fonts and not every UI element can be customized yet too.</p> <p>We use so called 9.png (or Ninepatch) files for every skin image because UI elements need a way to be resized based on game window size and resolution. Ninepatch files can be created manually by adding black pixels around your custom images in a specific manner or by using Android Studio's Draw 9-patch tool or this tool by romannurik for example. You may also check if your favorite image creation tool supports nine patches itself to generate them more easily.</p> <p>A skin image can either be gray scale and later be colored in game by modifying the <code>tint</code> in the skinConfig or be colored directly in the image. When coloring the image directly it is important to set the tint of the UI element to white. Please note that tileable ninepatches and ninepatches with multiple stretch areas are not supported because of technical restrictions by libgdx.</p> <p>There are 6 basic shapes which can be placed inside the <code>Images/Skins/MyCoolSkinExample</code> folder:  - checkbox  - checkbox-pressed  - rectangleWithOutline  - roundedEdgeRectangle  - select-box  - select-box-pressed</p> <p>These shapes are used all over Unciv and can be replaced to make a lot of UI elements change appearance at once. To change just one specific element use the table below to create an image at the specified directory using the specified name inside <code>Images/Skins/MyCoolSkinExample</code>. See the image below for an example file structure. </p>"},{"location":"Modders/Creating-a-UI-skin/#limitations","title":"Limitations","text":"<ul> <li>UI elements which change color because they have multiple states can not be given multiple colors based on their state using tint</li> <li>When coloring the image directly, setting the tint of the UI element to white overwrites these states</li> <li>Tileable ninepatches and ninepatches with multiple stretch areas are not supported because of technical restrictions by libgdx</li> </ul>"},{"location":"Modders/Creating-a-UI-skin/#available-ui-elements","title":"Available UI elements","text":"Directory Name Default shape Image CityScreen/ CityPickerTable roundedEdgeRectangle CityScreen/CitizenManagementTable/ AvoidCell null CityScreen/CitizenManagementTable/ FocusCell null CityScreen/CitizenManagementTable/ ResetCell null CityScreen/CityConstructionTable/ AvailableConstructionsTable null CityScreen/CityConstructionTable/ ConstructionsQueueTable null CityScreen/CityConstructionTable/ Header null CityScreen/CityConstructionTable/ PickConstructionButton null CityScreen/CityConstructionTable/ PickConstructionButtonSelected null CityScreen/CityConstructionTable/ QueueEntry null CityScreen/CityConstructionTable/ QueueEntrySelected null CityScreen/CityScreenTileTable/ Background null CityScreen/CityScreenTileTable/ InnerTable null CityScreen/CityStatsTable/ Background null CityScreen/CityStatsTable/ InnerTable null CityScreen/ConstructionInfoTable/ Background null CityScreen/ConstructionInfoTable/ SelectedConstructionTable null CivilopediaScreen/ EntryButton null General/ Border null General/ ExpanderTab null General/ HealthBar null General/ KeyCapturingButton roundedEdgeRectangleSmall General/ TabbedPager null General/ Tooltip roundedEdgeRectangle General/Popup/ Background null General/Popup/ InnerTable null LanguagePickerScreen/ LanguageTable null LoadGameScreen/ BottomTable null LoadGameScreen/ TopTable null MainMenuScreen/ Background null MainMenuScreen/ MenuButton roundedEdgeRectangle MapEditor/MapEditorToolsDrawer/ Handle null ModManagementOptions/ ExpanderTab null ModManagementScreen/ BottomTable null ModManagementScreen/ TopTable null MultiplayerScreen/ BottomTable null MultiplayerScreen/ TopTable null NewGameScreen/ BottomTable null NewGameScreen/ GameOptionsTable null NewGameScreen/ MapOptionsTable null NewGameScreen/ PlayerPickerTable null NewGameScreen/ TopTable null NewGameScreen/NationTable/ Background null NewGameScreen/NationTable/ BorderTable null NewGameScreen/NationTable/ RightInnerTable null NewGameScreen/NationTable/ Title null NewGameScreen/PlayerPickerTable/ PlayerTable null OverviewScreen/DiplomacyOverviewTab/ CivTable null OverviewScreen/NotificationOverviewTable/ Notification roundedEdgeRectangle OverviewScreen/ReligionOverviewTab/ BeliefDescription null OverviewScreen/TradesOverviewTab/ OffersTable null OverviewScreen/UnitOverviewTab/ UnitSupplyTable null PlayerReadyScreen/ Background null PolicyScreen/ PolicyBranchAdoptButton roundedEdgeRectangleSmall PolicyScreen/ PolicyBranchAdoptButtonBorder roundedEdgeRectangleSmall PolicyScreen/ PolicyBranchBackground rectangleWithOutline PolicyScreen/ PolicyBranchBackgroundBorder rectangleWithOutline PolicyScreen/ PolicyBranchHeader rectangleWithOutline PolicyScreen/ PolicyBranchHeaderBorder rectangleWithOutline PromotionScreen/ PromotionButton roundedEdgeRectangleMid PromotionScreen/ PromotionButtonBorder roundedEdgeRectangleMidBorder TechPickerScreen/ Background null TechPickerScreen/ BottomTable null TechPickerScreen/ CurrentTechColor 72, 147, 175 TechPickerScreen/ QueuedTechColor 72, 462, 43*2 TechPickerScreen/ ResearchableTechColor 28, 170, 0 TechPickerScreen/ ResearchedFutureTechColor 127, 50, 0 TechPickerScreen/ ResearchedTechColor 255, 215, 0 TechPickerScreen/ TechButtonIconsOutline roundedEdgeRectangleSmall UnitUpgradeMenu/ Button roundedEdgeRectangleMid VictoryScreen/ CivGroup roundedEdgeRectangle WorldScreen/ AirUnitTable null WorldScreen/ BattleTable null WorldScreen/ Notification roundedEdgeRectangle WorldScreen/ PickTechButton roundedEdgeRectangle WorldScreen/ TileInfoTable null WorldScreen/ TutorialTaskTable null WorldScreen/ UnitTable roundedEdgeRectangleMid WorldScreen/CityButton/ AirUnitTable roundedEdgeRectangleSmall WorldScreen/CityButton/ AirUnitTableBorder roundedEdgeRectangleSmall WorldScreen/CityButton/ DefenceTable roundedTopEdgeRectangleSmall WorldScreen/CityButton/ DefenceTableBorder roundedTopEdgeRectangleSmallBorder WorldScreen/CityButton/ IconTable roundedEdgeRectangleMid WorldScreen/CityButton/ IconTableBorder roundedEdgeRectangleMidBorder WorldScreen/CityButton/ InfluenceBar null WorldScreen/Minimap/ Background null WorldScreen/Minimap/ Border null WorldScreen/NextTurn/ ProgressBar null WorldScreen/NextTurn/ ProgressColor FOREST WorldScreen/TopBar/ LeftAttachment roundedEdgeRectangle WorldScreen/TopBar/ ResourceTable null WorldScreen/TopBar/ RightAttachment roundedEdgeRectangle WorldScreen/TopBar/ StatsTable null WorldScreenMusicPopup/TrackList/ Down null WorldScreenMusicPopup/TrackList/ Over null WorldScreenMusicPopup/TrackList/ Up null"},{"location":"Modders/Creating-a-UI-skin/#skinconfig","title":"SkinConfig","text":"<p>The skinConfig is similar to the tilesetConfig and can be used to define different colors and shapes for unciv to use.</p> <p>To create a config for your skin you just need to create a new .json file under <code>jsons/Skins/</code>. Just create a .txt file and rename it to MyCoolSkinExample.json. You only have to add things if you want to change them. Else the default values will be used.</p> <p>This is an example of such a config file that will be explain below:</p> <pre><code>{\n\"baseColor\": {\"r\":1,\"g\":0,\"b\":0,\"a\":1},\n\"skinVariants\": {\n\"MainMenuScreen/MenuButton\": {\n\"image\": \"MyCoolNewDesign\"\n},\n\"TechPickerScreen/TechButton\": {\n\"image\": \"MyCoolNewDesign\",\n\"alpha\": 0.7\n},\n\"WorldScreen/TopBar/ResourceTable\": {\n\"alpha\": 0.8\n},\n\"WorldScreen/UnitTable\": {\n\"tint\": {\"r\": 1, \"g\": 0, \"b\": 0},\n\"image\": \"WorldScreen/TopBar/ResourceTable\",\n\"alpha\": 0.4\n},\n\"WorldScreen/Minimap/Background\": {\n\"tint\": {\"r\": 0.2, \"g\": 0.4, \"b\": 0.45, \"a\": 1}\n}\n}\n}\n</code></pre>"},{"location":"Modders/Creating-a-UI-skin/#basecolor","title":"baseColor","text":"<p>A color defined with normalized RGBA values. Default value: <code>{\"r\": 0, \"g\": 0.251, \"b\": 0.522, \"a\": 0.749}</code></p> <p>Defines the color unciv uses in most ui elements as default</p>"},{"location":"Modders/Creating-a-UI-skin/#skinvariants","title":"skinVariants","text":"<p>A dictionary mapping string to a SkinElement. Default value: empty</p> <p>These variants can be used to define a different image, tint and/or alpha for a specified UI element. The string used to identify the UI element can be taken from the table above by appending the name to the directory. <pre><code>| Directory             | Name          |\n|-----------------------|---------------|\n| WorldScreen/          | Notification  | -&gt; WorldScreen/Notification\n| WorldScreen/TopBar/   | StatsTable    | -&gt; WorldScreen/TopBar/StatsTable\n</code></pre></p>"},{"location":"Modders/Creating-a-UI-skin/#image","title":"image","text":"<p>A path to an image. The file is expected to be located alongside the 6 basic shapes inside the <code>Images/Skins/MyCoolSkinExample</code> folder if just a name like <code>MyCoolNewDesign</code> is given. The image path can also be another ui element like <code>WorldScreen/TopBar/ResourceTable</code> so images can be reused by other elements.</p>"},{"location":"Modders/Creating-a-UI-skin/#tint","title":"tint","text":"<p>A color defined with normalized RGBA values. Default value: null</p> <p>The color this UI element should have.</p>"},{"location":"Modders/Creating-a-UI-skin/#alpha","title":"alpha","text":"<p>A float value. Default value: null</p> <p>The alpha this UI element should have. Overwrites the alpha value of tint if specified.</p>"},{"location":"Modders/Creating-a-custom-tileset/","title":"How to make Unciv use your custom tileset","text":"<p>You should read the Mods page first before proceeding</p> <p>In order to add a tileset mod (yes, tilesets are just another type of mod), all you need to do is add your images under Images/Tilesets/MyCoolTilesetExample and enable the mod as a permanent visual mod - the game will recognize the tileset, and allow you to pick it in the options menu.</p> <p>Let's look at the example \"Grassland+Jungle+Dyes+Trading post\" to learn how the game decides which images it should use for this tile:</p> <ol> <li>When there is a rule variant entry in the tileset config for this tile we will use the entry.</li> <li>Else if there is an image called \"Grassland+Jungle+Dyes+Trading post\" we will use it instead.</li> <li>Otherwise, we will check if there is an image called \"Grassland+Jungle\" (BaseTerrain+Terrainfeatures) and \"Dyes+Trading post\" (Resource+Improvement) and use the remainings of it. Let's say you made an image called \"Grassland+Jungle\" but none called \"Dyes+Trading post\". In the end, we will then use the images \"Grassland+Jungle\", \"Dyes\" and \"Trading post\".</li> </ol> <p>All these images can also use era-dependant variants if you want to change the appearance of, let's say, \"Trading post\" throughout the game. Just create images and add the suffix \"-[era name]\". E.g. \"Trading post-Classical era\", \"Trading post-Industrial era\", etc.</p> <p>It is advised to use the layered approach (1 and 3) often because it comes with a few advantages. Mainly:</p> <ul> <li>Decreased filesize (on disk, for downloads)</li> <li>Easier support for new terrains, improvements, resources, and for changing existing tiles</li> </ul> <p>You should keep in mind that the default rendering order is: BaseTerrain, TerrainFeatures, Resource, Improvement.</p>"},{"location":"Modders/Creating-a-custom-tileset/#tileset-config","title":"Tileset config","text":"<p>This is where tileset configs shine. You can use these to alter the way Unicv renders tiles.</p> <p>To create a config for your tileset you just need to create a new .json file under jsons/Tilesets/. Just create a .txt file and rename it to MyCoolTilesetExample.json. You only have to add things if you want to change them. Else the default values will be used.</p> <p>This is an example of such a config file that will be explain below:</p> <pre><code>{\n\"useColorAsBaseTerrain\": \"false\",\n\"useSummaryImages\": \"true\",\n\"unexploredTileColor\": {\"r\":1,\"g\":1,\"b\":1,\"a\":1},\n\"fogOfWarColor\": {\"r\":1,\"g\":0,\"b\":0,\"a\":1},\n\"fallbackTileSet\": null,\n\"tileScale\":0.9,\n\"tileScales\": {\n\"City center\":1.2,\n\"Citadel\":1.5\n},\n\"ruleVariants\": {\n\"Grassland+Forest\": [\"Grassland\",\"ForestForGrassland\"],\n\"Grassland+Jungle+Dyes+Trading post\": [\"Grassland\",\"JungleForGrasslandBack\",\"Dyes+Trading post\",\"JungleForGrasslandFront\"]\n}\n}\n</code></pre>"},{"location":"Modders/Creating-a-custom-tileset/#usecolorasbaseterrain","title":"useColorAsBaseTerrain","text":"<p>A boolean value (\"true\" or \"false\"). Default value: \"false\"</p> <p>If true, an additional \"Hexagon\" image is placed below each tile and colored in the corresponding BaseTerrain color. This removes the necessity to add individual BaseTerrain images. This is how the \"Minimal\" tileset works.</p>"},{"location":"Modders/Creating-a-custom-tileset/#usesummaryimages","title":"useSummaryImages","text":"<p>A boolean value (\"true\" or \"false\"). Default value: \"false\"</p> <p>If true, summary images are used for specific groups of images instead of using individual tile images. The summary images must be placed in the same folder as every other tile image. Summary images used:</p> Image group Summary image Natural wonders \"NaturalWonder\""},{"location":"Modders/Creating-a-custom-tileset/#unexploredtilecolor","title":"unexploredTileColor","text":"<p>A color defined with normalized RGBA values. Default value: \"{\"r\":0.24705882, \"g\":0.24705882, \"b\":0.24705882, \"a\":1}\" (DarkGray)</p> <p>Defines the color of the unexplored tiles.</p>"},{"location":"Modders/Creating-a-custom-tileset/#fogofwarcolor","title":"fogOfWarColor","text":"<p>A color defined with normalized RGBA values. Default value: \"{\"r\":0, \"g\":0, \"b\":0, \"a\":1}\" (Black)</p> <p>Defines the color of the fog of war. The color gets approximated by 60% to allow the colors of the images below to shine through.</p>"},{"location":"Modders/Creating-a-custom-tileset/#fallbacktileset","title":"fallbackTileSet","text":"<p>A string value. Default value: \"FantasyHex\"</p> <p>The name of another tileset whose images should be used if this tileset is missing images. Can be set to null to disable the the fallback tileset</p>"},{"location":"Modders/Creating-a-custom-tileset/#tilescale","title":"tileScale","text":"<p>A float value. Default value: 1.0</p> <p>The scale of all tiles. Can be used to increase or decrease the size of every tile. Is being used by the tileset mod 5Hex (made by ravignir) to fake shadows.</p>"},{"location":"Modders/Creating-a-custom-tileset/#tilescales","title":"tileScales","text":"<p>A dictionary mapping string to a float value. Default value: empty</p> <p>Used by the \"Minimal\" tileset to scale all its tiles except the base terrain down. Each entry overrides the tileScale value for the specified tile.</p>"},{"location":"Modders/Creating-a-custom-tileset/#rulevariants","title":"ruleVariants","text":"<p>A dictionary mapping string to a list of strings. Default value: empty</p> <p>The ruleVariants are the most powerful part of the tileset config. With this, you can define, for a specific tile, which images and in which order these images should be used.</p> <p>An example is given in the code above. For the tile \"Grassland+Jungle+Dyes+Trading post\" we then use the images \"Grassland\", \"JungleForGrasslandBack\", \"Dyes+Trading post\" and \"JungleForGrasslandFront\" in that order.</p>"},{"location":"Modders/Creating-a-custom-tileset/#fog-and-unexplored-tiles","title":"Fog and unexplored tiles","text":"<p>Unciv distinguishes between \"unexplored\" tiles, which are tiles the Civ has never seen, and \"not visible\" tiles, which are those that were seen once but now are not.</p> <p>Not visible tiles are grayed out by design, and on top of that have the <code>CrosshatchHexagon.png</code> image applied to them.</p> <p>Unexplored tiles display the <code>UnexploredTile.png</code> image, on top of which <code>CrosshatchHexagon.png</code> is applied.</p> <p>You can set the CrosshatchHexagon to be functionally invisible by replacing it with a 1px by 1px invisible image.</p>"},{"location":"Modders/Creating-a-custom-tileset/#unit-images","title":"Unit images","text":"<p>Unit images can be changed according to civ-specific styles (if a mod specifies a \"style\" variable for each civilization) and according to the owning civ's current era. Unciv attempts to load the unit images in the following order (where unitName is the unit name given in Units.json, styleName is optionally specified in Nations.json, and eraName is the era name given in Eras.json (including \" era\")).</p> <ol> <li>unitName-styleName-eraName (example: \"Archer-customStyle1-Classical era.png\")</li> <li>unitName-eraName (example: \"Archer-Classical era.png\")</li> <li>unitName-styleName (example: \"Archer-customStyle1.png\")</li> <li>unitName (example: \"Archer.png\")</li> </ol> <p>Era-specific sprites do not need to be specified for each era, only on eras where the sprites change. If a modder wants a Great General unit to change sprites starting in the Modern era, they only need to create a \"Great General-Modern era.png\" image. The Great General unit would use the default \"Great General.png\" sprite for all eras up to the Modern era then the Modern era sprite for the Modern era and all eras after unless there is a later era sprite for this unit.</p>"},{"location":"Modders/Creating-a-custom-tileset/#nation-coloured-units","title":"Nation-coloured units","text":"<p>Unciv can colour units according to the civilization that owns them. [PR3231]</p> <p>This is used by providing multiple images per unit, each representing a coloured layer. The image suffixed with \"-1\" will be tinted to the civilization's inner colour, and the image suffixed with \"-2\" will be tinted to the civilization's outer colour. For example:</p> Image Description Colour Archer.png Base image Untinted Archer-1.png Colour layer Nation inner colour Archer-2.png Colour layer Nation outer colour <p>The Civ Army Color Style Sheet mod by @AdityaMH and the 5Hex Tileset by @ravignir are very good practical examples of how this can be used.</p>"},{"location":"Modders/Creating-a-custom-tileset/#attack-animations","title":"Attack animations","text":"<p>These are small animations that play on units when they receive damage.</p> <p>They can be for unit types (Archery, Seige, Cavalry) or for specific unit names</p> <p>The files should be in the format of <code>&lt;unit type/unit name&gt;-attack-&lt;frame number&gt;</code>. For example, a 3 frame animation for Sword units would have the files <code>Sword-attack-1.png</code>, <code>Sword-attack-3.png</code>, <code>Sword-attack-3.png</code></p>"},{"location":"Modders/Images-and-Audio/","title":"Images and Audio","text":""},{"location":"Modders/Images-and-Audio/#permanent-audiovisual-mods","title":"Permanent audiovisual mods","text":"<p>The following chapters describe possibilities that will work while a mod is active. It is either selected for the current game (during new game creation, cannot be changed after that for saved games), meaning all its rules and resources will be used. Or it is marked as 'Permanent audiovisual mod' in the mod manager (you must select it in the 'installed' column to get the checkbox). In that case only graphics and audio will be active, the rule changes will be ignored (if it contains any) unless the first way is also used.</p>"},{"location":"Modders/Images-and-Audio/#override-built-in-graphics","title":"Override built-in graphics","text":"<p>If a mod supplies an image with the same name and path as one included in the base game (and its atlas is up to date), and the mod is active, the mod's graphics will be used instead of the built-in one.</p> <p>For example, if you include a file named \"Images/OtherIcons/Link.png\" in your mod, you will be overriding the little chain links icon denoting linked lines in Civilopedia. The first part of the path is not relevant for overriding, it controls which of a set of atlas files will carry the image, but for selection in the game only the rest of the path is relevant. So, to override \"Images.Tech/TechIcons/Archery.png\" you could place your image as \"Images/TechIcons/Archery.png\" and it would work because the \"TechIcons/Archery\" part is the key.</p> <p>Please note, as for adding items, your graphics should keep the size and color choices of the original, or the result may be surprising, e.g. when the game tries to tint such an image.</p>"},{"location":"Modders/Images-and-Audio/#supply-additional-graphics","title":"Supply additional graphics","text":"<p>You will need to supply the graphics for new elements - a new unit needs its icon just as a new nation does. The rules are:</p> <ul> <li>The path and name of the image file need to conform to the rule: <code>Image[.AtlasName]/Type-specific/Objectname.png</code> (Type-specific means \"TechIcons\" for a Technology, \"NationIcons\" for a Nation and so on. See vanilla game folders. Objectname is the exact name as defined in json, before translation.)</li> <li>All path parts are case sensitive.</li> <li>Unit Pixel sprites and Tilesets follow special rules.</li> <li>Promotions can be named \"<code>[Unitname] ability</code>\". In such a case, if <code>UnitIcons/Unitname.png</code> exists it will fall back to that unit icon when <code>UnitPromotionIcons/Unitname ability.png</code> is missing.</li> <li>Promotions can be named \"Something I\" (or \" II\" or \" III\"). The suffix will be removed and painted as little stars, only the base <code>UnitPromotionIcons/Something.png</code> will be loaded.</li> <li>The special rules for promotions can be combined, e.g. \"<code>[Warrior] ability III</code>\" will fall back to the Warrior unit icon and paint 3 Stars on it.</li> </ul> <p>Additionally, there there are some kinds of images where the game has display capability but does not supply graphics itself, as described in the next paragraphs:</p>"},{"location":"Modders/Images-and-Audio/#adding-custom-fonts","title":"Adding custom Fonts","text":"<p>You can add custom <code>.ttf</code> fonts into the game: place <code>.ttf</code> file inside of <code>/fonts/</code> directory of your mod. The font you have added will be visible and choosable in <code>Options-Advanced</code> tab at the top of font list as <code>&lt;fontname&gt; (&lt;modname&gt;)</code>.</p> <p>All fonts are rendered by default at 50 pixel size and rescaled later for the game's needs. Currently fonts are NOT mipmapped on minification.</p>"},{"location":"Modders/Images-and-Audio/#adding-wonder-splash-screens","title":"Adding Wonder Splash Screens","text":"<p>You can add wonder images to mods and they'll be displayed instead of the standard icon when a wonder is finished. The image needs to be a .png and 2:1 ratio so for example 200x100 px.</p> <p>Add the images to <code>/Images/WonderImages/</code>. They need to be named according to the name field in <code>Buildings.json</code>, so for example \"Temple of Artemis.png\" or \"Stonehenge.png\"</p> <p>Remember, to be compatible with mobile devices, a fresh atlas needs to be generated including these.</p>"},{"location":"Modders/Images-and-Audio/#adding-leader-portraits","title":"Adding Leader Portraits","text":"<p>The base game comes without Leader Portraits, but is able to display them in greetings, Civilopedia, diplomacy screens, or the nation picker. A mod can supply these, by adding their images to <code>/Images/LeaderIcons/</code>. The file name must correspond exactly with the leader name of a nation as defined in Nations.json, or they will be ignored.</p> <p>These work best if they are square, between 100x100 and 256x256 pixels, and include some transparent border within that area.</p> <p>For example, here is mod showing how to add leader portraits, which can complement the base game.</p>"},{"location":"Modders/Images-and-Audio/#adding-portraits","title":"Adding Portraits","text":"<p>The base game uses flat icons, surrounded with colored circles as backgrounds (e.g. for units to fit the civilization's flag colors), to denote entities such as: units, buildings, techs, resources, improvements, religions, promotions, uniques, unit actions and nations in the UI. A mod can supply \"Portraits\" - static images that will remain uncolored - by adding images to <code>/Images/&lt;entityType&gt;Portraits/</code> (e.g. <code>/Images/BuildingPortraits/</code>, /Images/ResourcesPortraits/, etc), which will be used in all UI elements (except for unit icons in the world map). The file name must correspond exactly with the unit/building/tech/resource/etc name  defined in corresponding JSONs (e.g. Units.json, Buildings.json, TileResources.json, etc) or have the same name as the file they suppose to replace, or they will be ignored.</p> <p>If mod supplies '/Images/Portraits/Background.png' images, they will be used as a background for corresponding portraits instead of default circle. <p>Portraits and backgrounds work best if they are full RGB square, between 100x100 and 256x256 pixels, and include some transparent border within that area.</p> <p>For example, here is mod showing how to add custom portraits, which can complement the base game.</p>"},{"location":"Modders/Images-and-Audio/#adding-icons-for-unit-types","title":"Adding icons for Unit Types","text":"<p>The Unit Types as defined in UnitTypes.json have no icons in the base game, but Civilopedia can decorate their entries if you supply images named 'Images/UnitTypeIcons/.png'. (while you're at it, you may override the default icon for the Unit Type category header - it's 'UnitTypes.png' in the same folder, or the icons used for the movement domains - 'DomainLand', 'DomainWater', 'DomainAir')"},{"location":"Modders/Images-and-Audio/#adding-icons-for-beliefs","title":"Adding icons for Beliefs","text":"<p>The individual Beliefs - as opposed to Belief types, as defined in Beliefs.json have no icons in the base game, but Civilopedia can decorate their entries if you supply images named 'Images/ReligionIcons/.png'. Civilopedia falls back to the icon for the Belief type - as you can see in the base game, but individual icons have precedence if they exist."},{"location":"Modders/Images-and-Audio/#sounds","title":"Sounds","text":"<p>Standard values are below. The sounds themselves can be found here.</p> <ul> <li>arrow, artillery, bombard, bombing, cannon, chimes, choir, click, coin, construction, elephant, fortify, gdrAttack, horse, jetgun, machinegun, metalhit, missile, nonmetalhit, nuke, paper, policy, promote, setup, shipguns, shot, slider, swap, tankshot, throw, torpedo, upgrade, whoosh.</li> </ul> <p>Mods can add their own sounds, as long as any new value in attackSound has a corresponding sound file in the mod's sound folder, using one of the formats mp3, ogg or wav (file name extension must match codec used). Remember, names are case sensitive. Small sizes strongly recommended, Unciv's own sounds use 24kHz joint stereo 8-bit VBR at about 50-100kBps.</p>"},{"location":"Modders/Images-and-Audio/#override-built-in-sounds","title":"Override built-in sounds","text":"<p>This works like graphics, except no atlas is involved. E.g. you include a sounds/Click.mp3, it will play instead of the normal click sound. These files must stay short and small. A sound larger than 1MB when uncompressed may break or not play at all on mobile devices. Unciv tries to standardize on 24kHz sample rate, joint stereo, low-bitrate VBR (-128kbps) mp3. Only mp3 and ogg formats will be recognized (but an existing mp3 can be overridden with an ogg file).</p>"},{"location":"Modders/Images-and-Audio/#supply-additional-music","title":"Supply additional music","text":"<p>Sound files (mp3 or ogg) in a mod /music folder will be recognized and used when the mod is active. Except for context-specific music as described in the following paragraphs, tracks will play randomly from all available tracks (with a little bias to avoid close repetition of tracks). There is no overriding - a \"thatched-villagers.mp3\" in a mod will play in addition to and with the same likelihood as the file that the base game offers to download for you. There is no hard technical limit on bitrate or length, but large bandwidth requirements may lead to stuttering (The end of a \"next turn\", right before the world map is updated, and with very large maps, is the most likely to cause this).</p>"},{"location":"Modders/Images-and-Audio/#context-sensitive-music-overview","title":"Context-sensitive music: Overview","text":"<p>The Music Controller will generally play one track after another, with a pause (can be changed in options) between. While the \"Leave game?\" confirmation dialog is opened playback will fade out and pause and can resume when it is closed.</p> <p>There are various 'triggers' in the game code initiating a choice for a new track. The new track will, if necessary, fade out the currently playing track quickly before it starts playing. Track choice involves context provided by the trigger and a random factor, and an attempt is made to not repeat any track until at least eight others have played.</p> <p>Mods can provide their own music folder, and if they are active its contents will be treated exactly the same as those in the main music folder. Mods should control usage of their tracks by careful choice of file name. Mod developers can watch console output for messages logging track choice with trigger parameters or loading errors.</p> <p>One track is special: The Thatched Villagers (see also credits.md). The game is able to download it if the music folder is empty, and it is played when the music volume slider is used. It is also a fallback track should certain problems occur (a broken file, however, will shut down the player until another trigger happens).</p>"},{"location":"Modders/Images-and-Audio/#context-sensitive-music-list-of-triggers","title":"Context-sensitive music: List of Triggers","text":"<p>Triggers indicate context (call it intent, mood, whatever, it doesn't matter) by optionally providing a prefix and/or suffix to match against the file name. There are a few flags as well influencing choice or behaviour - one flag function is to make prefix or suffix mandatory, meaning if no available file matches the track chooser will do nothing. Otherwise, a next track will always be chosen from the available list by sorting and then picking the first entry. Sorting is done by in order of precedence: Prefix match, Suffix match, Recently played, and a random number. Therefore, as currently no triggers have an empty prefix, files matching none of the prefixes will never play unless there are less than eight files matching the requested prefix.</p> <p>The current list of triggers is as follows:</p> Description Prefix [^M] Suffix [^X] Flags Automatic next-track[^0] Ambient Launch game[^1] Menu Every 10th turn (player civ name) [^M] Peace or War[^2] [^F] New game: Select a mod (mod name) [^M] Theme [^S] New game: Pick a nation for a player (nation name) [^M] Theme or Peace [^S] Diplomacy: Select player (nation name) [^M] Peace or War[^3] [^S] First contact[^4] (civ name) [^M] Theme or Peace [^X] War declaration[^5] (civ name) [^M] War [^X] Civ defeated (civ name) Defeat [^X] Player wins (civ name) Victory [^X] Golden Age (civ name) [^M] Golden [^X] Wonder built (wonder name) [^M] Wonder [^X] Tech researched (tech name) [^M] Researched [^X] Map editor: Select nation start location (nation name) [^M] Theme [^S] Options: Volume slider or Default track downloaded [^D] Music controls (Options or from Menu) Next track Ambient <p>Legend:</p> <ul> <li>[^N]: Not implemented</li> <li>[^M]: Prefix must match. If no matching file is found, the trigger will do nothing.</li> <li>[^X]: Suffix must match. If no matching file is found, the trigger will do nothing.</li> <li>[^S]: Stop after playback. No automatic next choice.</li> <li>[^F]: Slow fadeout of replaced track.</li> <li>[^D]: Always plays the default file.</li> <li>[^0]: Whenever a track finishes and the configured silence has elapsed, an 'Ambient' track without any context is chosen. Also triggered by 'resume' (e.g. switching to another app and back on Android)</li> <li>[^1]: First opening of the Main Menu (or the initial language picker).</li> <li>[^2]: Whether the active player is at war with anybody.</li> <li>[^3]: According to your relation to the picked player.</li> <li>[^4]: Excluding City States.</li> <li>[^5]: Both in the alert when another player declares War on you and declaring War yourself in Diplomacy screen.</li> </ul>"},{"location":"Modders/JSON-files-for-mods/","title":"JSON files for mods","text":"<p>These pages are a work in progress. Information they contain may be incomplete.</p> <p>The JSON files that make up mods can have many different fields, and as not all are used in the base game, this wiki page will contain the full information of each. It will also give a short explanation of the syntax of JSON files.</p>"},{"location":"Modders/JSON-files-for-mods/#table-of-contents","title":"Table of Contents","text":"<ul> <li>General Overview of JSON files</li> <li>Civilization-related JSON files<ul> <li>Beliefs.json</li> <li>Buildings.json</li> <li>Nations.json</li> <li>Policies.json</li> <li>Quests.json</li> <li>Religions.json</li> <li>Specialists.json</li> <li>Techs.json</li> </ul> </li> <li>Map-related JSON files<ul> <li>Terrains.json</li> <li>TileResources.json</li> <li>TileImprovements.json</li> <li>Ruins.json</li> <li>Tileset-specific json</li> </ul> </li> <li>Unit-related JSON files<ul> <li>Units.json</li> <li>UnitPromotions.json</li> <li>UnitTypes.json</li> </ul> </li> <li>Miscellaneous JSON files<ul> <li>Difficulties.json</li> <li>Eras.json</li> <li>ModOptions.json</li> <li>Tutorials.json</li> </ul> </li> <li>Stats</li> <li>Sounds</li> <li>Civilopedia text</li> </ul>"},{"location":"Modders/JSON-files-for-mods/#general-overview-of-json-files","title":"General Overview of JSON files","text":"<p>Resources: json.org, ISO standard</p> <p>Almost all Unciv JSON files start with a \"[\" and end with a \"]\". In between these are different objects of the type you are describing, each of which is contained between a \"{\" and a \"}\". For example, a very simple units.json may look like:</p> <pre><code>[\n    {\n        \"name\": \"Warrior\",\n        \"cost\": 16\n    },\n    {\n        \"name\": \"Spearman\",\n        \"cost\": 24,\n        \"promotions\": [\"Shock I\", \"Drill I\"]\n    }\n]\n</code></pre> <p>This file contains two unit objects, one for a warrior and one for a spearman. These objects have different attributes, in this case \"name\", \"cost\" and \"promotions\". All these attributes have a certain type, a String (text) for \"name\", an Integer for \"cost\" and a List of Strings for \"promotions\".</p> <p>There are different types of attributes: | type | notes | | --------- | ----- | | String | A word or sentence. Should be between double quotes (\") | | Integer | A number. Can be both positive or negative. Should not be between quotes | | Boolean | A value that can either be 'true' or 'false'. Should not be between quotes | | List of [type] | If multiple values could apply (such as with the promotions above), they should be put inside a list. Each element of the list should be written like a normal attribute, separated by commas, and enclosed between square braces. E.g.: [\"Shock I\", \"Shock II\"] or [1, 2, 3]. | | Object | The most complicated type of attribute. An object is comprised of multiple attributes, each of which again has a type. These attributes have a key (the part before the \":\") and a value (the part behind it). For an example, see below. |</p> <p>Example of a Buildings.json adding a new \"Cultural Library\" building which gives +50% science and +50% culture:</p> <pre><code>[\n    {\n        \"name\": \"Cultural Library\"\n        \"percentStatBonus\" : {\"science\": 50, \"culture\": 50}\n    }\n]\n</code></pre> <p>The keys in this example are \"science\" and \"culture\", and both have the value \"50\".</p> <p>In some sense you can see from these types that JSON files themselves are actually a list of objects, each describing a single building, unit or something else.</p>"},{"location":"Modders/JSON-files-for-mods/#information-on-json-files-used-in-the-game","title":"Information on JSON files used in the game","text":"<p>Many parts of Unciv are moddable, and for each there is a separate json file. There is a json file for buildings, for units, for promotions units can have, for technologies, etc. The different new buildings or units you define can also have lots of different attributes, though not all are required. Below are tables documenting all the different attributes everything can have. Only the attributes which are noted to be 'required' must be provided. All others have a default value that will be used when it is omitted.</p> <p>The individual files are described on separate pages.</p>"},{"location":"Modders/Making-a-new-Civilization/","title":"Making a new Civilization","text":"<p>So you want to add your favorite civilization?</p> <p>There are a few steps required, so we'll walk you through them!</p>"},{"location":"Modders/Making-a-new-Civilization/#fill-in-your-nation-info","title":"Fill in your Nation info","text":"<p>Each civ has some basic information - what the civ name is, the leader's name, colors and city names.</p> <p>In addition, each civ has flavor text when declaring war, intoduction etc.</p> <p>All of these need to be filled in in Nations.json</p>"},{"location":"Modders/Making-a-new-Civilization/#get-your-civ-icon","title":"Get your Civ icon","text":"<p>Each civ has an icon, like the wreath for Rome, for instant identification.</p> <p>All of these icons are white on a transparent background, and are 100x100 pixels - see icon considerations for details</p> <p>You'll need to put your icon in the NationIcons folder.</p> <p>Same as with the nation name and leader name, the unique ability should also be put in the Nations translation file for bonus points =)</p> <p>Congrats, your Civ is now fully playable!</p> <p>But apart from the flavor, they are boring gameplay-wise, so now we need to add unique abilities!</p>"},{"location":"Modders/Making-a-new-Civilization/#adding-unique-units","title":"Adding unique units","text":"<p>Units in general are added in the Units.json file, with an icon in the UnitIcons folder.</p> <p>The icon must be 200x200 pixels, white on transparent background - see icon considerations for details</p> <p>Remember that these are unique units, so search for an existing unique unit to see how they replace their regular counterparts!</p>"},{"location":"Modders/Making-a-new-Civilization/#adding-unique-buildings","title":"Adding unique buildings","text":"<p>Same as the units - info is in the Buildings.json file and icons in the BuildingIcons folder, same rules for the icons apply (200x200 pixels, icon considerations)</p>"},{"location":"Modders/Making-a-new-Civilization/#civ-unique","title":"Civ Unique","text":"<p>Check out our list of uniques to see all the cool special effects you can add to your civilization!</p>"},{"location":"Modders/Making-a-new-Civilization/#icon-considerations","title":"Icon considerations","text":"<p>ALL icons must be legally acceptable, meaning they either come from from open sources or you act according to their licence (for Creative Commons, for instance, you have to specify the source and the creator).</p> <p>Icons directly from the base game belong to Firaxis, so I'm not sure we're legally allowed to use them - please use other sources!</p> <p>One source I use constantly is The Noun Project - everything there is Creative Commons or open, so they can all be used!</p> <p>Credits for icons should go in the Credits page.</p>"},{"location":"Modders/Mods/","title":"Mods","text":""},{"location":"Modders/Mods/#whats-this-about","title":"What's this about?","text":"<p>Everyone has that thing they wish could be in the game. Unfortunately, the game only understands code, so mods are our way to give a degree of freedom to those of us who don't code.</p> <p>Mods can add, replace and remove basic game definitions, such as units, nations, buildings, improvements, resources and terrains. Games loaded with these mods will function according to the mod definition.</p> <p>The game only knows how to recognize existing definitions, so you can't add new unique abilities to nations/units/buildings/etc, only play around with existing ones</p> <p>There are two kinds of mods:</p> <ul> <li>Extension mods - these add new nations/units/buildings/resources to a base ruleset - can be either to the default ruleset, or to a base ruleset mod. Easy to do and probably the better place to get started.</li> <li>Base Ruleset mods - these replace the entire existing ruleset - tech tree, units, policies, nations etc - to give an entirely different experience than the base game. These generally require quite a bit of work, but give a whole new experience, and so are the most popular.</li> </ul> <p>Creating and editing mods from your phone is NOT RECOMMENDED - it's much easier using a desktop device!</p>"},{"location":"Modders/Mods/#audiovisual-mods","title":"Audiovisual Mods","text":"<p>In addition to changing the rules - or even without doing so, mods can override existing graphics or sounds, or add music tracks. The game also has the ability to display graphics that are not included in the base game at all, such as leader portrait or wonder splash images, that must be provided by mods. For details, see Audiovisual Mods.</p> <p>Custom tilesets are closely related, see Creating a custom tileset.</p> <p>Such mods are candidates for the \"Permanent audiovisual mod\" switch available on the Mod Management Screen. Note that this feature includes graphics or sounds from the selected mod in all games, even those started before installing the mod. In case of a mod bringing both changed rules and audiovisuals, the 'permanent' feature will include only the media on all games, to use the rules you will still need to select the mod for a new game.</p>"},{"location":"Modders/Mods/#mod-names","title":"Mod names","text":"<p>Mods need to conform to github repo naming rules, but best stay simple and use only letters, digits, and dashes <code>-</code>. Dashes are automatically converted to spaces for display and use within Unciv. Many punctuation or extended unicode characters might work, but at best potential users won't find them attractive, at worst we'll refuse support when you run into problems :smiling_imp:</p>"},{"location":"Modders/Mods/#mod-components","title":"Mod components","text":"<p>Mods are located in a <code>/mods</code> directory, on Desktop that should be next to your .jar file.</p> <p>Mods typically have 2 subfolders:</p> <ul> <li>jsons - here you should put files that alter the data of game objects, the order of the files is as in the base json files. More information on these can be found here</li> <li>Images - here you should put game images, as in the base image files. Please read the atlas chapter for important details.</li> </ul> <p>In order to remove objects from the game, you'll need to create a ModOptions file in the <code>/jsons</code> subfolder - there's an example here</p> <p>In a base ruleset mod, ALL the original objects are removed - this is done by adding a <code>\"isBaseRuleset\":true</code> configuration to your modOptions file, like so</p> <p>For an example, you can refer to the example mod - just download the Example-Aliens-Mod and put it in a <code>/mods</code> folder next to the jar, run Unciv, start a new game, and you'll be able to enable the mod, which will allow to you pick Aliens as a playable civilization!</p> <p>If you want to add a new civilization as a mod, you should check out the Civ making instructions to see what's required, or see the example Aliens mod =)</p>"},{"location":"Modders/Mods/#more-on-images-and-the-texture-atlas","title":"More on Images and the texture atlas","text":"<p>Images are combined (at runtime) into texture images with an 'atlas', so if you see \"game.atlas\" and \"game.png\" files being generated, now you know what for. Most mods will need only one pair of those, the base game has around four.</p> <p>When the game runs from a packaged distribution (android, jar), the texture+atlas files alone are relevant, so you need to include them in your repository and keep them up to date. Actually omitting the original images would work for these uses, but we still recommend including them, so developers running from source can access them.</p> <p>If your mod has lots of images (or large ones), the textures might 'spill' into additional texture \".png\" files - 2048x2048 is the limit for a single texture pack. This is not good for performance, which is why the base game controls which kinds of images go together into one texture(+atlas). This works for mods, too: Create not only one Images folder, but several, the additional ones named \"Images.xyz\", where xyz will become the filename of the additional texture file (So don't use both Images and Images.game - those will clash). Look at the Unciv base game to get a better idea how that works. To minimize texture swaps, try to group them by the situation where in the game they are needed. You can distibute by folder, but having the same subfolders under several \"Images.xyz\" and distributing the images between them will also work.</p>"},{"location":"Modders/Mods/#adding-maps-to-mods","title":"Adding maps to mods","text":"<p>You can also add maps to mods, so they'll be available to players who download your mod.</p> <p>A mod can also be maps-only, if all you want to do is share your maps.</p> <p>When you've finished making your map in the Map Editor, save it, and it will be in the <code>/maps</code> folder of your game.</p> <p>Copy it to a <code>/maps</code> folder in your mod, and you're done!</p>"},{"location":"Modders/Mods/#getting-your-mod-out-there","title":"Getting your mod out there","text":"<p>In order to make your mod downloadable by anyone, you need to create a Github repository (instructions here)</p> <p>The Images and jsons folders need to be in the root directory of the repo - see here for example.</p> <p>You can then manually download the mod from within the Mod Manager in Unciv:</p> <ul> <li>From Unciv's main screen, click \"Mods\"</li> <li>Click \"Download mod from URL\", and enter the location of your Github page</li> <li>The game will automatically download and extract your mod, and it'll be ready to use!</li> </ul> <p>Once you've tested that your mod CAN be downloaded, and that it works well once downloaded, you're ready for the final stage - GETTING IT TO THE USERS AUTOMATICALLY.</p> <p>In order to do this, all you need to do is:</p> <ul> <li>Go to your Github page</li> <li>Click the gear icon next to the About (top-right part of the page)</li> <li>In 'Topics', add \"unciv-mod\"</li> </ul> <p>Optionally add one or more of the following topics to mark your mod as belonging to specific categories:</p> <ul> <li>unciv-mod-rulesets (for base ruleset mods)</li> <li>unciv-mod-expansions (for mods extending vanilla rulesets - please use this, not unciv-mod-expansion)</li> <li>unciv-mod-graphics (for mods altering graphics - icons, portraits, tilesets)</li> <li>unciv-mod-audio (for mods supplying music or modifying sounds)</li> <li>unciv-mod-maps (for mods containing maps)</li> <li>unciv-mod-fun (for mods mainly tweaking mechanics or other gameplay aspects)</li> <li>unciv-mod-modsofmods (for mods extending another mod's ruleset)</li> </ul> <p>When you open Unciv's Mod Manager, it will query Github's list of repos with that topic, and now YOUR repo will appear there! The categories will appear als annotations on the mod buttons, and the user can filter for them. They are not required for the game to use the content - e.g. you can still load maps from mods lacking the unciv-mod-maps topic. If you want new categories, github will accept any topic, but you'll have to ask the Unciv team to enable them in the game.</p> <p>If you feel there should be additional topics supported in-game, then the course of action is as follows:</p> <ul> <li>You can add topics to your repository as you please, subject to github's terms, but if you whish them to become Unciv-supported they must begin with \"unciv-mod-\".</li> <li>Once done, you can either:<ul> <li>Wait at least one release, check that your topic appeared in ModCategories.json, and open a change PR for that file, removing the \"hidden\" attribute, telling us exactly why that topic would benefit the entire community.</li> <li>Or, open an issue pointing us to your Mod with the new topics, asking us to do the above for you, again telling us why.</li> </ul> </li> </ul>"},{"location":"Modders/Mods/#i-have-the-mod-now-what","title":"I have the mod, now what?","text":"<p>The primary use of mods is to add them when starting a new game, or configuring a map. This will mean that both the ruleset of the mod, and the images, will be in use for that specific game/map.</p> <p>For mods which are primarily visual or audio, there is a second use - through the mod manager, you can enable them as permanent audiovisual mods. This means that the images and/or sounds from the mod will replace the original media everywhere in the game, and contained music will be available - see here.</p>"},{"location":"Modders/Mods/#mod-location-for-manual-loading-of-mods","title":"Mod location for manual loading of mods","text":"<p>In general, you should never be manually-loading your mods - not only is this clunky, it's also more error-prone. Unless you have a very specific use-case, you probably shouldn't be doing this.</p> <p>In Android, they should go into the <code>Android/data/com.unciv.app/files/mods</code> directory.</p> <p>In Chromebook, go to \"Play files\", should be on the sidebar on the left side of the window under \"My files\". Click the 3 vertical dots on the top right-hand corner of the window below the \"X\". If the option \"Show all Play folders\" does not have a check next to it click it. You should see some new files that appear on your screen. Now navigate to <code>Android/data/com.unciv.app/files/mods</code></p> <p>When loading a mod, it needs to be in its own folder in <code>/mods</code> - this is how you will work when you're editing your mod.</p>"},{"location":"Modders/Mods/#other","title":"Other","text":"<p>You can add an image that will be displayed to users in the mod management by adding a \"preview.jpg\" or \"preview.png\" file.</p> <p>Existing mods can be found here!</p> <p>A list of uniques and how to use them can be found here!</p> <p>Some images don't exist at all in the base game, but can be added in mods. For more info, see Audiovisual Mods.</p>"},{"location":"Modders/Unique-parameters/","title":"Unique parameters","text":"<p>This page contains an overview of all different parameters used in uniques and what values can be filled into them. Each of the different parameter types is described below, including all possible values for them. These are split into two categories:</p> <ul> <li>descriptions: e.g., \"the name of any unit\"</li> <li><code>Text that looks like this</code>. This last one must be used exactly the same</li> </ul> <p>Note that all of these are case-sensitive!</p>"},{"location":"Modders/Unique-parameters/#nationfilter","title":"nationFilter","text":"<p>Allows filtering for specific nations.</p> <ul> <li><code>All</code></li> <li><code>City-states</code></li> <li><code>Major</code></li> <li>Nation name</li> <li>A unique a Nation has (verbatim, no placeholders)</li> </ul>"},{"location":"Modders/Unique-parameters/#baseunitfilter","title":"baseUnitFilter","text":"<p>Unit filters can be divided up into two parts: <code>baseUnitFilter</code>s and <code>mapUnitFilter</code>s. The former is tested against the unit as it appears in the json. This means it doesn't have an owning civ or tile it stands on, just its base properties. The latter is tested against the unit as it appears on the map, including its nation, tile, health and all other properties.</p> <p>The following are allowed to be used:</p> <ul> <li>unit name</li> <li>unit type - e.g. Melee, Ranged, WaterSubmarine, etc.</li> <li><code>Land</code>, <code>Water</code>, <code>Air</code></li> <li><code>land units</code>, <code>water units</code>, <code>air units</code></li> <li><code>non-air</code> for non-air non-missile units</li> <li><code>Military</code>, <code>military units</code></li> <li><code>Civilian</code>, <code>civilian units</code></li> <li><code>All</code></li> <li><code>Melee</code></li> <li><code>Ranged</code></li> <li><code>Nuclear Weapon</code></li> <li><code>Great Person</code>, <code>Great</code></li> <li><code>Embarked</code></li> <li>Matching technologyfilter for the tech this unit requires - e.g. <code>Modern Era</code></li> <li>Any exact unique the unit has</li> <li>Any exact unique the unit type has</li> <li>Any combination of the above (will match only if all match). The format is <code>{filter1} {filter2}</code> and can match any number of filters. For example: <code>[{Military} {Water}]</code> units, <code>[{non-air} {Armor}]</code> units, etc. No space or other text is allowed between the <code>[</code> and the first <code>{</code>.</li> </ul>"},{"location":"Modders/Unique-parameters/#mapunitfilter","title":"mapUnitFilter","text":"<p>This indicates a unit as placed on the map. Compare with <code>baseUnitFilter</code>.</p> <ul> <li>Any matching baseUnitFilter</li> <li>Any nationFilter matching the owner</li> <li>Any unique the unit has - also includes uniques not caught by the baseUnitFilter, for example promotions</li> <li><code>Wounded</code></li> <li><code>Embarked</code></li> <li><code>City-State</code></li> <li><code>Barbarians</code>, <code>Barbarian</code></li> <li>Again, any combination of the above is also allowed, e.g. <code>[{Wounded} {Water}]</code> units.</li> </ul>"},{"location":"Modders/Unique-parameters/#buildingfilter","title":"buildingFilter","text":"<p>Allows to only activate a unique for certain buildings. Allowed options are:</p> <ul> <li><code>All</code></li> <li><code>Buildings</code>, <code>Building</code></li> <li><code>Wonders</code>, <code>Wonders</code></li> <li><code>National Wonder</code></li> <li><code>World Wonder</code> -- All wonders that are not national wonders</li> <li>building name</li> <li>The name of the building it replaces (so for example uniques for libraries will apply to paper makers as well)</li> <li>an exact unique the building has (e.g.: <code>spaceship part</code>)</li> <li><code>Culture</code>, <code>Gold</code>, etc. if the building is <code>stat-related</code> for that stat. Stat-related buildings are defined as one of the following:<ul> <li>Provides that stat directly (e.g. +1 Culture)</li> <li>Provides a percentage bonus for that stat (e.g. +10% Production)</li> <li>Provides that stat as a bonus for resources (e.g. +1 Food from every Wheat)</li> <li>Provides that stat per some amount of population (e.g. +1 Science for every 2 population [cityFilter])</li> </ul> </li> </ul>"},{"location":"Modders/Unique-parameters/#cityfilter","title":"cityFilter","text":"<p>cityFilters allow us to choose the range of cities affected by this unique:</p> <ul> <li><code>in this city</code></li> <li><code>in all cities</code></li> <li><code>in other cities</code></li> <li><code>in all coastal cities</code></li> <li><code>in capital</code></li> <li><code>in all non-occupied cities</code> - all cities that are not puppets and don't have extra unhappiness from being recently conquered</li> <li><code>in all cities with a world wonder</code></li> <li><code>in all cities connected to capital</code></li> <li><code>in all cities with a garrison</code></li> <li><code>in non-enemy foreign cities</code> - In all cities owned by civs other than you that you are not at war with</li> <li><code>in foreign cities</code></li> <li><code>in annexed cities</code></li> <li><code>in holy cities</code></li> <li><code>in City-State cities</code></li> <li><code>in cities following this religion</code> - Should only be used in pantheon/follower uniques for religions</li> <li><code>in all cities in which the majority religion is a major religion</code></li> <li><code>in all cities in which the majority religion is a enhanced religion</code></li> </ul>"},{"location":"Modders/Unique-parameters/#improvementfilter","title":"improvementFilter","text":"<p>For filtering a specific improvement.</p> <p>Allowed values are:</p> <ul> <li>improvement name (Note that \"Road\" and \"Railroad\" do work as improvementFilters, but not as tileFilters at the moment.)</li> <li><code>All</code></li> <li><code>Great Improvements</code>, <code>Great</code></li> <li><code>All Road</code> - for Roads &amp; Railroads</li> </ul>"},{"location":"Modders/Unique-parameters/#populationfilter","title":"populationFilter","text":"<p>A filter determining a part of the population of a city. It can be any of the following values:</p> <ul> <li><code>Population</code></li> <li><code>Specialists</code></li> <li><code>Unemployed</code></li> <li><code>Followers of the Majority Religion</code> or <code>Followers of this Religion</code>, both of which only apply when this religion is the majority religion in that city</li> </ul>"},{"location":"Modders/Unique-parameters/#regiontype","title":"regionType","text":"<p>Used for dividing the world into regions in each of which a single player is placed at the start of the game. Allowed values are <code>Hybrid</code> and the name of any terrain that has one of the following two uniques:</p> <ul> <li><code>A Region is formed with at least [amount]% [simpleTerrain] tiles, with priority [amount]</code></li> <li><code>A Region is formed with at least [amount]% [simpleTerrain] tiles and [simpleTerrain] tiles, with priority [amount]</code></li> </ul>"},{"location":"Modders/Unique-parameters/#simpleterrain","title":"simpleTerrain","text":"<p>Used by NaturalWonderGenerator to place natural wonders</p> <p>Allowed values are:</p> <ul> <li><code>Land</code></li> <li><code>Water</code></li> <li><code>Elevated</code></li> <li>The name of any terrain</li> </ul>"},{"location":"Modders/Unique-parameters/#stats","title":"stats","text":"<p>This indicates a text comprised of specific stats and is slightly more complex.</p> <p>Each stats is comprised of several stat changes, each in the form of <code>+{amount} {stat}</code>, where 'stat' is one of the seven major stats mentioned above. For example: <code>+1 Science</code>.</p> <p>These can be strung together with \", \" between them, for example: <code>+2 Production, +3 Food</code>.</p>"},{"location":"Modders/Unique-parameters/#technologyfilter","title":"technologyFilter","text":"<p>At the moment only implemented for ModOptions.techsToRemove.</p> <p>Allowed values are:</p> <ul> <li><code>All</code></li> <li>The name of an Era</li> <li>The name of a Technology</li> <li>A unique a Technology has (verbatim, no placeholders)</li> </ul>"},{"location":"Modders/Unique-parameters/#terrainfilter","title":"terrainFilter","text":"<p>This indicates the terrain on a single tile. The following values are allowed:</p> <ul> <li>A filter names a specific json attribute (by name):<ul> <li>Base terrain</li> <li>Terrain features</li> <li>Base terrain uniques</li> <li>Terrain feature uniques</li> <li>Resource</li> <li>Natural wonder</li> <li>A nationFilter matching the tile owner</li> </ul> </li> <li>Or the filter is a constant string choosing a derived test:<ul> <li><code>All</code></li> <li><code>Water</code>, <code>Land</code></li> <li><code>Coastal</code> (at least one direct neighbor is a coast)</li> <li><code>River</code> (as in all 'river on tile' contexts, it means 'adjacent to a river on at least one side')</li> <li><code>Open terrain</code>, <code>Rough terrain</code> (note all terrain not having the rough unique is counted as open)</li> <li><code>Friendly Land</code> - land belonging to you, or other civs with open borders to you</li> <li><code>Foreign Land</code> - any land that isn't friendly land</li> <li><code>Enemy land</code> - any land belonging to a civ you are at war with</li> <li><code>Water resource</code>, <code>Strategic resource</code>, <code>Luxury resource</code>, <code>Bonus resource</code></li> <li><code>Natural Wonder</code> (as opposed to above which means testing for a specific Natural Wonder by name, this tests for any of them)</li> </ul> </li> </ul> <p>Please note all of these are case-sensitive.</p> <p>Also note: Resource filters depend on whether a viewing civ is known in the context where the filter runs. Water and specific tests require a viewing civ, and if the resource needs a tech to be visible, that tech to be researched by the viewing civ. The other resource category tests can succeed without a known viewing civ only for resources not requiring any tech. So - test your mod!</p> <p>So for instance, the unique \"[stats] from [tileFilter] tiles [cityFilter]\" can match several cases:</p>"},{"location":"Modders/Unique-parameters/#tilefilter","title":"tileFilter","text":"<p>Any of: - terrainFilter for this tile - improvementFilter for this tile - `unimproved' if no improvement exists</p>"},{"location":"Modders/Unique-parameters/#terrainquality","title":"terrainQuality","text":"<p>Used to indicate for what use the terrain should be viewed when dividing the world into regions, in each of which a single player is placed at the start of the game.</p> <p>Allowed values are:</p> <ul> <li>improvement name (Note that \"Road\" and \"Railroad\" do work as improvementFilters, but not as tileFilters at the moment.)</li> <li>\"All\"</li> <li>\"Great Improvements\", \"Great\"</li> <li>\"All Road\" - for Roads &amp; Railroads</li> </ul>"},{"location":"Modders/uniques/","title":"Uniques","text":"<p>Simple unique parameters are explained by mouseover. Complex parameters are explained in Unique parameter types</p>"},{"location":"Modders/uniques/#triggerable-uniques","title":"Triggerable uniques","text":"Free [unit] appears <p>Example: \"Free [Musketman] appears\"</p> <p>Applicable to: Triggerable</p> [amount] free [unit] units appear <p>Example: \"[3] free [Musketman] units appear\"</p> <p>Applicable to: Triggerable</p> Free Social Policy <p>Applicable to: Triggerable</p> [amount] Free Social Policies <p>Example: \"[3] Free Social Policies\"</p> <p>Applicable to: Triggerable</p> Empire enters golden age <p>Applicable to: Triggerable</p> Empire enters a [amount]-turn Golden Age <p>Example: \"Empire enters a [3]-turn Golden Age\"</p> <p>Applicable to: Triggerable</p> Free Great Person <p>Applicable to: Triggerable</p> [amount] population [cityFilter] <p>Example: \"[3] population [in all cities]\"</p> <p>Applicable to: Triggerable</p> [amount] population in a random city <p>Example: \"[3] population in a random city\"</p> <p>Applicable to: Triggerable</p> Discover [tech] <p>Example: \"Discover [Agriculture]\"</p> <p>Applicable to: Triggerable</p> Adopt [policy] <p>Example: \"Adopt [Oligarchy]\"</p> <p>Applicable to: Triggerable</p> Free Technology <p>Applicable to: Triggerable</p> [amount] Free Technologies <p>Example: \"[3] Free Technologies\"</p> <p>Applicable to: Triggerable</p> [amount] free random researchable Tech(s) from the [era] <p>Example: \"[3] free random researchable Tech(s) from the [Ancient era]\"</p> <p>Applicable to: Triggerable</p> Reveals the entire map <p>Applicable to: Triggerable</p> Gain a free [beliefType] belief <p>Example: \"Gain a free [Follower] belief\"</p> <p>Applicable to: Triggerable</p> Triggers voting for the Diplomatic Victory <p>Applicable to: Triggerable</p> Instantly consumes [amount] [stockpiledResource] <p>Example: \"Instantly consumes [3] [StockpiledResource]\"</p> <p>Applicable to: Triggerable</p> Instantly provides [amount] [stockpiledResource] <p>Example: \"Instantly provides [3] [StockpiledResource]\"</p> <p>Applicable to: Triggerable</p> Gain [amount] [stat/resource] <p>Example: \"Gain [3] [Culture]\"</p> <p>Applicable to: Triggerable</p> Gain [amount]-[amount] [stat] <p>Example: \"Gain [3]-[3] [Culture]\"</p> <p>Applicable to: Triggerable</p> Gain enough Faith for a Pantheon <p>Applicable to: Triggerable</p> Gain enough Faith for [amount]% of a Great Prophet <p>Example: \"Gain enough Faith for [3]% of a Great Prophet\"</p> <p>Applicable to: Triggerable</p> Reveal up to [amount/'all'] [tileFilter] within a [amount] tile radius <p>Example: \"Reveal up to [3] [Farm] within a [3] tile radius\"</p> <p>Applicable to: Triggerable</p> Triggers the following global alert: [comment] <p>Example: \"Triggers the following global alert: [comment]\"</p> <p>Applicable to: Triggerable</p> [mapUnitFilter] units gain the [promotion] promotion <p>Example: \"[Wounded] units gain the [Shock I] promotion\"</p> <p>Applicable to: Triggerable</p> Provides the cheapest [stat] building in your first [amount] cities for free <p>Example: \"Provides the cheapest [Culture] building in your first [3] cities for free\"</p> <p>Applicable to: Triggerable</p> Provides a [buildingName] in your first [amount] cities for free <p>Example: \"Provides a [Library] in your first [3] cities for free\"</p> <p>Applicable to: Triggerable</p>"},{"location":"Modders/uniques/#unittriggerable-uniques","title":"UnitTriggerable uniques","text":"Heal this unit by [amount] HP <p>Example: \"Heal this unit by [3] HP\"</p> <p>Applicable to: UnitTriggerable</p> This Unit gains [amount] XP <p>Example: \"This Unit gains [3] XP\"</p> <p>Applicable to: UnitTriggerable</p> This Unit upgrades for free <p>Applicable to: UnitTriggerable</p> This Unit upgrades for free including special upgrades <p>Applicable to: UnitTriggerable</p> This Unit gains the [promotion] promotion <p>Example: \"This Unit gains the [Shock I] promotion\"</p> <p>Applicable to: UnitTriggerable</p>"},{"location":"Modders/uniques/#global-uniques","title":"Global uniques","text":"[stats] <p>Example: \"[+1 Gold, +2 Production]\"</p> <p>Applicable to: Global, FollowerBelief, Terrain, Improvement</p> [stats] [cityFilter] <p>Example: \"[+1 Gold, +2 Production] [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [stats] from every specialist [cityFilter] <p>Example: \"[+1 Gold, +2 Production] from every specialist [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [stats] per [amount] population [cityFilter] <p>Example: \"[+1 Gold, +2 Production] per [3] population [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [stats] per [amount] social policies adopted <p>Example: \"[+1 Gold, +2 Production] per [3] social policies adopted\"</p> <p>Applicable to: Global</p> [stats] in cities on [terrainFilter] tiles <p>Example: \"[+1 Gold, +2 Production] in cities on [Fresh Water] tiles\"</p> <p>Applicable to: Global, FollowerBelief</p> [stats] from all [buildingFilter] buildings <p>Example: \"[+1 Gold, +2 Production] from all [Culture] buildings\"</p> <p>Applicable to: Global, FollowerBelief</p> [stats] from [tileFilter] tiles [cityFilter] <p>Example: \"[+1 Gold, +2 Production] from [Farm] tiles [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [stats] from [tileFilter] tiles without [tileFilter] [cityFilter] <p>Example: \"[+1 Gold, +2 Production] from [Farm] tiles without [Farm] [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [stats] from every [tileFilter/specialist/buildingFilter] <p>Example: \"[+1 Gold, +2 Production] from every [Farm]\"</p> <p>Applicable to: Global, FollowerBelief</p> [stats] from each Trade Route <p>Example: \"[+1 Gold, +2 Production] from each Trade Route\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% [stat] <p>Example: \"[+20]% [Culture]\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% [stat] [cityFilter] <p>Example: \"[+20]% [Culture] [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% [stat] from every [tileFilter/buildingFilter] <p>Example: \"[+20]% [Culture] from every [Farm]\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% Yield from every [tileFilter/buildingFilter] <p>Example: \"[+20]% Yield from every [Farm]\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% [stat] from City-States <p>Example: \"[+20]% [Culture] from City-States\"</p> <p>Applicable to: Global</p> [relativeAmount]% [stat] from Trade Routes <p>Example: \"[+20]% [Culture] from Trade Routes\"</p> <p>Applicable to: Global</p> Nullifies [stat] [cityFilter] <p>Example: \"Nullifies [Culture] [in all cities]\"</p> <p>Applicable to: Global</p> Nullifies Growth [cityFilter] <p>Example: \"Nullifies Growth [in all cities]\"</p> <p>Applicable to: Global</p> [relativeAmount]% Production when constructing [buildingFilter] buildings [cityFilter] <p>Example: \"[+20]% Production when constructing [Culture] buildings [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% Production when constructing [baseUnitFilter] units [cityFilter] <p>Example: \"[+20]% Production when constructing [Melee] units [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% Production when constructing [buildingFilter] wonders [cityFilter] <p>Example: \"[+20]% Production when constructing [Culture] wonders [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% Production towards any buildings that already exist in the Capital <p>Example: \"[+20]% Production towards any buildings that already exist in the Capital\"</p> <p>Applicable to: Global, FollowerBelief</p> Military Units gifted from City-States start with [amount] XP <p>Example: \"Military Units gifted from City-States start with [3] XP\"</p> <p>Applicable to: Global</p> Militaristic City-States grant units [amount] times as fast when you are at war with a common nation <p>Example: \"Militaristic City-States grant units [3] times as fast when you are at war with a common nation\"</p> <p>Applicable to: Global</p> Gifts of Gold to City-States generate [relativeAmount]% more Influence <p>Example: \"Gifts of Gold to City-States generate [+20]% more Influence\"</p> <p>Applicable to: Global</p> Can spend Gold to annex or puppet a City-State that has been your ally for [amount] turns. <p>Example: \"Can spend Gold to annex or puppet a City-State that has been your ally for [3] turns.\"</p> <p>Applicable to: Global</p> City-State territory always counts as friendly territory <p>Applicable to: Global</p> Allied City-States will occasionally gift Great People <p>Applicable to: Global</p> [relativeAmount]% City-State Influence degradation <p>Example: \"[+20]% City-State Influence degradation\"</p> <p>Applicable to: Global</p> Resting point for Influence with City-States is increased by [amount] <p>Example: \"Resting point for Influence with City-States is increased by [3]\"</p> <p>Applicable to: Global</p> Allied City-States provide [stat] equal to [relativeAmount]% of what they produce for themselves <p>Example: \"Allied City-States provide [Culture] equal to [+20]% of what they produce for themselves\"</p> <p>Applicable to: Global</p> [relativeAmount]% resources gifted by City-States <p>Example: \"[+20]% resources gifted by City-States\"</p> <p>Applicable to: Global</p> [relativeAmount]% Happiness from luxury resources gifted by City-States <p>Example: \"[+20]% Happiness from luxury resources gifted by City-States\"</p> <p>Applicable to: Global</p> City-State Influence recovers at twice the normal rate <p>Applicable to: Global</p> [relativeAmount]% growth [cityFilter] <p>Example: \"[+20]% growth [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [amount]% Food is carried over after population increases [cityFilter] <p>Example: \"[3]% Food is carried over after population increases [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% Food consumption by specialists [cityFilter] <p>Example: \"[+20]% Food consumption by specialists [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> Unhappiness from number of Cities doubled <p>Applicable to: Global</p> [relativeAmount]% Unhappiness from [populationFilter] [cityFilter] <p>Example: \"[+20]% Unhappiness from [Followers of this Religion] [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% of excess happiness converted to [stat] <p>Example: \"[+20]% of excess happiness converted to [Culture]\"</p> <p>Applicable to: Global</p> Retain [relativeAmount]% of the happiness from a luxury after the last copy has been traded away <p>Example: \"Retain [+20]% of the happiness from a luxury after the last copy has been traded away\"</p> <p>Applicable to: Global</p> [amount] Happiness from each type of luxury resource <p>Example: \"[3] Happiness from each type of luxury resource\"</p> <p>Applicable to: Global</p> Cannot build [baseUnitFilter] units <p>Example: \"Cannot build [Melee] units\"</p> <p>Applicable to: Global</p> Enables construction of Spaceship parts <p>Applicable to: Global</p> May buy [baseUnitFilter] units for [amount] [stat] [cityFilter] at an increasing price ([amount]) <p>Example: \"May buy [Melee] units for [3] [Culture] [in all cities] at an increasing price ([3])\"</p> <p>Applicable to: Global, FollowerBelief</p> May buy [buildingFilter] buildings for [amount] [stat] [cityFilter] at an increasing price ([amount]) <p>Example: \"May buy [Culture] buildings for [3] [Culture] [in all cities] at an increasing price ([3])\"</p> <p>Applicable to: Global, FollowerBelief</p> May buy [baseUnitFilter] units for [amount] [stat] [cityFilter] <p>Example: \"May buy [Melee] units for [3] [Culture] [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> May buy [buildingFilter] buildings for [amount] [stat] [cityFilter] <p>Example: \"May buy [Culture] buildings for [3] [Culture] [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> May buy [baseUnitFilter] units with [stat] [cityFilter] <p>Example: \"May buy [Melee] units with [Culture] [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> May buy [buildingFilter] buildings with [stat] [cityFilter] <p>Example: \"May buy [Culture] buildings with [Culture] [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> May buy [baseUnitFilter] units with [stat] for [amount] times their normal Production cost <p>Example: \"May buy [Melee] units with [Culture] for [3] times their normal Production cost\"</p> <p>Applicable to: Global, FollowerBelief</p> May buy [buildingFilter] buildings with [stat] for [amount] times their normal Production cost <p>Example: \"May buy [Culture] buildings with [Culture] for [3] times their normal Production cost\"</p> <p>Applicable to: Global, FollowerBelief</p> [stat] cost of purchasing items in cities [relativeAmount]% <p>Example: \"[Culture] cost of purchasing items in cities [+20]%\"</p> <p>Applicable to: Global, FollowerBelief</p> [stat] cost of purchasing [buildingFilter] buildings [relativeAmount]% <p>Example: \"[Culture] cost of purchasing [Culture] buildings [+20]%\"</p> <p>Applicable to: Global, FollowerBelief</p> [stat] cost of purchasing [baseUnitFilter] units [relativeAmount]% <p>Example: \"[Culture] cost of purchasing [Melee] units [+20]%\"</p> <p>Applicable to: Global, FollowerBelief</p> Enables conversion of city production to [civWideStat] <p>Example: \"Enables conversion of city production to [Gold]\"</p> <p>Applicable to: Global</p> Production to [civWideStat] conversion in cities changed by [relativeAmount]% <p>Example: \"Production to [Gold] conversion in cities changed by [+20]%\"</p> <p>Applicable to: Global</p> Improves movement speed on roads <p>Applicable to: Global</p> Roads connect tiles across rivers <p>Applicable to: Global</p> [relativeAmount]% maintenance on road &amp; railroads <p>Example: \"[+20]% maintenance on road &amp; railroads\"</p> <p>Applicable to: Global</p> No Maintenance costs for improvements in [tileFilter] tiles <p>Example: \"No Maintenance costs for improvements in [Farm] tiles\"</p> <p>Applicable to: Global</p> [relativeAmount]% tile improvement construction time <p>Example: \"[+20]% tile improvement construction time\"</p> <p>Applicable to: Global, Unit</p> Gain a free [buildingName] [cityFilter] <p>Example: \"Gain a free [Library] [in all cities]\"</p> <p>Applicable to: Global</p> [relativeAmount]% maintenance cost for buildings [cityFilter] <p>Example: \"[+20]% maintenance cost for buildings [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% Culture cost of natural border growth [cityFilter] <p>Example: \"[+20]% Culture cost of natural border growth [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% Gold cost of acquiring tiles [cityFilter] <p>Example: \"[+20]% Gold cost of acquiring tiles [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> Each city founded increases culture cost of policies [relativeAmount]% less than normal <p>Example: \"Each city founded increases culture cost of policies [+20]% less than normal\"</p> <p>Applicable to: Global</p> [relativeAmount]% Culture cost of adopting new Policies <p>Example: \"[+20]% Culture cost of adopting new Policies\"</p> <p>Applicable to: Global</p> [stats] for every known Natural Wonder <p>Example: \"[+1 Gold, +2 Production] for every known Natural Wonder\"</p> <p>Applicable to: Global</p> 100 Gold for discovering a Natural Wonder (bonus enhanced to 500 Gold if first to discover it) <p>Applicable to: Global</p> [relativeAmount]% Great Person generation [cityFilter] <p>Example: \"[+20]% Great Person generation [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> Provides a sum of gold each time you spend a Great Person <p>Applicable to: Global</p> [stats] whenever a Great Person is expended <p>Example: \"[+1 Gold, +2 Production] whenever a Great Person is expended\"</p> <p>Applicable to: Global</p> [relativeAmount]% Gold from Great Merchant trade missions <p>Example: \"[+20]% Gold from Great Merchant trade missions\"</p> <p>Applicable to: Global</p> Great General provides double combat bonus <p>Applicable to: Global, Unit</p> Receive a free Great Person at the end of every [comment] (every 394 years), after researching [tech]. Each bonus person can only be chosen once. <p>Example: \"Receive a free Great Person at the end of every [comment] (every 394 years), after researching [Agriculture]. Each bonus person can only be chosen once.\"</p> <p>Applicable to: Global</p> Once The Long Count activates, the year on the world screen displays as the traditional Mayan Long Count. <p>Applicable to: Global</p> [amount] Unit Supply <p>Example: \"[3] Unit Supply\"</p> <p>Applicable to: Global</p> [amount] Unit Supply per [amount] population [cityFilter] <p>Example: \"[3] Unit Supply per [3] population [in all cities]\"</p> <p>Applicable to: Global</p> [amount] Unit Supply per city <p>Example: \"[3] Unit Supply per city\"</p> <p>Applicable to: Global</p> [amount] units cost no maintenance <p>Example: \"[3] units cost no maintenance\"</p> <p>Applicable to: Global</p> Units in cities cost no Maintenance <p>Applicable to: Global</p> Receive free [unit] when you discover [tech] <p>Example: \"Receive free [Musketman] when you discover [Agriculture]\"</p> <p>Applicable to: Global</p> Enables embarkation for land units <p>Applicable to: Global</p> Enables [mapUnitFilter] units to enter ocean tiles <p>Example: \"Enables [Wounded] units to enter ocean tiles\"</p> <p>Applicable to: Global</p> Land units may cross [terrainName] tiles after the first [baseUnitFilter] is earned <p>Example: \"Land units may cross [Forest] tiles after the first [Melee] is earned\"</p> <p>Applicable to: Global</p> Enemy [mapUnitFilter] units must spend [amount] extra movement points when inside your territory <p>Example: \"Enemy [Wounded] units must spend [3] extra movement points when inside your territory\"</p> <p>Applicable to: Global</p> New [baseUnitFilter] units start with [amount] Experience [cityFilter] <p>Example: \"New [Melee] units start with [3] Experience [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> All newly-trained [baseUnitFilter] units [cityFilter] receive the [promotion] promotion <p>Example: \"All newly-trained [Melee] units [in all cities] receive the [Shock I] promotion\"</p> <p>Applicable to: Global, FollowerBelief</p> [mapUnitFilter] Units adjacent to this city heal [amount] HP per turn when healing <p>Example: \"[Wounded] Units adjacent to this city heal [3] HP per turn when healing\"</p> <p>Applicable to: Global, FollowerBelief</p> [relativeAmount]% City Strength from defensive buildings <p>Example: \"[+20]% City Strength from defensive buildings\"</p> <p>Applicable to: Global</p> [relativeAmount]% Strength for cities <p>Example: \"[+20]% Strength for cities\"</p> <p>Applicable to: Global, FollowerBelief</p> Provides [amount] [resource] <p>Example: \"Provides [3] [Iron]\"</p> <p>Applicable to: Global, Improvement</p> Quantity of strategic resources produced by the empire +[relativeAmount]% <p>Example: \"Quantity of strategic resources produced by the empire +[+20]%\"</p> <p>Applicable to: Global</p> Double quantity of [resource] produced <p>Example: \"Double quantity of [Iron] produced\"</p> <p>Applicable to: Global</p> Enables Open Borders agreements <p>Applicable to: Global</p> Enables Research agreements <p>Applicable to: Global</p> Science gained from research agreements [relativeAmount]% <p>Example: \"Science gained from research agreements [+20]%\"</p> <p>Applicable to: Global</p> When declaring friendship, both parties gain a [relativeAmount]% boost to great person generation <p>Example: \"When declaring friendship, both parties gain a [+20]% boost to great person generation\"</p> <p>Applicable to: Global</p> Influence of all other civilizations with all city-states degrades [relativeAmount]% faster <p>Example: \"Influence of all other civilizations with all city-states degrades [+20]% faster\"</p> <p>Applicable to: Global</p> Gain [amount] Influence with a [baseUnitFilter] gift to a City-State <p>Example: \"Gain [3] Influence with a [Melee] gift to a City-State\"</p> <p>Applicable to: Global</p> Resting point for Influence with City-States following this religion [amount] <p>Example: \"Resting point for Influence with City-States following this religion [3]\"</p> <p>Applicable to: Global</p> Notified of new Barbarian encampments <p>Applicable to: Global</p> Receive triple Gold from Barbarian encampments and pillaging Cities <p>Applicable to: Global</p> When conquering an encampment, earn [amount] Gold and recruit a Barbarian unit <p>Example: \"When conquering an encampment, earn [3] Gold and recruit a Barbarian unit\"</p> <p>Applicable to: Global</p> When defeating a [mapUnitFilter] unit, earn [amount] Gold and recruit it <p>Example: \"When defeating a [Wounded] unit, earn [3] Gold and recruit it\"</p> <p>Applicable to: Global</p> May choose [amount] additional [beliefType] beliefs when [foundingOrEnhancing] a religion <p>Example: \"May choose [3] additional [Follower] beliefs when [founding] a religion\"</p> <p>Applicable to: Global</p> May choose [amount] additional belief(s) of any type when [foundingOrEnhancing] a religion <p>Example: \"May choose [3] additional belief(s) of any type when [founding] a religion\"</p> <p>Applicable to: Global</p> [stats] when a city adopts this religion for the first time (modified by game speed) <p>Example: \"[+1 Gold, +2 Production] when a city adopts this religion for the first time (modified by game speed)\"</p> <p>Applicable to: Global</p> [stats] when a city adopts this religion for the first time <p>Example: \"[+1 Gold, +2 Production] when a city adopts this religion for the first time\"</p> <p>Applicable to: Global</p> [relativeAmount]% Natural religion spread [cityFilter] <p>Example: \"[+20]% Natural religion spread [in all cities]\"</p> <p>Applicable to: Global, FollowerBelief</p> Religion naturally spreads to cities [amount] tiles away <p>Example: \"Religion naturally spreads to cities [3] tiles away\"</p> <p>Applicable to: Global, FollowerBelief</p> May not generate great prophet equivalents naturally <p>Applicable to: Global</p> [relativeAmount]% Faith cost of generating Great Prophet equivalents <p>Example: \"[+20]% Faith cost of generating Great Prophet equivalents\"</p> <p>Applicable to: Global</p> [baseUnitFilter] units built [cityFilter] can [action] [amount] extra times <p>Example: \"[Melee] units built [in all cities] can [Spread Religion] [3] extra times\"</p> <p>Applicable to: Global, FollowerBelief</p> Triggers victory <p>Applicable to: Global</p> Triggers a Cultural Victory upon completion <p>Applicable to: Global</p> May not annex cities <p>Applicable to: Global</p> \"Borrows\" city names from other civilizations in the game <p>Applicable to: Global</p> Cities are razed [amount] times as fast <p>Example: \"Cities are razed [3] times as fast\"</p> <p>Applicable to: Global</p> Receive a tech boost when scientific buildings/wonders are built in capital <p>Applicable to: Global</p> [relativeAmount]% Golden Age length <p>Example: \"[+20]% Golden Age length\"</p> <p>Applicable to: Global</p> Population loss from nuclear attacks [relativeAmount]% [cityFilter] <p>Example: \"Population loss from nuclear attacks [+20]% [in all cities]\"</p> <p>Applicable to: Global</p> Rebel units may spawn <p>Applicable to: Global</p> [relativeAmount]% Strength <p>Example: \"[+20]% Strength\"</p> <p>Applicable to: Global, Unit</p> [relativeAmount]% Strength decreasing with distance from the capital <p>Example: \"[+20]% Strength decreasing with distance from the capital\"</p> <p>Applicable to: Global, Unit</p> [relativeAmount]% to Flank Attack bonuses <p>Example: \"[+20]% to Flank Attack bonuses\"</p> <p>Applicable to: Global, Unit</p> +30% Strength when fighting City-State units and cities <p>Applicable to: Global</p> [amount] additional attacks per turn <p>Example: \"[3] additional attacks per turn\"</p> <p>Applicable to: Global, Unit</p> [amount] Movement <p>Example: \"[3] Movement\"</p> <p>Applicable to: Global, Unit</p> [amount] Sight <p>Example: \"[3] Sight\"</p> <p>Applicable to: Global, Unit, Terrain</p> [amount] Range <p>Example: \"[3] Range\"</p> <p>Applicable to: Global, Unit</p> [amount] HP when healing <p>Example: \"[3] HP when healing\"</p> <p>Applicable to: Global, Unit</p> [relativeAmount]% Spread Religion Strength <p>Example: \"[+20]% Spread Religion Strength\"</p> <p>Applicable to: Global, Unit</p> When spreading religion to a city, gain [amount] times the amount of followers of other religions as [stat] <p>Example: \"When spreading religion to a city, gain [3] times the amount of followers of other religions as [Culture]\"</p> <p>Applicable to: Global, Unit</p> No defensive terrain bonus <p>Applicable to: Global, Unit</p> No defensive terrain penalty <p>Applicable to: Global, Unit</p> Damage is ignored when determining unit Strength <p>Applicable to: Global, Unit</p> No movement cost to pillage <p>Applicable to: Global, Unit</p> May heal outside of friendly territory <p>Applicable to: Global, Unit</p> All healing effects doubled <p>Applicable to: Global, Unit</p> Heals [amount] damage if it kills a unit <p>Example: \"Heals [3] damage if it kills a unit\"</p> <p>Applicable to: Global, Unit</p> Can only heal by pillaging <p>Applicable to: Global, Unit</p> Defense bonus when embarked <p>Applicable to: Global, Unit</p> [relativeAmount]% maintenance costs <p>Example: \"[+20]% maintenance costs\"</p> <p>Applicable to: Global, Unit</p> [relativeAmount]% Gold cost of upgrading <p>Example: \"[+20]% Gold cost of upgrading\"</p> <p>Applicable to: Global, Unit</p> Earn [amount]% of the damage done to [combatantFilter] units as [civWideStat] <p>Example: \"Earn [3]% of the damage done to [City] units as [Gold]\"</p> <p>Applicable to: Global, Unit</p> Upon capturing a city, receive [amount] times its [stat] production as [civWideStat] immediately <p>Example: \"Upon capturing a city, receive [3] times its [Culture] production as [Gold] immediately\"</p> <p>Applicable to: Global, Unit</p> Earn [amount]% of killed [mapUnitFilter] unit's [costOrStrength] as [civWideStat] <p>Example: \"Earn [3]% of killed [Wounded] unit's [Cost] as [Gold]\"</p> <p>Applicable to: Global, Unit</p> [amount] XP gained from combat <p>Example: \"[3] XP gained from combat\"</p> <p>Applicable to: Global, Unit</p> [relativeAmount]% XP gained from combat <p>Example: \"[+20]% XP gained from combat\"</p> <p>Applicable to: Global, Unit</p> [greatPerson] is earned [relativeAmount]% faster <p>Example: \"[Great General] is earned [+20]% faster\"</p> <p>Applicable to: Global, Unit</p> [amount] Movement point cost to disembark <p>Example: \"[3] Movement point cost to disembark\"</p> <p>Applicable to: Global, Unit</p> [amount] Movement point cost to embark <p>Example: \"[3] Movement point cost to embark\"</p> <p>Applicable to: Global, Unit</p>"},{"location":"Modders/uniques/#nation-uniques","title":"Nation uniques","text":"Will not be chosen for new games <p>Applicable to: Nation</p> Starts with [tech] <p>Example: \"Starts with [Agriculture]\"</p> <p>Applicable to: Nation</p> Starts with [policy] adopted <p>Example: \"Starts with [Oligarchy] adopted\"</p> <p>Applicable to: Nation</p> Will not be displayed in Civilopedia <p>Applicable to: Nation, Tech, Policy, Building, Unit, UnitType, Promotion, Terrain, Improvement, Resource, Ruins</p>"},{"location":"Modders/uniques/#era-uniques","title":"Era uniques","text":"Starting in this era disables religion <p>Applicable to: Era</p> Every major Civilization gains a spy once a civilization enters this era <p>Applicable to: Era</p>"},{"location":"Modders/uniques/#tech-uniques","title":"Tech uniques","text":"Starting tech <p>Applicable to: Tech</p> Can be continually researched <p>Applicable to: Tech</p> Only available <p>Applicable to: Tech, Policy, FounderBelief, FollowerBelief, Building, Unit, Promotion, Improvement, Ruins</p> Cannot be hurried <p>Applicable to: Tech, Building</p>"},{"location":"Modders/uniques/#founderbelief-uniques","title":"FounderBelief uniques","text":"[stats] for each global city following this religion <p>Example: \"[+1 Gold, +2 Production] for each global city following this religion\"</p> <p>Applicable to: FounderBelief</p> [stats] from every [amount] global followers [cityFilter] <p>Example: \"[+1 Gold, +2 Production] from every [3] global followers [in all cities]\"</p> <p>Applicable to: FounderBelief</p>"},{"location":"Modders/uniques/#followerbelief-uniques","title":"FollowerBelief uniques","text":"[relativeAmount]% [stat] from every follower, up to [relativeAmount]% <p>Example: \"[+20]% [Culture] from every follower, up to [+20]%\"</p> <p>Applicable to: FollowerBelief</p> Earn [amount]% of [mapUnitFilter] unit's [costOrStrength] as [civWideStat] when killed within 4 tiles of a city following this religion <p>Example: \"Earn [3]% of [Wounded] unit's [Cost] as [Gold] when killed within 4 tiles of a city following this religion\"</p> <p>Applicable to: FollowerBelief</p>"},{"location":"Modders/uniques/#building-uniques","title":"Building uniques","text":"Consumes [amount] [resource] <p>Example: \"Consumes [3] [Iron]\"</p> <p>Applicable to: Building, Unit, Improvement</p> Costs [amount] [stockpiledResource] <p>Example: \"Costs [3] [StockpiledResource]\"</p> <p>Applicable to: Building, Unit, Improvement</p> Unbuildable <p>Applicable to: Building, Unit, Improvement</p> Cannot be purchased <p>Applicable to: Building, Unit</p> Can be purchased with [stat] [cityFilter] <p>Example: \"Can be purchased with [Culture] [in all cities]\"</p> <p>Applicable to: Building, Unit</p> Can be purchased for [amount] [stat] [cityFilter] <p>Example: \"Can be purchased for [3] [Culture] [in all cities]\"</p> <p>Applicable to: Building, Unit</p> Limited to [amount] per Civilization <p>Example: \"Limited to [3] per Civilization\"</p> <p>Applicable to: Building, Unit</p> Hidden until [amount] social policy branches have been completed <p>Example: \"Hidden until [3] social policy branches have been completed\"</p> <p>Applicable to: Building, Unit</p> Excess Food converted to Production when under construction <p>Applicable to: Building, Unit</p> Requires at least [amount] population <p>Example: \"Requires at least [3] population\"</p> <p>Applicable to: Building, Unit</p> Triggers a global alert upon build start <p>Applicable to: Building, Unit</p> Triggers a global alert upon completion <p>Applicable to: Building, Unit</p> Cost increases by [amount] per owned city <p>Example: \"Cost increases by [3] per owned city\"</p> <p>Applicable to: Building</p> Requires a [buildingFilter] in all cities <p>Example: \"Requires a [Culture] in all cities\"</p> <p>Applicable to: Building</p> Requires a [buildingFilter] in at least [amount] cities <p>Example: \"Requires a [Culture] in at least [3] cities\"</p> <p>Applicable to: Building</p> Can only be built [cityFilter] <p>Example: \"Can only be built [in all cities]\"</p> <p>Applicable to: Building</p> Must have an owned [tileFilter] within [amount] tiles <p>Example: \"Must have an owned [Farm] within [3] tiles\"</p> <p>Applicable to: Building</p> Enables nuclear weapon <p>Applicable to: Building</p> Must be on [tileFilter] <p>Example: \"Must be on [Farm]\"</p> <p>Applicable to: Building</p> Must not be on [tileFilter] <p>Example: \"Must not be on [Farm]\"</p> <p>Applicable to: Building</p> Must be next to [tileFilter] <p>Example: \"Must be next to [Farm]\"</p> <p>Applicable to: Building, Improvement</p> Must not be next to [tileFilter] <p>Example: \"Must not be next to [Farm]\"</p> <p>Applicable to: Building</p> Unsellable <p>Applicable to: Building</p> Obsolete with [tech] <p>Example: \"Obsolete with [Agriculture]\"</p> <p>Applicable to: Building, Improvement, Resource</p> Indicates the capital city <p>Applicable to: Building</p> Provides 1 extra copy of each improved luxury resource near this City <p>Applicable to: Building</p> Destroyed when the city is captured <p>Applicable to: Building</p> Never destroyed when the city is captured <p>Applicable to: Building</p> Doubles Gold given to enemy if city is captured <p>Applicable to: Building</p> Remove extra unhappiness from annexed cities <p>Applicable to: Building</p> Connects trade routes over water <p>Applicable to: Building</p> Automatically built in all cities where it is buildable <p>Applicable to: Building</p> Creates a [improvementName] improvement on a specific tile <p>Example: \"Creates a [Trading Post] improvement on a specific tile\"</p> <p>Applicable to: Building</p> Spaceship part <p>Applicable to: Building, Unit</p> Hidden when religion is disabled <p>Applicable to: Building, Unit, Ruins</p> Hidden when [victoryType] Victory is disabled <p>Example: \"Hidden when [Domination] Victory is disabled\"</p> <p>Applicable to: Building, Unit</p>"},{"location":"Modders/uniques/#unit-uniques","title":"Unit uniques","text":"Founds a new city <p>Applicable to: Unit</p> Can instantly construct a [improvementFilter] improvement <p>Example: \"Can instantly construct a [All Road] improvement\"</p> <p>Applicable to: Unit</p> Can build [improvementFilter/terrainFilter] improvements on tiles <p>Example: \"Can build [All Road] improvements on tiles\"</p> <p>Applicable to: Unit</p> May create improvements on water resources <p>Applicable to: Unit</p> May found a religion <p>Applicable to: Unit</p> May enhance a religion <p>Applicable to: Unit</p> Can be added to [comment] in the Capital <p>Example: \"Can be added to [comment] in the Capital\"</p> <p>Applicable to: Unit</p> Prevents spreading of religion to the city it is next to <p>Applicable to: Unit</p> Removes other religions when spreading religion <p>Applicable to: Unit</p> May Paradrop up to [amount] tiles from inside friendly territory <p>Example: \"May Paradrop up to [3] tiles from inside friendly territory\"</p> <p>Applicable to: Unit</p> Can perform Air Sweep <p>Applicable to: Unit</p> Can [action] [amount] times <p>Example: \"Can [Spread Religion] [3] times\"</p> <p>Applicable to: Unit</p> Can speed up construction of a building <p>Applicable to: Unit</p> Can speed up the construction of a wonder <p>Applicable to: Unit</p> Can hurry technology research <p>Applicable to: Unit</p> Can undertake a trade mission with City-State, giving a large sum of gold and [amount] Influence <p>Example: \"Can undertake a trade mission with City-State, giving a large sum of gold and [3] Influence\"</p> <p>Applicable to: Unit</p> Can transform to [unit] <p>Example: \"Can transform to [Musketman]\"</p> <p>Applicable to: Unit</p> Automation is a primary action <p>Applicable to: Unit</p> [relativeAmount]% Strength for enemy [combatantFilter] units in adjacent [tileFilter] tiles <p>Example: \"[+20]% Strength for enemy [City] units in adjacent [Farm] tiles\"</p> <p>Applicable to: Unit</p> [relativeAmount]% Strength when stacked with [mapUnitFilter] <p>Example: \"[+20]% Strength when stacked with [Wounded]\"</p> <p>Applicable to: Unit</p> [relativeAmount]% Strength bonus for [mapUnitFilter] units within [amount] tiles <p>Example: \"[+20]% Strength bonus for [Wounded] units within [3] tiles\"</p> <p>Applicable to: Unit</p> Can only attack [combatantFilter] units <p>Example: \"Can only attack [City] units\"</p> <p>Applicable to: Unit</p> Can only attack [tileFilter] tiles <p>Example: \"Can only attack [Farm] tiles\"</p> <p>Applicable to: Unit</p> Cannot attack <p>Applicable to: Unit</p> Must set up to ranged attack <p>Applicable to: Unit</p> Self-destructs when attacking <p>Applicable to: Unit</p> Eliminates combat penalty for attacking across a coast <p>Applicable to: Unit</p> May attack when embarked <p>Applicable to: Unit</p> Eliminates combat penalty for attacking over a river <p>Applicable to: Unit</p> Blast radius [amount] <p>Example: \"Blast radius [3]\"</p> <p>Applicable to: Unit</p> Ranged attacks may be performed over obstacles <p>Applicable to: Unit</p> Nuclear weapon of Strength [amount] <p>Example: \"Nuclear weapon of Strength [3]\"</p> <p>Applicable to: Unit</p> Uncapturable <p>Applicable to: Unit</p> May withdraw before melee ([amount]%) <p>Example: \"May withdraw before melee ([3]%)\"</p> <p>Applicable to: Unit</p> Unable to capture cities <p>Applicable to: Unit</p> Can move after attacking <p>Applicable to: Unit</p> Transfer Movement to [mapUnitFilter] <p>Example: \"Transfer Movement to [Wounded]\"</p> <p>Applicable to: Unit</p> Can move immediately once bought <p>Applicable to: Unit</p> Unit will heal every turn, even if it performs an action <p>Applicable to: Unit</p> All adjacent units heal [amount] HP when healing <p>Example: \"All adjacent units heal [3] HP when healing\"</p> <p>Applicable to: Unit</p> No Sight <p>Applicable to: Unit</p> Can see over obstacles <p>Applicable to: Unit</p> Can carry [amount] [mapUnitFilter] units <p>Example: \"Can carry [3] [Wounded] units\"</p> <p>Applicable to: Unit</p> Can carry [amount] extra [mapUnitFilter] units <p>Example: \"Can carry [3] extra [Wounded] units\"</p> <p>Applicable to: Unit</p> Cannot be carried by [mapUnitFilter] units <p>Example: \"Cannot be carried by [Wounded] units\"</p> <p>Applicable to: Unit</p> [relativeAmount]% chance to intercept air attacks <p>Example: \"[+20]% chance to intercept air attacks\"</p> <p>Applicable to: Unit</p> Damage taken from interception reduced by [relativeAmount]% <p>Example: \"Damage taken from interception reduced by [+20]%\"</p> <p>Applicable to: Unit</p> [relativeAmount]% Damage when intercepting <p>Example: \"[+20]% Damage when intercepting\"</p> <p>Applicable to: Unit</p> [amount] extra interceptions may be made per turn <p>Example: \"[3] extra interceptions may be made per turn\"</p> <p>Applicable to: Unit</p> Cannot be intercepted <p>Applicable to: Unit</p> Cannot intercept [mapUnitFilter] units <p>Example: \"Cannot intercept [Wounded] units\"</p> <p>Applicable to: Unit</p> [relativeAmount]% Strength when performing Air Sweep <p>Example: \"[+20]% Strength when performing Air Sweep\"</p> <p>Applicable to: Unit</p> May capture killed [mapUnitFilter] units <p>Example: \"May capture killed [Wounded] units\"</p> <p>Applicable to: Unit</p> Invisible to others <p>Applicable to: Unit</p> Invisible to non-adjacent units <p>Applicable to: Unit</p> Can see invisible [mapUnitFilter] units <p>Example: \"Can see invisible [Wounded] units\"</p> <p>Applicable to: Unit</p> May upgrade to [baseUnitFilter] through ruins-like effects <p>Example: \"May upgrade to [Melee] through ruins-like effects\"</p> <p>Applicable to: Unit</p> Destroys tile improvements when attacking <p>Applicable to: Unit</p> Cannot move <p>Applicable to: Unit</p> Double movement in [terrainFilter] <p>Example: \"Double movement in [Fresh Water]\"</p> <p>Applicable to: Unit</p> All tiles cost 1 movement <p>Applicable to: Unit</p> Can pass through impassable tiles <p>Applicable to: Unit</p> Ignores terrain cost <p>Applicable to: Unit</p> Ignores Zone of Control <p>Applicable to: Unit</p> Rough terrain penalty <p>Applicable to: Unit</p> Can enter ice tiles <p>Applicable to: Unit</p> Cannot enter ocean tiles <p>Applicable to: Unit</p> May enter foreign tiles without open borders <p>Applicable to: Unit</p> May enter foreign tiles without open borders, but loses [amount] religious strength each turn it ends there <p>Example: \"May enter foreign tiles without open borders, but loses [3] religious strength each turn it ends there\"</p> <p>Applicable to: Unit</p> Never appears as a Barbarian unit <p>Applicable to: Unit</p> Religious Unit <p>Applicable to: Unit</p> Takes your religion over the one in their birth city <p>Applicable to: Unit</p> Great Person - [comment] <p>Example: \"Great Person - [comment]\"</p> <p>Applicable to: Unit</p>"},{"location":"Modders/uniques/#promotion-uniques","title":"Promotion uniques","text":"Doing so will consume this opportunity to choose a Promotion <p>Applicable to: Promotion</p>"},{"location":"Modders/uniques/#terrain-uniques","title":"Terrain uniques","text":"Must be adjacent to [amount] [simpleTerrain] tiles <p>Example: \"Must be adjacent to [3] [Elevated] tiles\"</p> <p>Applicable to: Terrain</p> Must be adjacent to [amount] to [amount] [simpleTerrain] tiles <p>Example: \"Must be adjacent to [3] to [3] [Elevated] tiles\"</p> <p>Applicable to: Terrain</p> Must not be on [amount] largest landmasses <p>Example: \"Must not be on [3] largest landmasses\"</p> <p>Applicable to: Terrain</p> Must be on [amount] largest landmasses <p>Example: \"Must be on [3] largest landmasses\"</p> <p>Applicable to: Terrain</p> Occurs on latitudes from [amount] to [amount] percent of distance equator to pole <p>Example: \"Occurs on latitudes from [3] to [3] percent of distance equator to pole\"</p> <p>Applicable to: Terrain</p> Occurs in groups of [amount] to [amount] tiles <p>Example: \"Occurs in groups of [3] to [3] tiles\"</p> <p>Applicable to: Terrain</p> Neighboring tiles will convert to [baseTerrain] <p>Example: \"Neighboring tiles will convert to [Grassland]\"</p> <p>Applicable to: Terrain</p> Neighboring tiles except [baseTerrain] will convert to [baseTerrain] <p>Example: \"Neighboring tiles except [Grassland] will convert to [Grassland]\"</p> <p>Applicable to: Terrain</p> Grants 500 Gold to the first civilization to discover it <p>Applicable to: Terrain</p> Units ending their turn on this terrain take [amount] damage <p>Example: \"Units ending their turn on this terrain take [3] damage\"</p> <p>Applicable to: Terrain</p> Grants [promotion] ([comment]) to adjacent [mapUnitFilter] units for the rest of the game <p>Example: \"Grants [Shock I] ([comment]) to adjacent [Wounded] units for the rest of the game\"</p> <p>Applicable to: Terrain</p> [amount] Strength for cities built on this terrain <p>Example: \"[3] Strength for cities built on this terrain\"</p> <p>Applicable to: Terrain</p> Provides a one-time Production bonus to the closest city when cut down <p>Applicable to: Terrain</p> Vegetation <p>Applicable to: Terrain</p> Tile provides yield without assigned population <p>Applicable to: Terrain, Improvement</p> Nullifies all other stats this tile provides <p>Applicable to: Terrain</p> Only [improvementFilter] improvements may be built on this tile <p>Example: \"Only [All Road] improvements may be built on this tile\"</p> <p>Applicable to: Terrain</p> Blocks line-of-sight from tiles at same elevation <p>Applicable to: Terrain</p> Has an elevation of [amount] for visibility calculations <p>Example: \"Has an elevation of [3] for visibility calculations\"</p> <p>Applicable to: Terrain</p> Always Fertility [amount] for Map Generation <p>Example: \"Always Fertility [3] for Map Generation\"</p> <p>Applicable to: Terrain</p> [amount] to Fertility for Map Generation <p>Example: \"[3] to Fertility for Map Generation\"</p> <p>Applicable to: Terrain</p> A Region is formed with at least [amount]% [simpleTerrain] tiles, with priority [amount] <p>Example: \"A Region is formed with at least [3]% [Elevated] tiles, with priority [3]\"</p> <p>Applicable to: Terrain</p> A Region is formed with at least [amount]% [simpleTerrain] tiles and [simpleTerrain] tiles, with priority [amount] <p>Example: \"A Region is formed with at least [3]% [Elevated] tiles and [Elevated] tiles, with priority [3]\"</p> <p>Applicable to: Terrain</p> A Region can not contain more [simpleTerrain] tiles than [simpleTerrain] tiles <p>Example: \"A Region can not contain more [Elevated] tiles than [Elevated] tiles\"</p> <p>Applicable to: Terrain</p> Base Terrain on this tile is not counted for Region determination <p>Applicable to: Terrain</p> Starts in regions of this type receive an extra [resource] <p>Example: \"Starts in regions of this type receive an extra [Iron]\"</p> <p>Applicable to: Terrain</p> Never receives any resources <p>Applicable to: Terrain</p> Becomes [terrainName] when adjacent to [terrainFilter] <p>Example: \"Becomes [Forest] when adjacent to [Fresh Water]\"</p> <p>Applicable to: Terrain</p> Considered [terrainQuality] when determining start locations <p>Example: \"Considered [Undesirable] when determining start locations\"</p> <p>Applicable to: Terrain</p> Doesn't generate naturally <p>Applicable to: Terrain, Resource</p> Occurs at temperature between [amount] and [amount] and humidity between [amount] and [amount] <p>Example: \"Occurs at temperature between [3] and [3] and humidity between [3] and [3]\"</p> <p>Applicable to: Terrain, Resource</p> Occurs in chains at high elevations <p>Applicable to: Terrain</p> Occurs in groups around high elevations <p>Applicable to: Terrain</p> Every [amount] tiles with this terrain will receive a major deposit of a strategic resource. <p>Example: \"Every [3] tiles with this terrain will receive a major deposit of a strategic resource.\"</p> <p>Applicable to: Terrain</p> Rare feature <p>Applicable to: Terrain</p> [amount]% Chance to be destroyed by nukes <p>Example: \"[3]% Chance to be destroyed by nukes\"</p> <p>Applicable to: Terrain</p> Fresh water <p>Applicable to: Terrain</p> Rough terrain <p>Applicable to: Terrain</p>"},{"location":"Modders/uniques/#improvement-uniques","title":"Improvement uniques","text":"Can also be built on tiles adjacent to fresh water <p>Applicable to: Improvement</p> [stats] from [tileFilter] tiles <p>Example: \"[+1 Gold, +2 Production] from [Farm] tiles\"</p> <p>Applicable to: Improvement</p> [stats] for each adjacent [tileFilter] <p>Example: \"[+1 Gold, +2 Production] for each adjacent [Farm]\"</p> <p>Applicable to: Improvement</p> Ensures a minimum tile yield of [stats] <p>Example: \"Ensures a minimum tile yield of [+1 Gold, +2 Production]\"</p> <p>Applicable to: Improvement</p> Can be built outside your borders <p>Applicable to: Improvement</p> Can be built just outside your borders <p>Applicable to: Improvement</p> Can only be built on [tileFilter] tiles <p>Example: \"Can only be built on [Farm] tiles\"</p> <p>Applicable to: Improvement</p> Cannot be built on [tileFilter] tiles <p>Example: \"Cannot be built on [Farm] tiles\"</p> <p>Applicable to: Improvement</p> Can only be built to improve a resource <p>Applicable to: Improvement</p> Does not need removal of [tileFilter] <p>Example: \"Does not need removal of [Farm]\"</p> <p>Applicable to: Improvement</p> Removes removable features when built <p>Applicable to: Improvement</p> Gives a defensive bonus of [relativeAmount]% <p>Example: \"Gives a defensive bonus of [+20]%\"</p> <p>Applicable to: Improvement</p> Costs [amount] [stat] per turn when in your territory <p>Example: \"Costs [3] [Culture] per turn when in your territory\"</p> <p>Applicable to: Improvement</p> Costs [amount] [stat] per turn <p>Example: \"Costs [3] [Culture] per turn\"</p> <p>Applicable to: Improvement</p> Adjacent enemy units ending their turn take [amount] damage <p>Example: \"Adjacent enemy units ending their turn take [3] damage\"</p> <p>Applicable to: Improvement</p> Great Improvement <p>Applicable to: Improvement</p> Provides a random bonus when entered <p>Applicable to: Improvement</p> Constructing it will take over the tiles around it and assign them to your closest city <p>Applicable to: Improvement</p> Unpillagable <p>Applicable to: Improvement</p> Pillaging this improvement yields approximately [stats] <p>Example: \"Pillaging this improvement yields approximately [+1 Gold, +2 Production]\"</p> <p>Applicable to: Improvement</p> Pillaging this improvement yields [stats] <p>Example: \"Pillaging this improvement yields [+1 Gold, +2 Production]\"</p> <p>Applicable to: Improvement</p> Irremovable <p>Applicable to: Improvement</p> Will be replaced by automated workers <p>Applicable to: Improvement</p>"},{"location":"Modders/uniques/#resource-uniques","title":"Resource uniques","text":"Deposits in [tileFilter] tiles always provide [amount] resources <p>Example: \"Deposits in [Farm] tiles always provide [3] resources\"</p> <p>Applicable to: Resource</p> Can only be created by Mercantile City-States <p>Applicable to: Resource</p> Stockpiled <p>Applicable to: Resource</p> Cannot be traded <p>Applicable to: Resource</p> Not shown on world screen <p>Applicable to: Resource</p> Generated with weight [amount] <p>Example: \"Generated with weight [3]\"</p> <p>Applicable to: Resource</p> Minor deposits generated with weight [amount] <p>Example: \"Minor deposits generated with weight [3]\"</p> <p>Applicable to: Resource</p> Generated near City States with weight [amount] <p>Example: \"Generated near City States with weight [3]\"</p> <p>Applicable to: Resource</p> Special placement during map generation <p>Applicable to: Resource</p> Generated on every [amount] tiles <p>Example: \"Generated on every [3] tiles\"</p> <p>Applicable to: Resource</p> Guaranteed with Strategic Balance resource option <p>Applicable to: Resource</p>"},{"location":"Modders/uniques/#ruins-uniques","title":"Ruins uniques","text":"Free [unit] found in the ruins <p>Example: \"Free [Musketman] found in the ruins\"</p> <p>Applicable to: Ruins</p> From a randomly chosen tile [amount] tiles away from the ruins, reveal tiles up to [amount] tiles away with [amount]% chance <p>Example: \"From a randomly chosen tile [3] tiles away from the ruins, reveal tiles up to [3] tiles away with [3]% chance\"</p> <p>Applicable to: Ruins</p> Hidden after generating a Great Prophet <p>Applicable to: Ruins</p>"},{"location":"Modders/uniques/#citystate-uniques","title":"CityState uniques","text":"Provides military units every \u2248[amount] turns <p>Example: \"Provides military units every \u2248[3] turns\"</p> <p>Applicable to: CityState</p> Provides a unique luxury <p>Applicable to: CityState</p>"},{"location":"Modders/uniques/#conditional-uniques","title":"Conditional uniques","text":"&lt;for [amount] turns&gt; <p>Example: \"&lt;for [3] turns&gt;\"</p> <p>Applicable to: Conditional</p> &lt;with [amount]% chance&gt; <p>Example: \"&lt;with [3]% chance&gt;\"</p> <p>Applicable to: Conditional</p> &lt;before [amount] turns&gt; <p>Example: \"&lt;before [3] turns&gt;\"</p> <p>Applicable to: Conditional</p> &lt;after [amount] turns&gt; <p>Example: \"&lt;after [3] turns&gt;\"</p> <p>Applicable to: Conditional</p> &lt;for [nationFilter]&gt; <p>Example: \"&lt;for [City-States]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;when at war&gt; <p>Applicable to: Conditional</p> &lt;when not at war&gt; <p>Applicable to: Conditional</p> &lt;during a Golden Age&gt; <p>Applicable to: Conditional</p> &lt;during We Love The King Day&gt; <p>Applicable to: Conditional</p> &lt;while the empire is happy&gt; <p>Applicable to: Conditional</p> &lt;when between [amount] and [amount] Happiness&gt; <p>Example: \"&lt;when between [3] and [3] Happiness&gt;\"</p> <p>Applicable to: Conditional</p> &lt;when below [amount] Happiness&gt; <p>Example: \"&lt;when below [3] Happiness&gt;\"</p> <p>Applicable to: Conditional</p> &lt;during the [era]&gt; <p>Example: \"&lt;during the [Ancient era]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;before the [era]&gt; <p>Example: \"&lt;before the [Ancient era]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;starting from the [era]&gt; <p>Example: \"&lt;starting from the [Ancient era]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;if starting in the [era]&gt; <p>Example: \"&lt;if starting in the [Ancient era]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;if no other Civilization has researched this&gt; <p>Applicable to: Conditional</p> &lt;after discovering [tech]&gt; <p>Example: \"&lt;after discovering [Agriculture]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;before discovering [tech]&gt; <p>Example: \"&lt;before discovering [Agriculture]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;after adopting [policy/belief]&gt; <p>Example: \"&lt;after adopting [Oligarchy]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;before adopting [policy/belief]&gt; <p>Example: \"&lt;before adopting [Oligarchy]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;before founding a Pantheon&gt; <p>Applicable to: Conditional</p> &lt;after founding a Pantheon&gt; <p>Applicable to: Conditional</p> &lt;before founding a religion&gt; <p>Applicable to: Conditional</p> &lt;after founding a religion&gt; <p>Applicable to: Conditional</p> &lt;before enhancing a religion&gt; <p>Applicable to: Conditional</p> &lt;after enhancing a religion&gt; <p>Applicable to: Conditional</p> &lt;if [buildingFilter] is constructed&gt; <p>Example: \"&lt;if [Culture] is constructed&gt;\"</p> <p>Applicable to: Conditional</p> &lt;with [resource]&gt; <p>Example: \"&lt;with [Iron]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;without [resource]&gt; <p>Example: \"&lt;without [Iron]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;when above [amount] [resource]&gt; <p>Example: \"&lt;when above [3] [Iron]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;when below [amount] [resource]&gt; <p>Example: \"&lt;when below [3] [Iron]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;in this city&gt; <p>Applicable to: Conditional</p> &lt;in other cities&gt; <p>Applicable to: Conditional</p> &lt;in cities with a [buildingFilter]&gt; <p>Example: \"&lt;in cities with a [Culture]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;in cities without a [buildingFilter]&gt; <p>Example: \"&lt;in cities without a [Culture]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;in cities with at least [amount] [populationFilter]&gt; <p>Example: \"&lt;in cities with at least [3] [Followers of this Religion]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;with a garrison&gt; <p>Applicable to: Conditional</p> &lt;for [mapUnitFilter] units&gt; <p>Example: \"&lt;for [Wounded] units&gt;\"</p> <p>Applicable to: Conditional</p> &lt;when [mapUnitFilter]&gt; <p>Example: \"&lt;when [Wounded]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;for units with [promotion]&gt; <p>Example: \"&lt;for units with [Shock I]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;for units without [promotion]&gt; <p>Example: \"&lt;for units without [Shock I]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;vs cities&gt; <p>Applicable to: Conditional</p> &lt;vs [mapUnitFilter] units&gt; <p>Example: \"&lt;vs [Wounded] units&gt;\"</p> <p>Applicable to: Conditional</p> &lt;when fighting units from a Civilization with more Cities than you&gt; <p>Applicable to: Conditional</p> &lt;when attacking&gt; <p>Applicable to: Conditional</p> &lt;when defending&gt; <p>Applicable to: Conditional</p> &lt;when fighting in [tileFilter] tiles&gt; <p>Example: \"&lt;when fighting in [Farm] tiles&gt;\"</p> <p>Applicable to: Conditional</p> &lt;on foreign continents&gt; <p>Applicable to: Conditional</p> &lt;when adjacent to a [mapUnitFilter] unit&gt; <p>Example: \"&lt;when adjacent to a [Wounded] unit&gt;\"</p> <p>Applicable to: Conditional</p> &lt;when above [amount] HP&gt; <p>Example: \"&lt;when above [3] HP&gt;\"</p> <p>Applicable to: Conditional</p> &lt;when below [amount] HP&gt; <p>Example: \"&lt;when below [3] HP&gt;\"</p> <p>Applicable to: Conditional</p> &lt;if it hasn't used other actions yet&gt; <p>Applicable to: Conditional</p> &lt;with [amount] to [amount] neighboring [tileFilter] tiles&gt; <p>Example: \"&lt;with [3] to [3] neighboring [Farm] tiles&gt;\"</p> <p>Applicable to: Conditional</p> &lt;with [amount] to [amount] neighboring [tileFilter] [tileFilter] tiles&gt; <p>Example: \"&lt;with [3] to [3] neighboring [Farm] [Farm] tiles&gt;\"</p> <p>Applicable to: Conditional</p> &lt;in [tileFilter] tiles&gt; <p>Example: \"&lt;in [Farm] tiles&gt;\"</p> <p>Applicable to: Conditional</p> &lt;in [tileFilter] [tileFilter] tiles&gt; <p>Example: \"&lt;in [Farm] [Farm] tiles&gt;\"</p> <p>Applicable to: Conditional</p> &lt;in tiles without [tileFilter]&gt; <p>Example: \"&lt;in tiles without [Farm]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;within [amount] tiles of a [tileFilter]&gt; <p>Example: \"&lt;within [3] tiles of a [Farm]&gt;\"</p> <p>Applicable to: Conditional</p> &lt;on water maps&gt; <p>Applicable to: Conditional</p> &lt;in [regionType] Regions&gt; <p>Example: \"&lt;in [Hybrid] Regions&gt;\"</p> <p>Applicable to: Conditional</p> &lt;in all except [regionType] Regions&gt; <p>Example: \"&lt;in all except [Hybrid] Regions&gt;\"</p> <p>Applicable to: Conditional</p>"},{"location":"Modders/uniques/#triggercondition-uniques","title":"TriggerCondition uniques","text":"&lt;upon discovering [tech]&gt; <p>Example: \"&lt;upon discovering [Agriculture]&gt;\"</p> <p>Applicable to: TriggerCondition</p> &lt;upon entering the [era]&gt; <p>Example: \"&lt;upon entering the [Ancient era]&gt;\"</p> <p>Applicable to: TriggerCondition</p> &lt;upon adopting [policy/belief]&gt; <p>Example: \"&lt;upon adopting [Oligarchy]&gt;\"</p> <p>Applicable to: TriggerCondition</p> &lt;upon declaring war with a major Civilization&gt; <p>Applicable to: TriggerCondition</p> &lt;upon declaring friendship&gt; <p>Applicable to: TriggerCondition</p> &lt;upon entering a Golden Age&gt; <p>Applicable to: TriggerCondition</p> &lt;upon conquering a city&gt; <p>Applicable to: TriggerCondition, UnitTriggerCondition</p> &lt;upon founding a city&gt; <p>Applicable to: TriggerCondition</p> &lt;upon discovering a Natural Wonder&gt; <p>Applicable to: TriggerCondition</p> &lt;upon constructing [buildingFilter]&gt; <p>Example: \"&lt;upon constructing [Culture]&gt;\"</p> <p>Applicable to: TriggerCondition</p> &lt;upon constructing [buildingFilter] [cityFilter]&gt; <p>Example: \"&lt;upon constructing [Culture] [in all cities]&gt;\"</p> <p>Applicable to: TriggerCondition</p> &lt;upon gaining a [baseUnitFilter] unit&gt; <p>Example: \"&lt;upon gaining a [Melee] unit&gt;\"</p> <p>Applicable to: TriggerCondition</p> &lt;upon founding a Pantheon&gt; <p>Applicable to: TriggerCondition</p> &lt;upon founding a Religion&gt; <p>Applicable to: TriggerCondition</p> &lt;upon enhancing a Religion&gt; <p>Applicable to: TriggerCondition</p>"},{"location":"Modders/uniques/#unittriggercondition-uniques","title":"UnitTriggerCondition uniques","text":"&lt;upon defeating a [mapUnitFilter] unit&gt; <p>Example: \"&lt;upon defeating a [Wounded] unit&gt;\"</p> <p>Applicable to: UnitTriggerCondition</p> &lt;upon being defeated&gt; <p>Applicable to: UnitTriggerCondition</p> &lt;upon being promoted&gt; <p>Applicable to: UnitTriggerCondition</p> &lt;upon losing at least [amount] HP in a single attack&gt; <p>Example: \"&lt;upon losing at least [3] HP in a single attack&gt;\"</p> <p>Applicable to: UnitTriggerCondition</p> &lt;upon ending a turn in a [tileFilter] tile&gt; <p>Example: \"&lt;upon ending a turn in a [Farm] tile&gt;\"</p> <p>Applicable to: UnitTriggerCondition</p>"},{"location":"Modders/uniques/#unitactionmodifier-uniques","title":"UnitActionModifier uniques","text":"&lt;by consuming this unit&gt; <p>Applicable to: UnitActionModifier</p> &lt;for [amount] movement&gt; <p>Example: \"&lt;for [3] movement&gt;\"</p> <p>Applicable to: UnitActionModifier</p> &lt;once&gt; <p>Applicable to: UnitActionModifier</p> &lt;[amount] times&gt; <p>Example: \"&lt;[3] times&gt;\"</p> <p>Applicable to: UnitActionModifier</p> &lt;[amount] additional time(s)&gt; <p>Example: \"&lt;[3] additional time(s)&gt;\"</p> <p>Applicable to: UnitActionModifier</p> &lt;after which this unit is consumed&gt; <p>Applicable to: UnitActionModifier</p>"},{"location":"Other/Civilization-related-JSON-files/","title":"Civilization-related JSON files","text":""},{"location":"Other/Civilization-related-JSON-files/#beliefsjson","title":"Beliefs.json","text":"<p>link to original</p> <p>This file contains the beliefs that can be chosen for religions in your mod.</p> <p>Each belief can have the following attributes:</p> Attribute Type Optional Notes name String Required Name of the belief type String Required The type of the belief. Valid values are: \"Pantheon\", \"Follower\", \"Founder\" and \"Enhancer\". uniques List of Strings defaults to none The unique abilities this belief adds to cities following it. May be chosen from the list of building uniques here, as well as the general uniques on that page civilopediaText List Default empty see civilopediaText chapter"},{"location":"Other/Civilization-related-JSON-files/#buildingsjson","title":"Buildings.json","text":"<p>link to original</p> <p>This file should contain all the buildings and wonders you want to use in your mod.</p> <p>Each building can have the following attributes:</p> Attribute Type Optional Notes name String required Name of the building cost Integer (\u22650) defaults to 0 Amount of production required to build the building food Integer defaults to 0 Food produced by the building production Integer defaults to 0 Production produced by the building gold Integer defaults to 0 etc. happiness Integer defaults to 0 culture Integer defaults to 0 science Integer defaults to 0 faith Integer defaults to 0 maintenance Integer (\u22650) defaults to 0 Maintenance cost of the building isWonder Boolean defaults to false Whether this building is a global wonder isNationalWonder Boolean defaults to false Whether this building is a national wonder requiredBuilding String defaults to none A building that has to be built before this building can be built. Must be in Buildings.json cannotBeBuiltWith String defaults to none The building [cannotBeBuiltWith] and this building cannot exist in the same city together. Should be in Buildings.json providesFreeBuilding String defaults to none When the building is built, [providesFreeBuilding] is also automatically added to the city requiredTech String defaults to none The tech that should be researched before this building may be built. Must be in Techs.json requiredResource String defaults to none The resource that is consumed when building this building. Must be in TileResources.json requiredNearbyImprovedResources List of Strings defaults to none The building can only be built if any of the resources in this list are within the borders of this city and have been improved. Each resource must be in TileResources.json replaces String defaults to none The name of a building that should be replaced by this building. Must be in Buildings.json uniqueTo String defaults to none If supplied, only the nation with this name can build this building. Must be in Nations.json xpForNewUnits Integer defaults to 0 XP granted automatically to units built in this city cityStrength Integer defaults to 0 Strength bonus the city in which this building is built receives cityHealth Integer defaults to 0 Health bonus the city in which this building is built receives hurryCostModifier Integer defaults to 0 When this building is bought using gold or faith, the price is increased by this much percent quote String defaults to none If this building is a (national) wonder, this string will be shown on the completion popup uniques List of Strings defaults to none List of unique abilities this building has. Most of these can be found here replacementTextForUniques String defaults to none If provided, this string will be shown instead of all of the uniques percentStatBonus Object defaults to none Percentual bonus for stats provided by the building. Valid keys are the names of stats (production, gold, science, etc.), valid values are Integers (\u22650) greatPersonPoints Object defaults to none How many great person points for each type will be generated per turn. Valid keys are the names of great people (Great Scientist, Great Engineer, etc. .), valid values are Integers (\u22650) specialistSlots Object defaults to none Specialist slots provided by this building. Valid keys are the names of specialists (as defined in Specialists.json), valid values are Integers, the amount of slots provided for this specialist civilopediaText List Default empty see civilopediaText chapter"},{"location":"Other/Civilization-related-JSON-files/#nationsjson","title":"Nations.json","text":"<p>Link to original</p> <p>This file contains all the nations and city states, including Barbarians and Spectator.</p> Attribute Type Optional Notes name String Required leaderName String Default empty Omit only for city states! If you want LeaderPortraits, the image file names must match exactly, including case. style String Default empty Modifier appended to pixel unit image names adjective String Default empty Currently unused cityStateType Enum Default absent Distinguishes Major Civilizations from City States (Cultured, Maritime, Mercantile, Militaristic) startBias List Default empty Zero or more of: terrainFilter or \"Avoid [terrainFilter]\". [^S] preferredVictoryType Enum Default Neutral Neutral, Cultural, Diplomatic, Domination or Scientific startIntroPart1 String Default empty Introductory blurb shown to Player on game start... startIntroPart2 String Default empty ... second paragraph. NO \"TBD\"!!! Leave empty to skip that alert. declaringWar String Default empty another greeting attacked String Default empty another greeting defeated String Default empty another greeting introduction String Default empty another greeting neutralHello String Default empty another greeting hateHello String Default empty another greeting tradeRequest String Default empty another greeting innerColor 3x Integer Default black R, G, B for outer ring of nation icon outerColor 3x Integer Required R, G, B for inner circle of nation icon uniqueName String Default empty Decorative name for the special characteristic of this Nation uniqueText String Default empty Replacement text for \"uniques\". If empty, uniques are listed individually. uniques List Default empty Properties of the civilization - see here cities List Default empty City names used sequentially for newly founded cities. civilopediaText List Default empty see civilopediaText chapter <p>[^S]: A \"Coast\" preference (unless combined with \"Avoid\") is translated to a complex test for coastal land tiles, tiles next to Lakes, river tiles or near-river tiles, and such civs are processed first. Other startBias entries are ignored in that case.       Other positive (no \"Avoid\") startBias are processed next. Multiple positive preferences are treated equally, but get no \"fallback\".       Single positive startBias can get a \"fallback\" region if there is no (or no more) region with that primary type: any leftover region with as much of the specified terrain as possible will do.       Multiple \"Avoid\" entries are treated equally (and reduce chance for success - if no region is left avoiding all specified types that civ gets a random one).       When combining preferred terrain with \"Avoid\", the latter takes precedence, and preferred terrain only has minor weight when choosing between regions that are not of a type to avoid.       These notes are only valid when playing on generated maps, loaded maps from map editor get no \"regions\" and startBias is processed differently (but you can expect single-entry startBias to work best).</p>"},{"location":"Other/Civilization-related-JSON-files/#policiesjson","title":"Policies.json","text":"<p>Link to original</p> <p>This file lists the available social policies that can be \"bought\" with culture.</p> <p>They are organized in 'branches', each branch has an 'opener', one or more 'member' policies, and a 'finisher'. Therefore this file is organized using two levels - branch and member policy. The properties of the 'opener' are defined with the branch level, while the 'finisher' has an entry on the member level which must be named as branch name + \" Complete\", case sensitive.</p> <p>Each policy branch can have the following properties:</p> Attribute Type Optional Notes name String Required era String Required Unlocking era as defined in Eras.json priorities Object Default empty Priorities for each victory type, see here uniques List Default empty List of effects, see here policies List Default empty List of member policies <p>Each member policy can have the following properties:</p> Attribute Type Optional? Notes name String Required row Integer Required Placement in UI, each unit approximately half the icon size column Integer Required Placement in UI, each unit approximately half the icon size requires List Default empty List of prerequisite policy names uniques List Default empty List of effects, see here"},{"location":"Other/Civilization-related-JSON-files/#branch-priorities","title":"Branch priorities","text":"<p>The \"priorities\" object lists its branch's priorities for each victory type. The AI refers to this when deciding which branch to prioritize, also taking its preferred victory type into consideration. If two or more candidate branches have the same priority, the AI chooses a random branch among the candidates. All values are set to 0 if the object itself is missing or empty.</p> Attribute Type Optional Notes Neutral Int Default 0 Priority value when the AI's preferred victory type is Neutral Cultural Int Default 0 Priority value when the AI's preferred victory type is Cultural Diplomatic Int Default 0 Priority value when the AI's preferred victory type is Diplomatic Domination Int Default 0 Priority value when the AI's preferred victory type is Domination Scientific Int Default 0 Priority value when the AI's preferred victory type is Scientific"},{"location":"Other/Civilization-related-JSON-files/#questsjson","title":"Quests.json","text":"<p>Link to original</p> <p>This file contains the Quests that may be given to major Civilizations by City States.</p> Attribute Type Optional Notes name String Required Unique identifier name of the quest, it is also shown description String Required Description of the quest shown to players type Enum Default Individual Individual or Global influence Float Default 40 Influence reward gained on quest completion duration Integer Default 0 Maximum number of turns to complete the quest, 0 if there's no turn limit minimumCivs Integer Default 1 Minimum number of Civs needed to start the quest. It is meaningful only for type = Global"},{"location":"Other/Civilization-related-JSON-files/#religionsjson","title":"Religions.json","text":"<p>Link to original</p> <p>This is just a list of Strings specifying all predefined Religion names. Corresponding icons must exist, that's all to it. After all, they're just containers for Beliefs.</p>"},{"location":"Other/Civilization-related-JSON-files/#specialistsjson","title":"Specialists.json","text":"<p>Link to original</p> <p>This file should contain a list of all possible specialists that you want in your mod.</p> <p>Each specialist can have the following attributes:</p> Attribute Type Optional Notes name String required Name of the specialist food Integer defaults to 0 Amount of food produced by this specialist production Integer defaults to 0 Amount of production produced by this specialist gold Integer defaults to 0 etc. culture Integer defaults to 0 science Integer defaults to 0 faith Integer defaults to 0 color List of 3 Integers required Color of the image for this specialist greatPersonPoints Object defaults to none Great person points generated by this specialist. Valid keys are the names of the great person(Great Scientist, Great Merachant, etc.), valid values are Integers (\u22650)"},{"location":"Other/Civilization-related-JSON-files/#techsjson","title":"Techs.json","text":"<p>Link to original</p> <p>This file contains all the technologies. It is organized into an outer list of 'columns' which in turn contain one or more tech each.</p>"},{"location":"Other/Civilization-related-JSON-files/#column-structure","title":"Column structure","text":"Attribute Type Optional Notes columnNumber Integer Required Horizontal placement in the Tech Tree. era String Required References Eras.json. techCost Integer Required Default cost of the techs in this column. buildingCost Integer Required Default cost of buildings requiring this tech. wonderCost Integer Required Default cost of wonders requiring this tech. techs List Required List of techs as follows - pay attention to the nesting of {} and []."},{"location":"Other/Civilization-related-JSON-files/#tech-structure","title":"Tech structure","text":"Attribute Type Optional Notes name String Required The name of this Technology. row Integer Defaults to 0 Vertical placement in the Tech Tree, must be unique per column. cost Integer Defaults to column techCost The amount of science required to research this tech. prerequisites List Default empty A list of the names of techs that are prerequisites of this tech. Only direct prerequisites are necessary. quote String Default empty A nice story presented to the player when they research this tech. uniques List Default empty Properties granted by the tech - see here. civilopediaText List Default empty see civilopediaText chapter."},{"location":"Other/Force-rating-calculation/","title":"Force rating calculation","text":"<p>Since the question has come up several times, here is a summary of how Force ratings are calculated.</p>"},{"location":"Other/Force-rating-calculation/#base-unit-force-evaluation","title":"Base Unit Force Evaluation","text":"<p>First the base unit gets a force evaluation. If the unit has a ranged attack, the starting force is the ranged strength ^ 1.45. Otherwise the starting force is strength ^ 1.5. This is multiplied by the unit's movement ^ 0.3. Nukes get +4000.</p> <p>Then this is multiplied by a bunch of modifiers:</p> <ul> <li>0.5 if ranged naval</li> <li>0.5 if self-destructs when attacking</li> <li>Half the city attack bonus (So +25% if the unit has +50% when attacking cities)</li> <li>A Quarter of attack bonuses vs things other than cities</li> <li>Half the bonus \"when attacking\"</li> <li>Half the bonus \"when defending\"</li> <li>+25% if paradrop able</li> <li>-20% if needs to set up to attack</li> <li>Half the bonus from certain terrain</li> <li>+20% bonus per extra attack per turn</li> </ul>"},{"location":"Other/Force-rating-calculation/#individual-unit-force-evaluation","title":"Individual Unit Force Evaluation","text":"<p>Each individual unit has a Force equal to the Base Unit Force,</p> <ul> <li>multiplied by (number of times promoted +1) ^ 0.3.</li> <li>multiplied by current health as a percentage.</li> </ul>"},{"location":"Other/Force-rating-calculation/#civ-force-ranking","title":"Civ Force Ranking","text":"<p>The civs Force Ranking is based on the sum of all their units' Force Evaluation (cities are not counted). Only half the Force of naval units is counted. This is multiplied by a gold modifier equal to the square root of current gold, as a percentage. The gold multiplier is constrained to be between 1 and 2, so the max multiplier is 2 which is reached at 10000 gold.</p>"},{"location":"Other/Force-rating-calculation/#show-me-some-numbers","title":"Show Me Some Numbers","text":"<ul> <li><code>Scout 13</code></li> <li><code>Archer 19</code></li> <li><code>Slinger 19</code></li> <li><code>Dromon 23</code></li> <li><code>Warrior 27</code></li> <li><code>Maori Warrior 27</code></li> <li><code>Brute 27</code></li> <li><code>Bowman 29</code></li> <li><code>Jaguar 36</code></li> <li><code>Catapult 39</code></li> <li><code>Composite Bowman 39</code></li> <li><code>Galleass 41</code></li> <li><code>Chariot Archer 42</code></li> <li><code>War Elephant 44</code></li> <li><code>War Chariot 45</code></li> <li><code>Horse Archer 45</code></li> <li><code>Trireme 46</code></li> <li><code>Spearman 49</code></li> <li><code>Ballista 55</code></li> <li><code>Persian Immortal 56</code></li> <li><code>Horseman 62</code></li> <li><code>Hoplite 63</code></li> <li><code>Swordsman 64</code></li> <li><code>Chu-Ko-Nu 66</code></li> <li><code>Quinquereme 69</code></li> <li><code>African Forest Elephant 72</code></li> <li><code>Battering Ram 80</code></li> <li><code>Cataphract 80</code></li> <li><code>Crossbowman 81</code></li> <li><code>Longbowman 81</code></li> <li><code>Companion Cavalry 84</code></li> <li><code>Legion 86</code></li> <li><code>Mohawk Warrior 86</code></li> <li><code>Pikeman 87</code></li> <li><code>Landsknecht 87</code></li> <li><code>Trebuchet 88</code></li> <li><code>Keshik 89</code></li> <li><code>Frigate 100</code></li> <li><code>Hwach'a 110</code></li> <li><code>Longswordsman 118</code></li> <li><code>Camel Archer 124</code></li> <li><code>Samurai 126</code></li> <li><code>Berserker 133</code></li> <li><code>Knight 134</code></li> <li><code>Conquistador 134</code></li> <li><code>Mandekalu Cavalry 134</code></li> <li><code>Caravel 134</code></li> <li><code>Ship of the Line 139</code></li> <li><code>Musketman 144</code></li> <li><code>Cannon 151</code></li> <li><code>Minuteman 154</code></li> <li><code>Janissary 162</code></li> <li><code>Gatling Gun 169</code></li> <li><code>Musketeer 182</code></li> <li><code>Tercio 182</code></li> <li><code>Naresuan's Elephant 194</code></li> <li><code>Lancer 204</code></li> <li><code>Hakkapeliitta 204</code></li> <li><code>Sipahi 218</code></li> <li><code>Privateer 222</code></li> <li><code>Rifleman 243</code></li> <li><code>Carolean 243</code></li> <li><code>Sea Beggar 244</code></li> <li><code>Artillery 245</code></li> <li><code>Battleship 269</code></li> <li><code>Great War Bomber 290</code></li> <li><code>Cavalry 300</code></li> <li><code>Hussar 320</code></li> <li><code>Triplane 325</code></li> <li><code>Turtle Ship 327</code></li> <li><code>Cossack 337</code></li> <li><code>Norwegian Ski Infantry 345</code></li> <li><code>Guided Missile 378</code></li> <li><code>Carrier 408</code></li> <li><code>Submarine 420</code></li> <li><code>Bomber 425</code></li> <li><code>Great War Infantry 434</code></li> <li><code>Machine Gun 465</code></li> <li><code>Fighter 470</code></li> <li><code>Foreign Legion 477</code></li> <li><code>Ironclad 486</code></li> <li><code>Zero 508</code></li> <li><code>Anti-Tank Gun 542</code></li> <li><code>B17 551</code></li> <li><code>Marine 645</code></li> <li><code>Landship 703</code></li> <li><code>Infantry 720</code></li> <li><code>Nuclear Submarine 735</code></li> <li><code>Stealth Bomber 771</code></li> <li><code>Paratrooper 806</code></li> <li><code>Anti-Aircraft Gun 819</code></li> <li><code>Destroyer 870</code></li> <li><code>Missile Cruiser 888</code></li> <li><code>Rocket Artillery 930</code></li> <li><code>Tank 948</code></li> <li><code>Jet Fighter 988</code></li> <li><code>Helicopter Gunship 992</code></li> <li><code>Mechanized Infantry 1186</code></li> <li><code>Panzer 1223</code></li> <li><code>Mobile SAM 1376</code></li> <li><code>Modern Armor 1620</code></li> <li><code>Giant Death Robot 2977</code></li> <li><code>Atomic Bomb 4714</code></li> <li><code>Nuclear Missile 7906</code></li> </ul>"},{"location":"Other/Installing-on-macOS/","title":"Installing on macOS","text":"<p>There are currently several ways to install Unciv on macOS.</p> <p>It is recommended that you do not install from source, since the end result will be the same.</p>"},{"location":"Other/Installing-on-macOS/#installing-using-macport","title":"Installing using MacPort","text":"<p>Details here - simply run <code>sudo port install unciv</code> from command line and you're good to go!</p> <p>Does not require JDK to be preinstalled</p>"},{"location":"Other/Installing-on-macOS/#installing-using-jar","title":"Installing using JAR","text":"<ol> <li>If you don't already have Java 8 or OpenJDK (versions 11 and 18 do work) installed on your mac, either</li> <li>Download it from the official website. Once you have downloaded the file, open it and follow the instructions on screen.</li> <li>If you use Homebrew, just run <code>brew install java</code></li> <li>Now that you have Java installed it's time to download the latest Unciv JAR. This can be done from the releases screen here on Github. Download the file called Unciv.jar.</li> <li>To run the game, you'll need to create to run <code>java -jar Unciv.jar</code> from a Terminal.</li> <li>Alternatively, you could create a 'Unciv.sh' file containing that line, and then run the new file, to allow you to create shortcuts etc.</li> </ol> <p>(Sadly Unciv dose not auto update when installing it using this method on macOS so you will need to download the latest Unciv.jar from Github every time you want to update the game.)</p>"},{"location":"Other/Installing-on-macOS/#installing-from-source","title":"Installing from source","text":"<p>For instructions on how to install Unciv from source see Building locally without Android Studio. It is not recommended to use this method as it achieves the same result as the first method whilst being much more complicated and prone to errors along the way.</p> <p>(Sadly Unciv dose not auto update when installing it using this method on macOS so you will need to follow these steps every time you want to update the game.)</p>"},{"location":"Other/Intentional-departures-from-Civ-V/","title":"Intentional departures from Civ V","text":""},{"location":"Other/Intentional-departures-from-Civ-V/#water-melee-units-can-attack-land-units-on-shore","title":"Water melee units can attack land units on shore","text":"<p>A result of a Discord poll. Water melee units in Civ V are considerably underpowered, so much so that even on maps with water they weren't considered competitive.</p> <p>This change brings back an edge to water melee units that makes them worth building.</p>"},{"location":"Other/Intentional-departures-from-Civ-V/#workers-do-not-complete-an-improvement-on-the-same-turn-they-get-orders-to-work-on-it","title":"Workers do not complete an improvement on the same turn - they get orders to work on it","text":"<p>This allows players to assign workers to improve tiles, and then to reconsider and change improvement or move them elsewhere.</p> <p>Building stuff takes time!</p>"},{"location":"Other/Intentional-departures-from-Civ-V/#forests-and-jungle-are-visible-1-tile-outside-visibility-range","title":"Forests and Jungle are visible 1 tile outside visibility range","text":"<p>In Civ V, this is the behavior of Hills and Mountains, but not of Jungle and Forest.</p> <p>And yet, Jungle and Forest can block Hills, and Hills+Forest can block Mountains from view - so they must be the same height!</p> <p>This part of Civ V visibility makes no sense, considering the otherwise well-structured visibility logic, and we consider this to be a bug.</p>"},{"location":"Other/Map-related-JSON-files/","title":"Map-related JSON files","text":""},{"location":"Other/Map-related-JSON-files/#terrainsjson","title":"Terrains.json","text":"<p>This file lists the base terrains, terrain features and natural wonders that can appear on the map.</p> <p>Each terrain entry can have the following properties:</p> Attribute Type Optional Notes name String Required type Enum Required Land, Water, TerrainFeature, NaturalWonder occursOn List Default none Only for terrain features and Natural Wonders: The baseTerrain it can be placed on turnsInto String Default none Only for Natural Wonders: After placing the Natural Wonder its base terrain is changed to this weight Integer Default 10 Only for Natural Wonders: relative weight it will be picked by the map generator <code>&lt;stats&gt;</code> Float Optional Per-turn yield or bonus yield for the tile, see Stats overrideStats Boolean Default false If on, a feature's yields replace any yield from underlying terrain instead of adding to it unbuildable Boolean Default false If true, nothing can be built here - not even resource improvements impassable Boolean Default false no unit can enter unless it has a special unique movementCost Integer Default 1 base movement cost defenceBonus Float Default 0 combat bonus for units being attacked here RGB List Integer * 3 Default 'Gold' RGB color for 'Default' tileset display uniques List Default empty List of effects, see here civilopediaText List Default empty see civilopediaText chapter"},{"location":"Other/Map-related-JSON-files/#tileimprovementsjson","title":"TileImprovements.json","text":"<p>This file lists the improvements that can be constructed or created on a map tile by a unit (any unit having the appropriate unique).</p> <p>Note that improvements have two visual representations - icon and pixel graphic in the tileset. Omitting the icon results in a horribly ugly user interface, while omitting tileset graphics will just miss out on an optional visualization. If you provide a pixel graphic for FantasyHex, please be aware of the layering system and the ruleVariants in the tileset json. A single graphic may suffice if it has lots of transparency, as it will be drawn on top of all other terrain elements.</p> <p>Each improvement can have the following properties:</p> Attribute Type Optional Notes name String Required terrainsCanBeFoundOn List Default empty Terrains that allow this resource techRequired String Default none The name of the technology required to build this improvement uniqueTo String Default none The name of the nation this improvement is unique for <code>&lt;stats&gt;</code> Float Optional Per-turn bonus yield for the tile, see Stats turnsToBuild Integer Number of turns a worker spends building this (ignored for 'create' actions) uniques List Default empty List of effects, see here shortcutKey String Default none Keyboard binding. At the moment a single character (no function keys or Ctrl combinations) civilopediaText List Default empty see civilopediaText chapter <ul> <li>Tiles with no terrains, but positive turns to build, can be built only when the tile has a resource that names this improvement or special uniques are used. (TODO: missing something?)</li> <li>Tiles with no terrains, and no turns to build, are like great improvements - they're placeable. That means a unit could exist with a 'Can create [this]' unique, and that the improvement will not show in a worker's improvement picker dialog.</li> <li>Removable Terrain features will need to be removed before building an improvement - unless the feature is named in terrainsCanBeFoundOn or the unique \"Does not need removal of [terrainFeature]\" is used (e.g. Camp allowed by resource).</li> <li>Special improvements: Road, Railroad, Remove *, Cancel improvement order, City ruins, City center, Barbarian encampment - these have special meanings hardcoded to their names.</li> </ul>"},{"location":"Other/Map-related-JSON-files/#tileresourcesjson","title":"TileResources.json","text":"<p>This file lists the resources that a map tile can have.</p> <p>Note the predefined resource types cannot be altered in json.</p> <p>Note also that resources have two visual representations - icon and pixel graphic in the tileset. Omitting the icon results in a horribly ugly user interface, while omitting tileset graphics will miss out on a visualization on the map. If you provide a pixel graphic for FantasyHex, please be aware of the layering system and the ruleVariants in the tileset json. A single graphic may suffice if it has lots of transparency, as it will be drawn on top of terrain and features but below an improvement - if the single improvement graphic exists at all.</p> <p>Each resource can have the following properties:</p> Attribute Type Optional Notes name String Required resourceType String Default Bonus Bonus, Luxury or Strategic terrainsCanBeFoundOn List Default empty Terrains that allow this resource <code>&lt;stats&gt;</code> Float Optional Per-turn bonus yield for the tile, see Stats, can be repeated improvement String Default empty The improvement (TileImprovements.json) for this resource improvementStats Object Default empty The additional yield when improved as sub-object with one or more Stats revealedBy String Default empty The technology name required to see, work and improve this resource unique String Default empty Effects, see here - at the moment only one unique may be added civilopediaText List Default empty see civilopediaText chapter"},{"location":"Other/Map-related-JSON-files/#ruinsjson","title":"Ruins.json","text":"<p>Link to original</p> <p>This file contains the possible rewards ancient ruins give. It is not required, if omitted, the default file for the game is used, even in baseRuleSet mods.</p> <p>Each of the objects in the file represents a single reward you can get from ruins. It has the following properties:</p> Attribute Type Optional Notes name String required Name of the ruins. Never shown to the user, but they have to be distinct notification String required Notification added to the user when this reward is chosen. If omitted, an empty notification is shown. Some notifications may have parameters, refer to the table below. weight Integer (\u22650) defaults to 1 Weight this reward should have. Higher weights result in a higher chance of it being chosen* uniques List of Strings defaults to none [uniques]Uniques#one-time-effect) or uniques that will trigger when entering the ruins. If more than 1 unique is added, the notification will be shown multiple times due to a bug. excludedDifficulties List of Strings defaults to None A list of all difficulties on which this reward may not be awarded <p>The exact algorithm for choosing a reward is the following:</p> <ul> <li>Create a list of all possible rewards, with rewards with a higher weight appearing multiple times. A reward with weight one will appear once, a reward with weight two will appear twice, etc.</li> <li>Shuffle this list</li> <li>Try give rewards starting from the top of the list. If any of the uniques of the rewards is valid in this context, reward it and stop trying more rewards.</li> </ul>"},{"location":"Other/Map-related-JSON-files/#notifications","title":"Notifications","text":"<p>Some of the rewards ruins can give will have results that are not deterministic when writing it in the JSON, so creating a good notification for it would be impossible. An example for this would be the \"Gain [50]-[100] [Gold]\" unique, which will give a random amount of gold. For this reason, we allow some notifications to have parameters, in which values will be filled, such as \"You found [goldAmount] gold in the ruins!\". All the uniques which have this property can be found below.</p> Unique Parameters Free [] found in the ruins The name of the unit will be filled in the notification, including unique units of the nation [] population in a random city The name of the city to which the population is added will be filled in the notification Gain []-[] [] The exact amount of the stat gained will be filled in the notification [] free random reasearchable Tech(s) from the [] The notification must have placeholders equal to the number of techs granted this way. Each of the names of these free techs will be filled in the notification Gain enough Faith for a Pantheon The amount of faith gained is filled in the notification Gain enough Faith for []% of a Great Prophet The amount of faith gained is filled in the notification"},{"location":"Other/Map-related-JSON-files/#specific-uniques","title":"Specific uniques","text":"<p>A few uniques can be added to ancient ruin effects to modify when they can be earned. These are:</p> <ul> <li>\"Only available after [amount] turns\"</li> <li>\"Hidden when religion is disabled\"</li> <li>\"Hidden after a great prophet has been earned\"</li> </ul>"},{"location":"Other/Map-related-JSON-files/#tileset-specific-json","title":"Tileset-specific json","text":"<p>A mod can define new Tilesets or add to existing ones, namely FantasyHex. There is one json file per Tileset, named same as the Tileset, and placed in a subfolder named \"TileSets\" relative to the other json files. This is called TileSetConfig and has the following structure:</p> Attribute Type Default value Notes useColorAsBaseTerrain Boolean false useSummaryImages Boolean false unexploredTileColor Color Dark Gray <code>{\"r\":0.25,\"g\":0.25,\"b\":0.25,\"a\":1}</code> fogOfWarColor Color Black <code>{\"r\":0,\"g\":0,\"b\":0,\"a\":1}</code> fallbackTileSet String \"FantasyHex\" null to disable tileScale Float 1.0 tileScales Dictionary empty ruleVariants Dictionary empty see below <p>ruleVariants control substitutions when layering images for a tile, they are list looking like:</p> <pre><code>    \"ruleVariants\": {\n\"Grassland+Forest\": [\"Grassland\", \"GrasslandForest\"],\n\"Plains+Forest\": [\"Plains\", \"PlainsForest\"],\n\"Plains+Jungle\": [\"Plains\", \"PlainsJungle\"],\n// . . .\n}\n</code></pre> <p>Each line means \"if the tile content is this... then combine the following png images\". The key part follows a specific order and must match in its entirety, meaning \"Plains+Forest\" is not valid for \"Plains+Forest+Deer\", and when it matches no other image layering is done except roads and units (I think - WIP).</p> <p>When TileSetConfig's for the same Tileset are combined, for the first three properties the last mod wins, while ruleVariants are merged, meaning only an entry with the same key overwrites an earlier entry.</p>"},{"location":"Other/Map-related-JSON-files/#stats","title":"Stats","text":"<p>Terrains, features, resources and improvements may list yield statistics. They can be one of the following:</p> <ul> <li>production</li> <li>food</li> <li>gold</li> <li>science</li> <li>culture</li> <li>happiness</li> <li>faith</li> </ul> <p>If an object carries general stats, any combination (or none) of these can be specified. For specialized stats, they might come as sub-object in a named field. Example:</p> <pre><code>        \"gold\": 2,\n\"improvement\": \"Quarry\",\n\"improvementStats\": { \"gold\": 1, \"production\": 1 },\n</code></pre> <p>The values are usually integers, though the underlying code supports floating point. The effects are, however, insufficiently tested and therefore -so far- using fractional stats is unsupported. Go ahead and thoroughly test that in a mod and help out with feedback \ud83d\ude01.</p>"},{"location":"Other/Miscellaneous-JSON-files/","title":"Miscellaneous JSON files","text":""},{"location":"Other/Miscellaneous-JSON-files/#difficultiesjson","title":"Difficulties.json","text":"<p>Link to original</p> <p>This file defines the difficulty levels a player can choose when starting a new game.</p> <p>Each difficulty level can have the following attributes:</p> Attribute Type Optional Notes name String Required Name of the difficulty level baseHappiness Integer Default 0 extraHappinessPerLuxury Float Default 0 researchCostModifier Float Default 1 unitCostModifier Float Default 1 buildingCostModifier Float Default 1 policyCostModifier Float Default 1 unhappinessModifier Float Default 1 barbarianBonus Float Default 0 playerBonusStartingUnits List of Units Default empty Can also be 'Era Starting Unit', maps to <code>startingMilitaryUnit</code> of the Eras file. All other units must be in Units.json] aiCityGrowthModifier Float Default 1 aiUnitCostModifier Float Default 1 aiBuildingCostModifier Float Default 1 aiWonderCostModifier Float Default 1 aiBuildingMaintenanceModifier Float Default 1 aiUnitMaintenanceModifier Float Default 1 aiFreeTechs List of Techs Default empty aiMajorCivBonusStartingUnits List of Units Default empty See above aiCityStateBonusStartingUnits List of Units Default empty See above aiUnhappinessModifier Float Default 1 aisExchangeTechs Boolean Unimplemented turnBarbariansCanEnterPlayerTiles Integer Default 0 clearBarbarianCampReward Integer Default 25"},{"location":"Other/Miscellaneous-JSON-files/#erasjson","title":"Eras.json","text":"<p>Link to original</p> <p>This file should contain all the era's you want to use in your mod.</p> <p>Each era can have the following attributes:</p> Attribute Type Optional Notes name String required Name of the era researchAgreementCost Integer (\u22650) defaults to 300 Cost of research agreements were the most technologically advanced civ is in this era iconRGB List of 3 Integers defaults to [255, 255, 255] RGB color that icons for technologies of this era should have in the Tech screen unitBaseBuyCost Integer (\u22650) defaults to 200 Base cost of buying units with Faith, Food, Science or Culture when no other cost is provided startingSettlerCount Integer (\u22650) defaults to 1 Amount of settler units that should be spawned when starting a game in this era startingSettlerUnit String defaults to \"Settler\" Name of the unit that should be used for the previous field. Must be in Units.json startingWorkerCount Integer (\u22650) defaults to 0 Amount of worker units that should be spawned when starting a game in this era startingWorkerUnit String defaults to \"Worker\" Name of the unit that should be used for the previous field. Must be in Units.json startingMilitaryUnitCount Integer (\u22650) defaults to 1 Amount of military units that should be spawned when starting a game in this era startingMilitaryUnit String defaults to \"Warrior\" Name of the unit that should be used for the previous field. Must be in Units.json startingGold Integer (\u22650) defaults to 0 Amount of gold each civ should receive when starting a game in this era startingCulture Integer (\u22650) defaults to 0 Amount of culture each civ should receive when starting a game in this era settlerPopulation Integer (&gt;0) defaults to 1 Default amount of population each city should have when settled when starting a game in this era settlerBuildings List of Strings defaults to none Buildings that should automatically be built whenever a city is settled when starting a game in this era startingObsoleteWonders List of Strings defaults to none Wonders (and technically buildings) that should be impossible to built when starting a game in this era. Used in the base game to remove all wonders older than 2 era's"},{"location":"Other/Miscellaneous-JSON-files/#speedsjson","title":"Speeds.json","text":"<p>Link to original</p> <p>This file should contain all the speeds you want to use in your mod.</p> <p>Each speed can have the following attributes:</p> Attribute Type Optional Notes name String required Name of the speed modifier Float (\u22650) defaults to 1.0 Overall game speed modifier productionCostModifier Float (\u22650) defaults to the value of <code>modifier</code> Scales production cost of units and buildings goldCostModifier Float (\u22650) defaults to the value of <code>modifier</code> Scales gold costs scienceCostModifier Float (\u22650) defaults to the value of <code>modifier</code> Scales science costs cultureCostModifier Float (\u22650) defaults to the value of <code>modifier</code> Scales culture costs faithCostModifier Float (\u22650) defaults to the value of <code>modifier</code> Scales faith costs improvementBuildLengthModifier Float (\u22650) defaults to the value of <code>modifier</code> Scales the time it takes for a worker to build tile improvements barbarianModifier Float (\u22650) defaults to the value of <code>modifier</code> Scales the time between barbarian spawns goldGiftModifier Float (\u22650) defaults to the value of <code>modifier</code> Scales the influence gained from gifting gold to city-states cityStateTributeScalingInterval Float (\u22650) defaults to 6.5 The number of turns it takes for the amount of gold a player demands from city-states to increase by 5 gold goldenAgeLengthModifier Float (\u22650) defaults to the value of <code>modifier</code> Scales the length of golden ages religiousPressureAdjacentCity Integer (\u22650) defaults to 6 Defines how much religious pressure a city exerts on nearby cities peaceDealDuration Integer (\u22650) defaults to 10 The number of turns a peace deal lasts dealDuration Integer (\u22650) defaults to 30 The number of turns a non-peace deal (research agreement, open borders, etc.) lasts startYear Float defaults to -4000 The start year of the game (negative is BC/BCE) turns List of HashMaps required The amount of time passed between turns (\"yearsPerTurn\") and the range of turn numbers (\"untilTurn\") that this duration applies to <p>The below code is an example of a valid \"turns\" definition and it specifies that the first 50 turns of a game last for 60 years each, then the next 30 turns (and any played after the 80th) last for 40 years each.</p> <pre><code>\"turns\": [\n{\"yearsPerTurn\": 60, \"untilTurn\":  50},\n{\"yearsPerTurn\": 40, \"untilTurn\":  80}\n]\n</code></pre>"},{"location":"Other/Miscellaneous-JSON-files/#modoptionsjson","title":"ModOptions.json","text":"<p>This file is a little different:</p> <ul> <li>Does not exist in Vanilla ruleset</li> <li>Is entirely optional but will be created after downloading a mod</li> </ul> <p>The file can have the following attributes, including the values Unciv sets (no point in a mod author setting those):</p> Attribute Type Optional Notes isBaseRuleset Boolean false Differentiates mods that change the vanilla ruleset or replace it maxXPfromBarbarians Integer 30 Deprecated, see constants uniques List empty Mod-wide specials, see here techsToRemove List empty List of Technologies or -filters to remove (isBaseRuleset=false only) buildingsToRemove List empty List of Buildings or Wonders or -filters to remove (isBaseRuleset=false only) unitsToRemove List empty List of Units or -filters to remove (isBaseRuleset=false only) nationsToRemove List empty List of Nations or -filters to remove (isBaseRuleset=false only) lastUpdated String empty Set automatically after download - Last repository update, not necessarily last content change modUrl String empty Set automatically after download - URL of repository author String empty Set automatically after download - Owner of repository modSize Integer empty Set automatically after download - kB in entire repository, not sum of default branch files constants Object empty see ModConstants"},{"location":"Other/Miscellaneous-JSON-files/#modconstants","title":"ModConstants","text":"<p>Stored in ModOptions.constants, this is a collection of constants used internally in Unciv. This is the only structure that is merged field by field from mods, not overwritten, so you can change XP from Barbarians in one mod and city distance in another. In case of conflicts, there is no guarantee which mod wins, only that default values are ignored.</p> Attribute Type Default Notes maxXPfromBarbarians Int 30 [^A] cityStrengthBase Float 8.0 [^B] cityStrengthPerPop Float 0.4 [^B] cityStrengthFromTechsMultiplier Float 5.5 [^B] cityStrengthFromTechsExponent Float 2.8 [^B] cityStrengthFromTechsFullMultiplier Float 1.0 [^B] cityStrengthFromGarrison Float 0.2 [^B] unitSupplyPerPopulation Float 0.5 [^C] minimalCityDistance Int 3 [^D] minimalCityDistanceOnDifferentContinents Int 2 [^D] unitUpgradeCost Object see below [^J] naturalWonderCountMultiplier Float 0.124 [^E] naturalWonderCountAddedConstant Float 0.1 [^E] ancientRuinCountMultiplier Float 0.02 [^F] maxLakeSize Int 10 [^H] riverCountMultiplier Float 0.01 [^I] minRiverLength Int 5 [^I] maxRiverLength Int 666 [^I] religionLimitBase Int 1 [^K] religionLimitMultiplier Float 0.5 [^K] pantheonBase Int 10 [^L] pantheonGrowth Int 5 [^L] <p>Legend:</p> <ul> <li>[^A]: Max amount of experience that can be gained from combat with barbarians</li> <li>[^B]: Formula for city Strength:     Strength = baseStrength + strengthPerPop + strengthFromTiles +     ((%techs * multiplier) ^ exponent) * fullMultiplier +     (garrisonBonus * garrisonUnitStrength * garrisonUnitHealth/100) +     defensiveBuildingStrength     where %techs is the percentage of techs in the tech tree that are complete     If no techs exist in this ruleset, %techs = 0.5 (=50%)</li> <li>[^C]: Formula for Unit Supply:     Supply = unitSupplyBase (difficulties.json)     unitSupplyPerCity * amountOfCities + (difficulties.json)     unitSupplyPerPopulation * amountOfPopulationInAllCities     unitSupplyBase and unitSupplyPerCity can be found in difficulties.json     unitSupplyBase, unitSupplyPerCity and unitSupplyPerPopulation can also be increased through uniques</li> <li>[^D]: The minimal distance that must be between any two cities, not counting the tiles cities are on     The number is the amount of tiles between two cities, not counting the tiles the cities are on.     e.g. \"C__C\", where \"C\" is a tile with a city and \"_\" is a tile without a city, has a distance of 2.     First constant is for cities on the same landmass, the second is for cities on different continents.</li> <li>[^E]: NaturalWonderGenerator uses these to determine the number of Natural Wonders to spawn for a given map size. The number scales linearly with map radius: #wonders = radius * naturalWonderCountMultiplier + naturalWonderCountAddedConstant. The defaults effectively mean Tiny - 1, Small - 2, Medium - 3, Large - 4, Huge - 5, Custom radius &gt;=109 - all G&amp;K wonders.</li> <li>[^F]: MapGenerator.spreadAncientRuins: number of ruins = suitable tile count * this</li> <li>[^H]: MapGenerator.spawnLakesAndCoasts: Water bodies up to this tile count become Lakes</li> <li>[^I]: RiverGenerator: river frequency and length bounds</li> <li>[^J]: A UnitUpgradeCost sub-structure.</li> <li>[^K]: Maximum foundable Religions = religionLimitBase + floor(MajorCivCount * religionLimitMultiplier)</li> <li>[^L]: Cost of pantheon = pantheonBase + CivsWithReligion * pantheonGrowth</li> </ul>"},{"location":"Other/Miscellaneous-JSON-files/#unitupgradecost","title":"UnitUpgradeCost","text":"<p>These values are not merged individually, only the entire sub-structure is.</p> Attribute Type Default Notes base Float 10 perProduction Float 2 eraMultiplier Float 0 exponent Float 1 roundTo Int 5 <p>The formula for the gold cost of a unit upgrade is (rounded down to a multiple of <code>roundTo</code>):         ( max((<code>base</code> + <code>perProduction</code> * (new_unit_cost - old_unit_cost)), 0)             * (1 + eraNumber * <code>eraMultiplier</code>) * <code>civModifier</code>         ) ^ <code>exponent</code> With <code>civModifier</code> being the multiplicative aggregate of \"[relativeAmount]% Gold cost of upgrading\" uniques that apply.</p>"},{"location":"Other/Miscellaneous-JSON-files/#tutorialsjson","title":"Tutorials.json","text":"<p>link to original</p> <p>Note a Base Ruleset mod can define a \"welcome page\" here by adding a \"Tutorial\" with a name equal to the name of the mod! As an exception to the general rule, this file in a Base Ruleset mod will not replace the default, but add to it like extension mods do. Also, place it under <code>&lt;mod&gt;/jsons/</code> normally even if the original is found one level above the vanilla jsons.</p> Attribute Type Optional Notes name String Required Entry name civilopediaText List Optional see here steps List(String) Optional Plain text <p>If an entry contains both <code>steps</code>and <code>civilopediaText</code> attributes, the <code>civilopediaText</code> is shown first.</p>"},{"location":"Other/Miscellaneous-JSON-files/#victorytypesjson","title":"VictoryTypes.json","text":"<p>link to original</p> <p>These files contain which victories this mod provides, and what milestones must be reached for someone to win a victory. Most of the file contains of strings that are shown to the user in the victory screen, with the rest being the requirements for winning.</p> <p>Each victory can have the following attributes:</p> Attribute Type Optional Notes name String Required Name of the victory victoryScreenHeader String Defaults to \"\" Shown in the footer of the victory in the <code>our status</code> in the victory screen victoryString String Defaults to \"\" Shown in the footer of the victory screen when you won the game with this victory defeatString String Defaults to \"\" Shown in the footer of the victory screen when someone else won the game with this victory hiddenInVictoryScreen Boolean Defaults to false Whether progress of this victory is hidden in the victory screen requiredSpaceshipParts List of Strings Defaults to \"\" What spaceship parts must be added to the capital for the corresponding milestone Milestones List of Strings Required List of milestones that must be accomplished to win, see below"},{"location":"Other/Miscellaneous-JSON-files/#milestones","title":"Milestones","text":"<p>Currently the following milestones are supported:</p> Milestone Requirement Build [building] Build the building [building] in any city Anyone build [building] Anyone must build the building [building] for all players to have this milestone Add all [comment] in capital Add all units in the <code>requiredSpaceshipParts</code> field of this victory to the capital Destroy all players You must be the only major civilization with any cities left Capture all capitals Capture all the original capitals of major civilizations in the game Complete [amount] Policy branches Fully complete at least [amount] policy branches Win diplomatic vote At any point in the game win a diplomatic vote (UN). You may lose afterwards and still retain this milestone Become the world religion Have your religion be the majority religion in a majority of cities of all major civs Have highest score after max turns Basically time victory. Enables the 'max turn' slider and calculates score when that amount is reached"},{"location":"Other/Miscellaneous-JSON-files/#civilopedia-text","title":"Civilopedia text","text":"<p>Any 'thing' defined in json and listed in the Civilopedia can supply extra text, specifically for the Civilopedia. This can be used to explain special considerations better when the automatically generated display is insufficient, or for 'flavour', background stories and the like. Such text can be formatted and linked to other Civilopedia entries, within limits.</p> <p>An example of the format is:</p> <pre><code>        \"civilopediaText\": [\n{ \"text\": \"Ancient ruins provide a one-time random bonus when explored\" },\n{ \"separator\": true },\n{\n\"text\": \"This line is red and links to the Scout including icons\",\n\"link\": \"Unit/Scout\",\n\"color\": \"red\"\n},\n{\n\"text\": \"A big fat header sporting a golden star\",\n\"header\": 1,\n\"starred\": true,\n\"color\": \"#ffeb7f\"\n},\n],\n</code></pre> <p>List of attributes - note not all combinations are valid:</p> Attribute Type Description <code>text</code> String Text to display. <code>link</code> String Create link and icon, format: Category/Name or external link ('http://','https://','mailto:'). <code>icon</code> String Show icon without linking, format: Category/Name. <code>extraImage</code> String Display an Image instead of text. Can be a path found in a texture atlas or or the name of a png or jpg in the ExtraImages folder. <code>imageSize</code> Float Width in world units of the [extraImage], height is calculated preserving aspect ratio. Defaults to available width. <code>header</code> Integer Header level. 1 means double text size and decreases from there. <code>size</code> Integer Text size, default is 18. Use <code>size</code> or <code>header</code> but not both. <code>indent</code> Integer Indent level. 0 means text will follow icons, 1 aligns to the right of all icons, each further step is 30 units. <code>padding</code> Float Vertical padding between rows, defaults to 5 units. <code>color</code> String Sets text color, accepts names or 6/3-digit web colors (e.g. #FFA040). <code>separator</code> Boolean Renders a separator line instead of text. Can be combined only with <code>color</code> and <code>size</code> (line width, default 2). <code>starred</code> Boolean Decorates text with a star icon - if set, it receives the <code>color</code> instead of the text. <code>centered</code> Boolean Centers the line (and turns off automatic wrap). <p>The lines from json will 'surround' the automatically generated lines such that the latter are inserted just above the first json line carrying a link, if any. If no json lines have links, they will be inserted between the automatic title and the automatic info. This method may, however, change in the future.</p> <p>Note: <code>text</code> now also supports inline color markup. Insert <code>\u00abcolor\u00bb</code> to start coloring text, <code>\u00ab\u00bb</code> to stop. <code>color</code> can be a name or 6/8-digit hex notation like <code>#ffa040</code> (different from the <code>color</code> attribute notation only by not allowing 3-digit codes, but allowing the alpha channel). Effectively, the <code>\u00ab\u00bb</code> markers are replaced with <code>[]</code> after translation and then passed to Gdx markup language.</p>"},{"location":"Other/Multiplayer/","title":"Multiplayer","text":"<p>Multiplayer in Unciv is based on simple save file up/download, which is why it is based on a free Dropbox account by default. However, a lot of people use this default, so it is uncertain if you'll actually be able to access it consistently. See Hosting a Multiplayer server for hosting your own server.</p>"},{"location":"Other/Multiplayer/#how-to-play","title":"How to play","text":"<ol> <li>Make sure you are all using the same multiplayer server (<code>Main Menu -&gt; Options -&gt; Multiplayer</code>)</li> <li>Let all players send you their user ID (<code>Main Menu -&gt; Multiplayer -&gt; Copy user ID</code>).</li> <li>(Optional) Add those user IDs to your friend list (<code>Main Menu -&gt; Multiplayer -&gt; Friends list</code>).</li> <li>In <code>Main Menu -&gt; Start new game</code>, check <code>Online multiplayer</code> on the left. On the right, add more human players and input the user IDs of the players you want to play with. Press <code>Start game!</code>.</li> <li>The game ID will be automatically put in your clipboard. (If you lost it, you can get it again from <code>Main Menu -&gt; Multiplayer -&gt; Copy game ID</code>). Send this game ID to the other players.</li> <li>The other players need to go to <code>Main Menu -&gt; Multiplayer -&gt; Add multiplayer game</code> and enter the game ID you just sent them. They can then join the game from this multiplayer screen.</li> </ol>"},{"location":"Other/Multiplayer/#hosting-a-multiplayer-server","title":"Hosting a Multiplayer server","text":"<p>Due to certain limitations on Dropbox's API, with the current influx of players, we've many times reached the point that Dropbox has become unavailable.</p> <p>Therefore, you can now host your own Unciv server on any computer that can run Java programs.</p> <p>This guide is written for people with a moderate amount of technical knowledge about computer software and who are able to search the web to learn stuff they might not know. If you're completely new to this, you'll likely not be able to follow without some larger time investment to learn.</p> <p>If you're proficient in server hosting, there's another how-to for you at the end.</p>"},{"location":"Other/Multiplayer/#how-to","title":"How To","text":"<p>Before starting, you must have a Java JDK installed. You'll also have to download the latest UncivServer.jar.</p> <p>From the directory where the <code>UncivServer.jar</code> file is located, create a folder named \"MultiplayerFiles\", open a terminal (in Windows, Shift+RightClick in the folder) and run the following command in the directory: <code>java -jar UncivServer.jar</code></p> <p>Your server has now started!</p> <p>To check if everything works, you can start Unciv on the same computer, go to \"Options &gt; Multiplayer\", then enter <code>http://localhost:8080</code> as the \"Server address\" and click \"Check connection to server\". You should now get a \"Success!\" result, which means it's working!</p> <p>To connect with other devices outside your local network or to make your server accessible from the web, you'll need a real IP. If your ISP provides you with a real IP already, forward your server's port (default 8080) with your router, and your server would be exposed to the internet! In this case you can also use <code>http://&lt;your-real-ip-adress&gt;:&lt;your-forwarded-port&gt;</code>. For example, if you have the IP <code>203.0.113.1</code> and forwarded the port of your server to port <code>1234</code>, your server can be accessed from the internet from the url <code>http://203.0.113.1:1234</code>. Additionally, since the <code>HTTP</code> protocol defaults to port <code>80</code>, if you have forwarded your server to port <code>80</code>, you wouldn\u2019t need to specify any port. For example, if you forward the server's port to port <code>80</code> of your real IP, your server would be exposed to <code>http://&lt;your-real-ip&gt;</code> or in this case <code>http://203.0.113.1</code>.</p> <p>On the other device, enter the URL to your server (<code>http://&lt;your IP address&gt;:&lt;your chosen port&gt;</code>), click 'check connection' from the new device, and if you get the same \"Success!\" result - congratulations, you're connected to the same server and can start a multiplayer game!</p> <p>Please note: * Devices not connected to the same server will not be able to participate in multiplayer games together * In many places, your external IP address changes periodically. If that is the case, you either have to update the IP all the time or use something like a dynamic DNS service. * To start your server from some special ports like <code>80</code> or <code>443</code>, you would need admin privileges. If you want to use those ports, run PowerShell as admin. However, if you use port forwarding from a router, you really don't need to do this. You can start the server from port <code>8080</code> and forward it to <code>80</code>.</p>"},{"location":"Other/Multiplayer/#how-to-for-people-with-hosting-experience","title":"How To for people with hosting experience","text":"<ul> <li>Have a Java JDK installed</li> <li>Download the latest UncivServer.jar (can also use that link to automatically update probably)</li> <li>See options with <code>java -jar UncivServer.jar --help</code><ul> <li>The server will run on a specified port (<code>-p</code>, default <code>8080</code>), writing files in a folder (<code>-f</code>, default <code>./MultiplayerFiles/</code>), so it needs appropriate permissions.</li> </ul> </li> <li>Run it: <code>java -jar UncivServer.jar -p 8080 -f /some/folder/</code><ul> <li>It basically just does simple file storage over HTTP.</li> <li>Files are not cleaned automatically if a game ends or is deleted on the client-side</li> </ul> </li> </ul>"},{"location":"Other/Multiplayer/#third-party-unofficial-software-for-hosting-your-own-unciv-server","title":"Third-party (unofficial) software for hosting your own Unciv server","text":"<ul> <li>https://github.com/Mape6/Unciv_server (Python)</li> <li>https://gitlab.com/azzurite/unciv-server (NodeJS)</li> <li>https://github.com/oynqr/rust_unciv_server (Rust)</li> <li>https://github.com/touhidurrr/UncivServer.xyz (NodeJS)</li> </ul>"},{"location":"Other/Multiplayer/#third-party-unofficial-publicly-hosted-unciv-servers","title":"Third-party (unofficial) publicly hosted Unciv servers","text":"<p>These servers are run by the community and not official servers. These servers may become (temporarily or permanently) unavailable and lose your game saves. They might also collect data like your IP, how often you play, or other data. Use these only if you accept these risks and trust the server owners.</p> <ul> <li><code>https://uncivserver.xyz/</code> - Run by PikaPika#2315 on their Discord (Source Code)</li> </ul>"},{"location":"Other/Regions/","title":"Regions","text":""},{"location":"Other/Regions/#the-concept","title":"The Concept","text":"<p>During the generation of a random map (only; not pre-made maps) the map is split into a number of regions equal to the number of major civs. Each region gets classified according to its prevalent terrain, or if unable to be classified is called a \"hybrid\" region. The region type corresponds to the start bias of the civs as they are distributed. The region type also determines start placement and what luxuries will appear in the region.</p> Example"},{"location":"Other/Regions/#how-to-define-region-behavior-in-your-mod","title":"How to define region behavior in your mod","text":"<p>The game will work without any extra json definitions, but if you want the region system to work well when generating maps for your mod, these are the relevant uniques to define.</p>"},{"location":"Other/Regions/#terrainsjson","title":"Terrains.json","text":"<p>\"Always Fertility [amount] for Map Generation\", \"[amount] to Fertility for Map Generation\" - these determine how good a terrain is for purposes of dividing land up fairly. The numbers are arbitrary but should reflect the relative value of the terrains.</p> <p>\"A Region is formed with at least [amount]% [simpleTerrain] tiles, with priority [amount]\", \"A Region is formed with at least [amount]% [simpleTerrain] tiles and [simpleTerrain] tiles, with priority [amount]\" - these determine the rules for when a region is classified as eg a \"desert\" region. Terrains are evaluated in ascending priority order, so in the base ruleset tundra regions are checked first. \"A Region can not contain more [simpleTerrain] tiles than [simpleTerrain] tiles\" - a useful compliment to the sum-of-two-terrains criterium above, if both terrains are in and of themselves terrain types. So in the base ruleset a large enough sum of jungle and forest allows a region to be classified as jungle, but only if there is more jungle than forest. \"Base Terrain on this tile is not counted for Region determination\" - for terrain features that are unremovable or otherwise dominate the tile. Used for Hills in the base ruleset. A region not fulfilling any criteria is classified as \"Hybrid\"</p> <p>\"Considered [terrainQuality] when determining start locations\" - where \"terrainQuality\" is one of \"Food\", \"Production\", \"Desirable\", \"Undesirable\". Usually used together with the \"\" or \"\" to determine what terrain is attractive when determining start locations. Note: if there are none of these for a terrain, the game will use the base stats of the terrain to guess a quality, but if there are any, the game will assume that they are complete."},{"location":"Other/Translating/","title":"Translating","text":""},{"location":"Other/Translating/#starting-out","title":"Starting out","text":"<p>The translation files are at /android/assets/jsons/translations</p> <p>If you're adding a new language, you'll need to create a new file ('Create a new file' to the right of the folder name in the UI), and copy into it the contents of template.properties</p> <p>If you're adding stuff to an existing language, simply start editing the file!</p> <p>You don't need to download anything, all translation work can be done on the Github website :)</p> <p>When you feel that you're ready to add your translation to the game, you'll need to create a merge request, which takes your changes and puts them into the main version of the game - it's pretty straightforward once you do it</p> <p>Please note that Right-to-Left languages such as Arabic and Hebrew are not supported by the framework :/</p>"},{"location":"Other/Translating/#app-store-text","title":"App store text","text":"<p>There are two special entries that won't show in the game but are automatically used to provide short and long descriptions for F-Droid (and possibly other stores soon). They're near the beginning of each language file and marked \"Fastlane\". See the comments just above each for help, and where to find the actual english original to translate. Do not overlook the note on line breaks in Other notes for the full description!</p>"},{"location":"Other/Translating/#pitfalls","title":"Pitfalls","text":"<ul> <li>If a translation template (the stuff to the left of \"<code>=</code>\") contains square brackets, you will have to include each of them verbatim in your translation, but you can move them. Upper/lower case is relevant! e.g. <code>All [personFilter] are cool</code> can be translated as <code>Tous les [personFilter] sont cool</code>, but not as <code>Tous les [personnages] sont cool</code>, and neither as <code>Nous sommes vraiment cool</code>. Failing this is the main cause of your PR's showing up with red \"x\"es and \"checks failed\".</li> <li>Blanks: Watch out for blanks at the start of a line or two of them before the equals sign. If you got such a line - those blanks are part of the translation key and must not be deleted on the left side, and you should probably also include them in your translation (unless your language doesn't need spaces to separate things).</li> <li>Changes in the templates: When we find a typo in the english texts and fix it, or marginally change a wording, the template changes. Often the old template will not be automatically fixed in the existing translations, because it's a lot of work and in most cases the developers cannot be sure the translation is still correct. For you, that might look like your translations are simply disappearing with an update. In such a case, you have the option to use github's history to look up old versions, copy the old translation, place it where the new template now says \"requires translation\" - and proofread and adapt it to the new english version. The history link for each file is in the top right area and has a nice round clock icon.</li> </ul>"},{"location":"Other/Translating/#wait-what-just-happened","title":"Wait, what just happened?","text":"<p>Like most open-source projects, Unciv is developed at Github, so if you don't have a user you'll first have to create one. The way Github works is the following:</p> <ol> <li>You create a 'fork' repo, i.e. copy, of Unciv that belongs to your user (myUser/Unciv)</li> <li>You make changes to your copy. These changes are called a 'commit'.</li> <li>You make a pull request, which is basically asking for the changes you made on myUser/Unciv to be merged into the main repo (yairm210/Unciv)</li> </ol> <p>When you ask to 'edit' a file in yairm210/Unciv, these stages happen automatically - but it's important to understand what's happening behind the scenes do you understand where the changes actually are!</p>"},{"location":"Other/Translating/#why-not-use-a-crowdsourcing-translation-website-like","title":"Why not use a crowdsourcing translation website like &lt;...&gt;?","text":"<ol> <li>Testing. Currently, translations undergo a number of tests for verification. This allows some language changes to be accepted and others not, and it's all in the same platform with the same tests. External translation tools don't allow for this.</li> <li>History and revisions. This is what Git was made for, and nothing like it exists in the world. I'm not exaggerating.</li> <li>Release cycle. We release versions weekly. If we need to take information from an external website every time, and for many that I've checked - you need to download the info as a csv or something and convert it. Every extra step hurts.</li> <li>Discussions. Most crowdsourcing translation websites don't allow for discussions and corrections on translations. Github does.</li> <li>Mass changes. If we're changing the source of the translation but want to keep the various destinations (say, we change \"Gold from trade routes +[amount]%\" to \"+[amount]% Gold from trade routes\"), if all the translation files are in Git we can do that in 1 minute. If it's external, this varies greatly.</li> </ol>"},{"location":"Other/Translating/#other-notes","title":"Other notes","text":"<p>Make sure that you make the changes in the 'master' branch in your repo!</p> <p>Each untranslated phrase will have a \"requires translation\" line before it, so you can quickly find them. You don't need to remove them yourself if you don't want to - they will be automatically removed the next time we rebuild the file.</p> <p>Order of lines does not matter, they will be rearranged automatically each release.</p> <p>Do as much as you're comfortable with - it's a big game with a lot of named objects, so don't feel pressured into doing everything =)</p> <p>Some entries have line breaks expressed as <code>\\n</code>: Your translation can and in most cases should use them as well, but you do not need to distribute them exactly as in the original. Try to find a translation that reads nicely, then place the line break codes at roughly the same intervals as the original uses (less if your language's glyphs are wider than latin ones). Important: You cannot use normal line breaks, you must use the <code>\\n</code> codes, normal line breaks are not part of a translation.</p> <p>A Chinese tutorial for translation was created by our Chinese translators, which can be found here: (Video On Bilibili)</p> <p>\u5982\u679c\u4f60\u662f\u4e2d\u56fd\u4eba\uff0c\u90a3\u4e48\u606d\u559c\u4f60\u8fd0\u6c14\u4e0d\u9519\uff01\u8fd9\u91cc\u6709Unciv\u4e2d\u6587\u5f00\u53d1\u8005\u4eec\u4e13\u95e8\u4e3a\u4e2d\u6587\u7ffb\u8bd1\u5de5\u4f5c\u8005\u51c6\u5907\u7684\uff08\u5341\u5206\u8be6\u5c3d\uff09\u6559\u7a0b\u89c6\u9891\u3002\uff1a(Video On Bilibili)</p>"},{"location":"Other/Translating/#translation-generation-for-developers","title":"Translation generation - for developers","text":""},{"location":"Other/Translating/#the-automatic-template-generation","title":"The automatic template generation","text":"<p>Before releasing every version, we regenerate the translation files.</p> <p>Sometimes, new strings (names, uniques, etc) are added in the json files. In order to not have to add every single one to the translation files manually, we have a class - TranslationFileWriter - that, for every language:</p> <ul> <li>Goes over the template.properties and copies translation lines</li> <li>For every json file in the jsons folder<ul> <li>Selects all string values - both in objects, and in arrays in objects, to any inheritance or nesting level.     (Collections that can be parsed must be derived from List or AbstractCollection)</li> <li>Generates a 'key = value' line</li> </ul> </li> <li>Scans knowledge from UniqueType and UniqueParameterType instances and generates 'key = value' lines for them</li> </ul> <p>This means that every text that ISN'T in the jsons or the UniqueType system needs to be added manually to the template.properties in order to be translated! That also means if you've been adding new json structures you (or someone) should check TranslationFileWriter and see if it is able to cope with them.</p>"},{"location":"Other/Translating/#rules-for-templates-added-manually","title":"Rules for templates added manually","text":"<p>Building a new UI and doing something like <code>popup.add(\"Hello world\".toLabel())</code> is a typical case: This is not contained in json data, so you'll have to add the template to <code>template.properties</code> yourself. For this example, adding <code>Hello world =</code> somewhere in a line of its own could suffice.</p> <p>Note the space at the end - it's absolutely required, and see to it your editor does not destroy your work. If you want to make sure, use Android Studio for git integration, but edit the file in an external editor, then run the unit tests locally before pushing. (to do: add link for instructions how to do that)</p> <p>Leading spaces on a translation line or more than one space between the text and the <code>=</code> would mean these spaces are a key part of the string to be translated. That can work, but be warned: translators often overlook that those spaces are a required part of both template and translation, so if you can do without, then doing without is safer.</p> <p>Translation templates can use placeholders, and there's two varieties: <code>[]</code> and <code>{}</code>. Square ones take precedence over curly ones, and nesting works only with a single level of curly nested inside one level of square. I both cases the symbols themselves (<code>[]{}</code>) are removed by the translation engine.</p> <p>Square brackets <code>[]</code> mean the outer and inner components are both translated individually. The outer template will use alias names inside the brackets - example: Your code outputs \"Everyone gains [5000] gold!\", then the translation template should be \"Everyone gains [amount] gold! = \". The translation engine would translate the \"Everyone gains [] gold!\" and \"5000\" individually and reassemble them - of course, the number is simply passed through. But in other cases that could be e.g. a Unit name that would be translated, and you could trust that translations for units are already handled just fine. Note that uniques often use the feature, but it is in no way limited to them. It it makes life easier for translators, use it.</p> <p>Curly brackets <code>{}</code> are simpler - the contents within the brackets are translated individually, while the outer parts are passed through verbatim. Example: <code>\"+$amount${Fonts.gold} {Gold}\".toLabel()</code> - note the first <code>${}</code> is a kotlin template while the second pair becomes part of the string. It tells the translation engine to ignore the numbers and the symbol but to translate the single word \"Gold\".</p>"},{"location":"Other/Translating/#rules-for-all-sources","title":"Rules for all sources","text":"<p>The [], {} and &lt;&gt; bracket types are used internally and cannot be part of a translatable text. Use () instead.</p>"},{"location":"Other/Translating/#translation-generation-for-modders","title":"Translation generation - for modders","text":"<p>If you can run desktop with the mod installed, then provide at least one valid translation of something that is present in your mod or the base game in that file. The file can be empty otherwise. Now run Unciv and use options-advanced-\"Generate translation files\". Reload your translation file and it will have added all the necessary \"requires translation\" entries specific to your mod (I repeat, works only if there's at least one valid entry already there). AFAIK you can also override base game translations, but those won't be output by the \"Generate translation files\" tool.</p> <p>Here's an example: Say you have a new nation in your mod named \"The Borg\". You create the translations folder, create an empty file named, say, \"Hungarian.properties\", add \"The Borg = The Borg\" to that, run Unciv and run the translation generator from options. Reload the new file, bingo all what Unciv would like to see is there.</p> <p>If you're modding on Android only - don't. That said, it's not impossible, just make do without the described tool and add everything yourself, test, rinse, repeat. Be aware that the game does not read changed files from disk if it doesn't need to, so on Droid you could either edit locally and force-stop to ensure changes are read, or edit on a github repo and re-install from there, or...</p> <p>Adding new languages in a mod is not supported (because the completionPercentages.properties file determines which languages Unciv deems as known, and I'm not saying impossible as one could manipulate their GameSettings.json).</p> <p>Remember, exact case is important both in translations left of the \"=\" and file names.</p>"},{"location":"Other/Translating/#more-about-translating","title":"More about translating","text":"<p>Sometimes you'll see a <code>English.properties</code> in the translation folder. For example, if you see <code>gold = credits</code> in <code>English.properties</code>, It means the word 'gold' will be displayed as 'credits' in the English version. So in your translation file, though 'gold' is already translated in vanilla unciv, you should sill translate the line. <pre><code>gold = credits ( &lt;- in your language)\nNOT:gold = gold ( &lt;- in your language)\n</code></pre> (The example comes from the mod Alpha-Frontier. Thanks @carriontrooper.)</p> <p>Most Base Ruleset mods contain this feature, so you'd better be careful translating those, or you'll make the translation work really 'amuzing':D</p> <p>Another thing about translation is 'extra translating'. The aim of 'extra translating' is to make your mod translation closer to the gaming content and give the players a better gaming experience. A great example is from @SpacedOutChicken's mod Deciv. @The Bucketeer made some 'extra translations' which are excellent.(link is here)I've got a few lines here so you can take it as a reference. <pre><code>Your warmongering ways are unacceptable to us. = \u5373\u4f7f\u5728\u91ce\u883b\u7684\u8352\u571f\u4e16\u754c\uff0c\u7aae\u5175\u9ef7\u6b66\u7684\u884c\u5f91\u9084\u662f\u7121\u6cd5\u5bb9\u5fcd\u7684\uff01\n(English meaning: These warmongering ways are still unaccepable enen in this world of savage)\n</code></pre></p>"},{"location":"Other/Unit-related-JSON-files/","title":"Unit-related JSON files","text":""},{"location":"Other/Unit-related-JSON-files/#unitsjson","title":"Units.json","text":"<p>Link to original</p> <p>This file should contain a list of all the units, both military and civilian, that you want to use in your mod.</p> <p>Each unit can have the following attributes:</p> Attribute Type Optional Notes name String required The name of the units (required) unitType String required The type of the unit. Must be in UnitTypes.json cost Integer (\u22650) defaults to 0 The amount of production required to build this unit movement Integer (\u22650) defaults to 0 The amount of movement points the unit has by default strength Integer (\u22650) defaults to 0 The melee attack and defensive strength of the unit. If this and rangedStrength are ommited or 0, the unit will be a civilian rangedStrength Integer (\u22650) defaults to 0 The ranged attack strength of the unit. If omitted, the unit cannot ranged attack range Integer (\u22650) defaults to 2 The default range from which ranged attacks can be preformed interceptRange Integer (\u22650) defaults to 0 Air units attacking within in this range will be intercepted requiredTech String defaults to none The tech required to build this unit. Must be in Techs.json obsoleteTech String defaults to none After researching this tech, the unit can no longer be build. Must be in Techs.json requiredResource String defaults to none Resource that is consumed by building this unit. Must be in TileResources.json upgradesTo String defaults to none Unit that this unit can upgrade to when it is available. Must be in Units.json replaces String defaults to none If this unit is unique to a nation, this is the unit it replaces. Must be in Units.json uniqueTo String defaults to none The nation that this unit is unique to. Must be in Nations.json hurryCostModifier Integer defaults to 0 If this unit is bought for gold/faith, it's price is increased by so much percent promotions List of Strings defaults to none A list of all the promotions the unit automatically receives upon being built. Each promotion must be in UnitPromotions.json uniques List of Strings defaults to none A list of the unique abilities this unit has. A list of almost all uniques can be found here replacementTextForUniques String defaults to none If provided, this will be displayed instead of the list of uniques. Can be used for better formatting. attackSound String defaults to none The sound that is to be played when this unit attacks. For possible values, see Sounds civilopediaText List Default empty see civilopediaText chapter"},{"location":"Other/Unit-related-JSON-files/#unitpromotionsjson","title":"UnitPromotions.json","text":"<p>Link to original</p> <p>This file lists the available unit promotions.</p> <p>Each promotion must have an icon, except progressions ending in \" I\", \" II\", \" III\" (no IV V VI allowed) are rendered by looking up an icon without those suffixes and adding stars.</p> <p>Remember, promotions can be \"bought\" with XP, but also granted by the unit type, buildings, wonders and such. They are preserved when a unit upgrades, therefore special properties of nation unique units that can be inherited when they upgrade should be in a promotion, not uniques/stats in the units json (example: Slinger withdraw).</p> <p>Each promotion can have the following properties:</p> Attribute Type Optional Notes name String Required See above for \"I, II, III\" progressions prerequisites List Default empty Prerequisite promotions effect String Default empty Deprecated, use uniques instead unitTypes List Default empty The unit types for which this promotion applies as specified in UnitTypes.json uniques List Default empty List of effects, see here civilopediaText List Default empty see civilopediaText chapter"},{"location":"Other/Unit-related-JSON-files/#unittypesjson","title":"UnitTypes.json","text":"<p>Link to original</p> <p>This optional file is used for defining new types of units. The names of these can be used in unitFilters, and these types determine what domain the unit moves in: over land, over water or through the air. If the file is ommitted, the following are automatically added: Civilian, Melee, Ranged, Scout, Mounted, Armor, Siege, WaterCivilian, WaterMelee, WaterRanged, WaterSubmarine, WaterAircraftCarrier, Fighter, Bomber, AtomicBomber, and Missile.</p> Attribute Type Optional Notes name String required The name of the unit type movementType String required The domain through which the unit moves. Allowed values: \"Water\", \"Land\", \"Air\" uniques List of String defaults to none A list of the unique abilities every unit of this type has. A list of almost all uniques can be found here"}]}